.TH std::is_null_pointer 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_null_pointer \- std::is_null_pointer

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++14)\fP
   struct is_null_pointer;

   std::is_null_pointer is a UnaryTypeTrait.

   Checks whether T is the type std::nullptr_t.

   Provides the member constant value that is equal to true, if T is the type
   std::nullptr_t, const std::nullptr_t, volatile std::nullptr_t, or const volatile
   std::nullptr_t.

   Otherwise, value is equal to false.

   If the program adds specializations for std::is_null_pointer
   or std::is_null_pointer_v
   \fI(since C++17)\fP, the behavior is undefined.

.SH Template parameters

   T - a type to check

   Helper variable template

   template< class T >                                                   \fI(since C++17)\fP
   inline constexpr bool is_null_pointer_v = is_null_pointer<T>::value;

   

Inherited from std::integral_constant

.SH Member constants

   value    true if T is the type std::nullptr_t (possibly cv-qualified), false
   \fB[static]\fP otherwise
            \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Possible implementation

   template<class T>
   struct is_null_pointer : std::is_same<std::nullptr_t, std::remove_cv_t<T>> {};

.SH Notes

   std::is_pointer is false for std::nullptr_t because it is not a built-in pointer
   type.

      Feature-test macro      Value    Std         Feature
   __cpp_lib_is_null_pointer 201309L \fI(C++14)\fP std::is_null_pointer

.SH Example

   
// Run this code

 #include <type_traits>
  
 static_assert(std::is_null_pointer_v<decltype(nullptr)>);
 static_assert(!std::is_null_pointer_v<int*>);
 static_assert(!std::is_pointer_v<decltype(nullptr)>);
 static_assert(std::is_pointer_v<int*>);
  
 int main()
 {
 }

.SH See also

   is_void     checks if a type is void
   \fI(C++11)\fP     \fI(class template)\fP 
   is_array    checks if a type is an array type
   \fI(C++11)\fP     \fI(class template)\fP 
   is_pointer  checks if a type is a pointer type
   \fI(C++11)\fP     \fI(class template)\fP 
   is_enum     checks if a type is an enumeration type
   \fI(C++11)\fP     \fI(class template)\fP 
   is_union    checks if a type is a union type
   \fI(C++11)\fP     \fI(class template)\fP 
   is_class    checks if a type is a non-union class type
   \fI(C++11)\fP     \fI(class template)\fP 
   is_function checks if a type is a function type
   \fI(C++11)\fP     \fI(class template)\fP 
   is_object   checks if a type is an object type
   \fI(C++11)\fP     \fI(class template)\fP 
