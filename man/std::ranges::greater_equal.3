.TH std::ranges::greater_equal 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::greater_equal \- std::ranges::greater_equal

.SH Synopsis
   Defined in header <functional>
   struct greater_equal;           \fI(since C++20)\fP

   Function object for performing comparisons. Deduces the parameter types of the
   function call operator from the arguments (but not the return type).

.SH Member functions

   operator() checks if the first argument is greater than or equal to the second
              \fI(public member function)\fP

std::ranges::greater_equal::operator()

   template< class T, class U >
   constexpr bool operator()( T&& t, U&& u ) const;

   Equivalent to return !ranges::less{}(std::forward<T>(t), std::forward<U>(u));.

   This overload participates in overload resolution only if
   std::totally_ordered_with<T, U> is satisfied.

.SH Notes

   Unlike std::greater_equal, std::ranges::greater_equal requires all six comparison
   operators <, <=, >, >=, == and != to be valid (via the totally_ordered_with
   constraint) and is entirely defined in terms of std::ranges::less.

.SH Example

    This section is incomplete
    Reason: no example

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to       Behavior as published              Correct behavior
   LWG 3530 C++20      syntactic checks were relaxed     only semantic requirements are
                       while comparing pointers          relaxed

.SH See also

   greater_equal function object implementing x >= y
                 \fI(class template)\fP 

.SH Category:
     * Todo no example
