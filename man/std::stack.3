.TH std::stack 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::stack \- std::stack

.SH Synopsis
   Defined in header <stack>
   template<

       class T,
       class Container = std::deque<T>

   > class stack;

   The std::stack class is a container adaptor that gives the programmer the
   functionality of a stack - specifically, a LIFO (last-in, first-out) data structure.

   The class template acts as a wrapper to the underlying container - only a specific
   set of functions is provided. The stack pushes and pops the element from the back of
   the underlying container, known as the top of the stack.

.SH Template parameters

   T         - The type of the stored elements. The program is ill-formed if T is not
               the same type as Container::value_type.
               The type of the underlying container to use to store the elements. The
               container must satisfy the requirements of SequenceContainer.
               Additionally, it must provide the following functions with the usual
               semantics:
                 * back(), e.g., std::vector::back(),
   Container -   * push_back(), e.g., std::deque::push_back(),
                 * pop_back(), e.g., std::list::pop_back().

               The standard containers std::vector (including std::vector<bool>),
               std::deque and std::list satisfy these requirements. By default, if no
               container class is specified for a particular stack class instantiation,
               the standard container std::deque is used.

.SH Member types

   Member type     Definition
   container_type  Container
   value_type      Container::value_type
   size_type       Container::size_type
   reference       Container::reference
   const_reference Container::const_reference

.SH Member objects

   Member name Definition
   Container c the underlying container
               \fI(protected member object)\fP 

.SH Member functions

   constructor   constructs the stack
                 \fI(public member function)\fP 
   destructor    destructs the stack
                 \fI(public member function)\fP 
   operator=     assigns values to the container adaptor
                 \fI(public member function)\fP 
.SH Element access
   top           accesses the top element
                 \fI(public member function)\fP 
.SH Capacity
   empty         checks whether the container adaptor is empty
                 \fI(public member function)\fP 
   size          returns the number of elements
                 \fI(public member function)\fP 
.SH Modifiers
   push          inserts element at the top
                 \fI(public member function)\fP 
   push_range    inserts a range of elements at the top
   (C++23)       \fI(public member function)\fP 
   emplace       constructs element in-place at the top
   \fI(C++11)\fP       \fI(public member function)\fP 
   pop           removes the top element
                 \fI(public member function)\fP 
   swap          swaps the contents
   \fI(C++11)\fP       \fI(public member function)\fP 

.SH Non-member functions

   operator==
   operator!=
   operator<
   operator<=            lexicographically compares the values of two stacks
   operator>             \fI(function template)\fP 
   operator>=
   operator<=>
   (C++20)
   std::swap(std::stack) specializes the std::swap algorithm
   \fI(C++11)\fP               \fI(function template)\fP 

.SH Helper classes

   std::uses_allocator<std::stack> specializes the std::uses_allocator type trait
   \fI(C++11)\fP                         \fI(class template specialization)\fP 
   std::formatter<std::stack>      formatting support for std::stack
   (C++23)                         \fI(class template specialization)\fP 

     Deduction guides \fI(since C++17)\fP

.SH Notes

       Feature-test macro       Value    Std                   Feature
   __cpp_lib_containers_ranges 202202L (C++23) Ranges construction and insertion for
                                               containers

.SH Example

    This section is incomplete
    Reason: no example

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to    Behavior as published              Correct behavior
   LWG 307  C++98      Container could not be      allowed
                       std::vector<bool>
   LWG 2566 C++98      Missing the requirement for ill-formed if T is not the same type
                       Container::value_type       as Container::value_type

.SH See also

   vector       dynamic contiguous array
                \fI(class template)\fP 
   vector<bool> space-efficient dynamic bitset
                \fI(class template specialization)\fP 
   deque        double-ended queue
                \fI(class template)\fP 
   list         doubly-linked list
                \fI(class template)\fP 

.SH Category:
     * Todo no example
