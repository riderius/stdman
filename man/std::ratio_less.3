.TH std::ratio_less 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ratio_less \- std::ratio_less

.SH Synopsis
   Defined in header <ratio>
   template< class R1, class R2 >
   struct ratio_less : std::integral_constant<bool, /* see below */> {    \fI(since C++11)\fP
   };

   If the ratio R1 is less than the ratio R2, provides the member constant value equal
   true. Otherwise, value is false.

.SH Member constants

   value    true if R1::num * R2::den < R2::num * R1::den, or equivalent expression
   \fB[static]\fP that avoids overflow, false otherwise
            \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Example

   
// Run this code

 #include <iostream>
 #include <ratio>
  
 int main()
 {
     using x = std::ratio<69, 90>;
     using y = std::ratio<70, 90>;
  
     if constexpr (std::ratio_less_v<x, y>)
         std::cout << x::num << '/' << x::den << " < "
                   << y::num << '/' << y::den << '\\n';
 }

.SH Output:

 23/30 < 7/9

.SH See also

   ratio_greater compares two ratio objects for greater than at compile-time
   \fI(C++11)\fP       \fI(class template)\fP 
