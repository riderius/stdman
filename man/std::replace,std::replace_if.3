.TH std::replace,std::replace_if 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::replace,std::replace_if \- std::replace,std::replace_if

.SH Synopsis
   Defined in header <algorithm>
   template< class ForwardIt, class
   T >
                                             (constexpr
   void replace( ForwardIt first,            since C++20)
   ForwardIt last,                           (until C++26)

                 const T& old_value,
   const T& new_value );
   template< class ForwardIt, class
   T = typename std::iterator_traits

                                    
          <ForwardIt>::value_type >          (since C++26)
   constexpr void replace( ForwardIt
   first, ForwardIt last,

                           const T&
   old_value, const T& new_value );
   template< class ExecutionPolicy,
   class ForwardIt, class T >

   void replace( ExecutionPolicy&&                         (since
   policy,                                                 C++17)
                 ForwardIt first,                          (until
   ForwardIt last,                                         C++26)

                 const T& old_value,
   const T& new_value );
   template< class ExecutionPolicy,
   class ForwardIt,

             class T = typename
   std::iterator_traits
                          
   <ForwardIt>::value_type >                               (since
   void replace( ExecutionPolicy&&                         C++26)
   policy,
                 ForwardIt first,
   ForwardIt last,

                 const T& old_value,
   const T& new_value );
   template< class ForwardIt, class
   UnaryPred, class T >
                                     \fB(1)\fP                           (constexpr
   void replace_if( ForwardIt first,                               since C++20)
   ForwardIt last,                                                 (until
                                                                   C++26)
                    UnaryPred p,
   const T& new_value );
   template< class ForwardIt, class
   UnaryPred,

             class T = typename          \fB(2)\fP
   std::iterator_traits
                                                                   (since
   <ForwardIt>::value_type> >                                      C++26)
   constexpr void replace_if(
   ForwardIt first, ForwardIt last,

                            
    UnaryPred p, const T& new_value
   );
   template< class ExecutionPolicy,

             class ForwardIt, class          \fB(3)\fP
   UnaryPred, class T >                                                         (since
   void replace_if(                                                             C++17)
   ExecutionPolicy&& policy,                                                    (until
                    ForwardIt first,                                            C++26)
   ForwardIt last,

                    UnaryPred p,
   const T& new_value );
   template< class ExecutionPolicy,
                                                           \fB(4)\fP
             class ForwardIt, class
   UnaryPred,
             class T = typename
   std::iterator_traits
                                                                                (since
   <ForwardIt>::value_type> >                                                   C++26)
   void replace_if(
   ExecutionPolicy&& policy,
                    ForwardIt first,
   ForwardIt last,

                    UnaryPred p,
   const T& new_value );

   Replaces all elements in the range [first, last) with new_value if they satisfy
   specific criteria.

   1) Replaces all elements that are equal to old_value (using operator==).
   3) Replaces all elements for which predicate p returns true.
   2,4) Same as (1,3), but executed according to policy.
   These overloads participate in overload resolution only if

   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true.        (until
                                                                             C++20)
   std::is_execution_policy_v<std::remove_cvref_t<ExecutionPolicy>> is true. (since
                                                                             C++20)

   If
   *first = new_value is invalid
   \fI(until C++20)\fP
   new_value is not writable to first
   \fI(since C++20)\fP, the program is ill-formed.

.SH Parameters

   first, last - the range of elements to process
   old_value   - the value of elements to replace
   policy      - the execution policy to use. See execution policy for details.
                 unary predicate which returns true if the element value should be
                 replaced.

                 The expression p(v) must be convertible to bool for every argument v
   p           - of type (possibly const) VT, where VT is the value type of ForwardIt,
                 regardless of value category, and must not modify v. Thus, a parameter
                 type of VT&is not allowed
                 , nor is VT unless for VT a move is equivalent to a copy
                 \fI(since C++11)\fP.
   new_value   - the value to use as replacement
.SH Type requirements
   -
   ForwardIt must meet the requirements of LegacyForwardIterator.
   -
   UnaryPred must meet the requirements of Predicate.

.SH Return value

   \fI(none)\fP

.SH Complexity

   Given \\(\\scriptsize N\\)N as std::distance(first, last):

   1,2) Exactly \\(\\scriptsize N\\)N comparisons using operator==.
   3,4) Exactly \\(\\scriptsize N\\)N applications of the predicate p.

.SH Exceptions

   The overloads with a template parameter named ExecutionPolicy report errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the standard policies, std::terminate is called.
       For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Notes

   Because the algorithm takes old_value and new_value by reference, it can have
   unexpected behavior if either is a reference to an element of the range
   [first, last).

             Feature-test macro           Value    Std              Feature
   __cpp_lib_algorithm_default_value_type 202403 (C++26) List-initialization for
                                                         algorithms (1-4)

.SH Possible implementation

                                   replace
   template<class ForwardIt,
            class T = typename std::iterator_traits<ForwardIt>::value_type>
   void replace(ForwardIt first, ForwardIt last,
                const T& old_value, const T& new_value)
   {
       for (; first != last; ++first)
           if (*first == old_value)
               *first = new_value;
   }
                                  replace_if
   template<class ForwardIt, class UnaryPred,
            class T = typename std::iterator_traits<ForwardIt>::value_type>
   void replace_if(ForwardIt first, ForwardIt last,
                   UnaryPred p, const T& new_value)
   {
       for (; first != last; ++first)
           if (p(*first))
               *first = new_value;
   }

.SH Example

   
// Run this code

 #include <algorithm>
 #include <array>
 #include <complex>
 #include <functional>
 #include <iostream>
  
 void println(const auto& seq)
 {
     for (const auto& e : seq)
         std::cout << e << ' ';
     std::cout << '\\n';
 }
  
 int main()
 {
     std::array<int, 10> s{5, 7, 4, 2, 8, 6, 1, 9, 0, 3};
  
     // Replace all occurrences of 8 with 88.
     std::replace(s.begin(), s.end(), 8, 88);
     println(s);
  
     // Replace all values less than 5 with 55.
     std::replace_if(s.begin(), s.end(),
                     std::bind(std::less<int>(), std::placeholders::_1, 5), 55);
     println(s);
  
     std::array<std::complex<double>, 2> nums{{{1, 3}, {1, 3}}};
     #ifdef __cpp_lib_algorithm_default_value_type
         std::replace(nums.begin(), nums.end(), {1, 3}, {4, 2});
     #else
         std::replace(nums.begin(), nums.end(), std::complex<double>{1, 3},
                                                std::complex<double>{4, 2});
     #endif
     println(nums);
 }

.SH Output:

 5 7 4 2 88 6 1 9 0 3
 5 7 55 55 88 6 55 9 55 55
 (4,2), (4,2)

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

     DR    Applied to            Behavior as published               Correct behavior
                      T was required to be CopyAssignable (and
                      EqualityComparable                           required *first =
   LWG 283 C++98      for replace), but the value type of          new_value
                      ForwardIt is not                             to be valid instead
                      always T and T is not always writable to
                      ForwardIt

.SH See also

   replace_copy       copies a range, replacing elements satisfying specific criteria
   replace_copy_if    with another value
                      \fI(function template)\fP 
   ranges::replace    replaces all values satisfying specific criteria with another
   ranges::replace_if value
   (C++20)            (niebloid)
   (C++20)
