.TH std::set::end,std::set::cend 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::set::end,std::set::cend \- std::set::end,std::set::cend

.SH Synopsis
   iterator end();                       \fB(1)\fP (noexcept since C++11)
   const_iterator end() const;           \fB(2)\fP (noexcept since C++11)
   const_iterator cend() const noexcept; \fB(3)\fP \fI(since C++11)\fP

   Returns an iterator to the element following the last element of the set.

   This element acts as a placeholder; attempting to access it results in undefined
   behavior.

   range-begin-end.svg

.SH Parameters

   \fI(none)\fP

.SH Return value

   Iterator to the element following the last element.

.SH Complexity

   Constant.

.SH Notes

   Because both iterator and const_iterator are constant iterators (and may in fact be
   the same type), it is not possible to mutate the elements of the container through
   an iterator returned by any of these member functions.

   libc++ backports cend() to C++98 mode.

.SH Example

   
// Run this code

 #include <algorithm>
 #include <iostream>
 #include <set>
  
 int main()
 {
     std::set<int> set{3, 1, 4, 1, 5, 9, 2, 6, 5};
     std::for_each(set.cbegin(), set.cend(), [](int x)
     {
         std::cout << x << ' ';
     });
     std::cout << '\\n';
 }

.SH Output:

 1 2 3 4 5 6 9

.SH See also

   begin   returns an iterator to the beginning
   cbegin  \fI(public member function)\fP 
   \fI(C++11)\fP
   end
   cend    returns an iterator to the end of a container or array
   \fI(C++11)\fP \fI(function template)\fP 
   \fI(C++14)\fP
