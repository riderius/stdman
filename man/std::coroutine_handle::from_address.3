.TH std::coroutine_handle::from_address 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::coroutine_handle::from_address \- std::coroutine_handle::from_address

.SH Synopsis
   static constexpr coroutine_handle from_address( void *addr );  \fI(since C++20)\fP

   Creates a coroutine_handle from a null pointer value or an underlying address of
   another coroutine_handle. The underlying address of return value is addr.

   The behavior is undefined if addr is neither a null pointer value nor an underlying
   address of a coroutine_handle. The behavior is also undefined if the addr is an
   underlying address of a std::coroutine_handle<P1>, where both Promise and P1 are not
   void, and P1 is different from Promise.

   This function is not declared for specialization
   std::coroutine_handle<std::noop_coroutine_promise>.

.SH Parameters

   addr - underlying address to import

.SH Return value

   A std::coroutine_handle<Promise> whose underlying address is addr.

.SH Notes

   If addr is not a null pointer value, it must be obtained from a prior call to
   address() on a coroutine_handle referring to some coroutine.

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   constructor      constructs a coroutine_handle object
   (C++20)          \fI(public member function)\fP 
   from_promise     creates a coroutine_handle from the promise object of a coroutine
   \fB[static]\fP (C++20) \fI(public static member function)\fP 
   noop_coroutine   creates a coroutine handle that has no observable effects when
   (C++20)          resumed or destroyed
                    \fI(function)\fP 

.SH Category:
     * Todo no example
