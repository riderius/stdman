.TH std::ellint_2,std::ellint_2f,std::ellint_2l 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ellint_2,std::ellint_2f,std::ellint_2l \- std::ellint_2,std::ellint_2f,std::ellint_2l

.SH Synopsis
   Defined in header <cmath>
   float       ellint_2 ( float k, float phi );
                                                                          \fI(since C++17)\fP
   double      ellint_2 ( double k, double phi );                         (until C++23)

   long double ellint_2 ( long double k, long double phi );
   /* floating-point-type */ ellint_2( /* floating-point-type */
   k,                                                                     (since C++23)
                                       /* floating-point-type */
   phi );                                                         \fB(1)\fP
   float       ellint_2f( float k, float phi );                       \fB(2)\fP \fI(since C++17)\fP
   long double ellint_2l( long double k, long double phi );           \fB(3)\fP \fI(since C++17)\fP
   Additional overloads
   Defined in header <cmath>
   template< class Arithmetic1, class Arithmetic2 >

   /* common-floating-point-type */                                   (A) \fI(since C++17)\fP

       ellint_2( Arithmetic1 k, Arithmetic2 phi );

   1-3) Computes the incomplete elliptic integral of the second kind of k and phi.
   The library provides overloads of std::ellint_2 for all cv-unqualified
   floating-point types as the type of the parameters k and phi.
   (since C++23)
   A) Additional overloads are provided for all other combinations of arithmetic types.

.SH Parameters

   k   - elliptic modulus or eccentricity (a floating-point or integer value)
   phi - Jacobi amplitude (a floating-point or integer value, measured in radians)

.SH Return value

   If no errors occur, value of the incomplete elliptic integral of the second kind of
   k and phi, that is ∫phi
   0
   √
   1-k2
   sin2
   θdθ, is returned.

.SH Error handling

   Errors may be reported as specified in math_errhandling:

     * If the argument is NaN, NaN is returned and domain error is not reported
     * If |k|>1, a domain error may occur

.SH Notes

   Implementations that do not support C++17, but support ISO 29124:2010, provide this
   function if __STDCPP_MATH_SPEC_FUNCS__ is defined by the implementation to a value
   at least 201003L and if the user defines __STDCPP_WANT_MATH_SPEC_FUNCS__ before
   including any standard library headers.

   Implementations that do not support ISO 29124:2010 but support TR 19768:2007 (TR1),
   provide this function in the header tr1/cmath and namespace std::tr1.

   An implementation of this function is also available in boost.math.

   The additional overloads are not required to be provided exactly as (A). They only
   need to be sufficient to ensure that for their first argument num1 and second
   argument num2:

     * If num1 or num2 has type long double, then std::ellint2(num1,
       num2) has the same effect as std::ellint2(static_cast<long
       double>(num1),
                    static_cast<long double>(num2)).
     * Otherwise, if num1 and/or num2 has type double or an integer type,
       then std::ellint2(num1, num2) has the same effect as               (until C++23)
       std::ellint2(static_cast<double>(num1),
                    static_cast<double>(num2)).
     * Otherwise, if num1 or num2 has type float, then std::ellint2(num1,
       num2) has the same effect as
       std::ellint2(static_cast<float>(num1),
                    static_cast<float>(num2)).
   If num1 and num2 have arithmetic types, then std::ellint2(num1, num2)
   has the same effect as std::ellint2(static_cast</*
   common-floating-point-type */>(num1),
                static_cast</* common-floating-point-type */>(num2)),
   where /* common-floating-point-type */ is the floating-point type with
   the greatest floating-point conversion rank and greatest
   floating-point conversion subrank between the types of num1 and num2,  (since C++23)
   arguments of integer type are considered to have the same
   floating-point conversion rank as double.

   If no such floating-point type with the greatest rank and subrank
   exists, then overload resolution does not result in a usable candidate
   from the overloads provided.

.SH Example

   
// Run this code

 #include <cmath>
 #include <iostream>
 #include <numbers>
  
 int main()
 {
     const double hpi = std::numbers::pi / 2.0;
  
     std::cout << "E(0,π/2)  = " << std::ellint_2(0, hpi) << '\\n'
               << "E(0,-π/2) = " << std::ellint_2(0, -hpi) << '\\n'
               << "π/2       = " << hpi << '\\n'
               << "E(0.7,0)  = " << std::ellint_2(0.7, 0) << '\\n'
               << "E(1,π/2)  = " << std::ellint_2(1, hpi) << '\\n';
 }

.SH Output:

 E(0,π/2)  = 1.5708
 E(0,-π/2) = -1.5708
 π/2       = 1.5708
 E(0.7,0)  = 0
 E(1,π/2)  = 1

.SH See also

   comp_ellint_2
   comp_ellint_2f
   comp_ellint_2l (complete) elliptic integral of the second kind
   \fI(C++17)\fP        \fI(function)\fP 
   \fI(C++17)\fP
   \fI(C++17)\fP

.SH External links

   Weisstein, Eric W. "Elliptic Integral of the Second Kind." From MathWorld — A
   Wolfram Web Resource.
