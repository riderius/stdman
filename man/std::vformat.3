.TH std::vformat 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::vformat \- std::vformat

.SH Synopsis
   Defined in header <format>
   std::string vformat( std::string_view fmt, std::format_args args   \fB(1)\fP \fI(since C++20)\fP
   );
   std::wstring vformat( std::wstring_view fmt, std::wformat_args     \fB(2)\fP \fI(since C++20)\fP
   args );
   std::string vformat( const std::locale& loc,
                        std::string_view fmt, std::format_args args   \fB(3)\fP \fI(since C++20)\fP
   );
   std::wstring vformat( const std::locale& loc,
                         std::wstring_view fmt, std::wformat_args     \fB(4)\fP \fI(since C++20)\fP
   args );

   Format arguments held by args according to the format string fmt, and return the
   result as a string. If present, loc is used for locale-specific formatting.

.SH Parameters

          an object that represents the format string. The format string consists of
            * ordinary characters (except { and }), which are copied unchanged to the
              output,
            * escape sequences {{ and }}, which are replaced with { and } respectively
              in the output, and
            * replacement fields.

          Each replacement field has the following format:

          { arg-id (optional) }               \fB(1)\fP
          { arg-id (optional) : format-spec } \fB(2)\fP

          1) replacement field without a format specification
          2) replacement field with a format specification

                        specifies the index of the argument in args whose value is to
                        be used for formatting; if it is omitted, the arguments are
          arg-id      - used in order.

                        The arg-idâ€Šs in a format string must all be present or all be
                        omitted. Mixing manual and automatic indexing is an error.
   fmt  -               the format specification defined by the std::formatter
          format-spec - specialization for the corresponding argument. Cannot start
                        with }.

            * For basic types and standard string types, the format specification is
              interpreted as standard format specification.
            * For chrono types, the format specification is interpreted as chrono
              format specification.

            * For range types, the format specification is interpreted as
              range format specification.
            * For std::pair and std::tuple, the format specification is
              interpreted as tuple format specification.                  (since C++23)
            * For std::thread::id and std::stacktrace_entry, see thread
              id format specification and stacktrace entry format
              specification.
            * For std::basic_stacktrace, no format specifier is allowed.

            * For std::filesystem::path, see path format specification.   (since C++26)

            * For other formattable types, the format specification is determined by
              user-defined formatter specializations.
   args - arguments to be formatted
   loc  - std::locale used for locale-specific formatting

.SH Return value

   A string object holding the formatted result.

.SH Exceptions

   Throws std::format_error if fmt is not a valid format string for the provided
   arguments, or std::bad_alloc on allocation failure. Also propagates any exception
   thrown by formatter or iterator operations.

.SH Example

   
// Run this code

 #include <format>
 #include <iostream>
  
 template<typename... Args>
 inline void println(const std::format_string<Args...> fmt, Args&&... args)
 {
     std::cout << std::vformat(fmt.get(), std::make_format_args(args...)) << '\\n';
 }
  
 int main()
 {
     println("{}{} {}{}", "Hello", ',', "C++", -1 + 2 * 3 * 4);
 }

.SH Output:

 Hello, C++23

.SH See also
