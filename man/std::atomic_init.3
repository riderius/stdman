.TH std::atomic_init 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::atomic_init \- std::atomic_init

.SH Synopsis
   Defined in header <atomic>
   template< class T >

   void atomic_init                                               \fI(since C++11)\fP
       ( std::atomic<T>* obj,                                 \fB(1)\fP (deprecated in C++20)

         typename std::atomic<T>::value_type desired )
   noexcept;
   template< class T >

   void atomic_init                                               \fI(since C++11)\fP
       ( volatile std::atomic<T>* obj,                        \fB(2)\fP (deprecated in C++20)

         typename std::atomic<T>::value_type desired )
   noexcept;

   Initializes the default-constructed atomic object obj with the value desired. The
   function is not atomic: concurrent access from another thread, even through an
   atomic operation, is a data race.

   If obj was not default-constructed, or this function is called twice on the same
   obj, the behavior is undefined.

.SH Parameters

   obj     - pointer to an atomic object to initialize
   desired - the value to initialize atomic object with

.SH Return value

   \fI(none)\fP

.SH Notes

   This function is provided for compatibility with C. If the compatibility is not
   required, std::atomic may be initialized through their non-default constructors.

.SH Example

    This section is incomplete
    Reason: no example

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

     DR    Applied to         Behavior as published         Correct behavior
   P0558R1 C++11      exact type match was required because T is only deduced
                      T was deduced from multiple arguments from obj

.SH See also

   ATOMIC_VAR_INIT              constant initialization of an atomic variable of static
   \fI(C++11)\fP(deprecated in C++20) storage duration
                                \fI(function macro)\fP 
   constructor                  constructs an atomic object
                                \fI(public member function of std::atomic<T>)\fP 
   C documentation for
   atomic_init

.SH Category:
     * Todo no example
