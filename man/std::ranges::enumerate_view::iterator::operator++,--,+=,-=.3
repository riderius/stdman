.TH std::ranges::enumerate_view::iterator::operator++,--,+=,-= 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::enumerate_view::iterator::operator++,--,+=,-= \- std::ranges::enumerate_view::iterator::operator++,--,+=,-=

.SH Synopsis
   constexpr /*iterator*/& operator++();                   \fB(1)\fP (since C++23)
   constexpr void operator++( int );                       \fB(2)\fP (since C++23)
   constexpr /*iterator*/ operator++( int )                \fB(3)\fP (since C++23)
     requires ranges::forward_range<Base>;
   constexpr /*iterator*/& operator--()                    \fB(4)\fP (since C++23)
     requires ranges::bidirectional_range<Base>;
   constexpr /*iterator*/ operator--( int )                \fB(5)\fP (since C++23)
     requires ranges::bidirectional_range<Base>;
   constexpr /*iterator*/& operator+=( difference_type n ) \fB(6)\fP (since C++23)
     requires ranges::random_access_range<Base>;
   constexpr /*iterator*/& operator-=( difference_type n ) \fB(7)\fP (since C++23)
     requires ranges::random_access_range<Base>;

   Increments or decrements the iterator.

   Let current_ be the underlying iterator and pos_ be the underlying index.

   1) Equivalent to ++current_; ++pos_; return *this;
   2) Equivalent to ++current_;
   3) Equivalent to auto tmp = *this; ++*this; return tmp;
   4) Equivalent to --current_; --pos_; return *this;
   5) Equivalent to auto tmp = *this; --*this; return tmp;
   6) Equivalent to current_ += n; pos_ += n; return *this;
   7) Equivalent to current_ -= n; pos_ -= n; return *this;

.SH Parameters

   n - position relative to current location

.SH Return value

   1,4,6,7) *this
   2) \fI(none)\fP
   3,5) a copy of *this that was made before the change

.SH See also

   operator+ performs iterator arithmetic
   operator- \fI(function)\fP
   (C++23)
