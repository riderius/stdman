.TH std::strtol,std::strtoll 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::strtol,std::strtoll \- std::strtol,std::strtoll

.SH Synopsis
   Defined in header <cstdlib>
   long      strtol( const char* str, char** str_end, int base );  \fB(1)\fP
   long long strtoll( const char* str, char** str_end, int base ); \fB(2)\fP \fI(since C++11)\fP

   Interprets an integer value in a byte string pointed to by str.

   Discards any whitespace characters (as identified by calling std::isspace) until the
   first non-whitespace character is found, then takes as many characters as possible
   to form a valid base-n (where n=base) integer number representation and converts
   them to an integer value. The valid integer value consists of the following parts:

     * (optional) plus or minus sign
     * (optional) prefix \fB(0)\fP indicating octal base (applies only when the base is 8 or
       0)
     * (optional) prefix (0x or 0X) indicating hexadecimal base (applies only when the
       base is 16 or 0)
     * a sequence of digits

   The set of valid values for base is {0,2,3,...,36}. The set of valid digits for
   base-2 integers is {0,1}, for base-3 integers is {0,1,2}, and so on. For bases
   larger than 10, valid digits include alphabetic characters, starting from Aa for
   base-11 integer, to Zz for base-36 integer. The case of the characters is ignored.

   Additional numeric formats may be accepted by the currently installed C locale.

   If the value of base is 0, the numeric base is auto-detected: if the prefix is 0,
   the base is octal, if the prefix is 0x or 0X, the base is hexadecimal, otherwise the
   base is decimal.

   If the minus sign was part of the input sequence, the numeric value calculated from
   the sequence of digits is negated as if by unary minus in the result type.

   The function sets the pointer pointed to by str_end to point to the character past
   the last character interpreted. If str_end is a null pointer, it is ignored.

   If the str is empty or does not have the expected form, no conversion is performed,
   and (if str_end is not a null pointer) the value of str is stored in the object
   pointed to by str_end.

.SH Parameters

   str     - pointer to the null-terminated byte string to be interpreted
   str_end - pointer to a pointer to character
   base    - base of the interpreted integer value

.SH Return value

     * If successful, an integer value corresponding to the contents of str is
       returned.
     * If the converted value falls out of range of corresponding return type, a range
       error occurs (setting errno to ERANGE) and LONG_MAX, LONG_MIN, LLONG_MAX or
       LLONG_MIN is returned.
     * If no conversion can be performed, 0 is returned.

.SH Example

   
// Run this code

 #include <cerrno>
 #include <cstdlib>
 #include <iomanip>
 #include <iostream>
 #include <string>
  
 int main()
 {
     const char* p = "10 200000000000000000000000000000 30 -40";
     std::cout << "Parsing " << std::quoted(p) << ":\\n";
  
     for (;;)
     {
         // errno can be set to any non-zero value by a library function call
         // regardless of whether there was an error, so it needs to be cleared
         // in order to check the error set by strtol
         errno = 0;
         char* p_end{};
         const long i = std::strtol(p, &p_end, 10);
         if (p == p_end)
             break;
  
         const bool range_error = errno == ERANGE;
         const std::string extracted(p, p_end - p);
         p = p_end;
  
         std::cout << "Extracted " << std::quoted(extracted)
                   << ", strtol returned " << i << '.';
         if (range_error)
             std::cout << "\\n  Range error occurred.";
  
         std::cout << '\\n';
     }
 }

.SH Possible output:

 Parsing "10 200000000000000000000000000000 30 -40":
 Extracted "10", strtol returned 10.
 Extracted " 200000000000000000000000000000", strtol returned 9223372036854775807.
   Range error occurred.
 Extracted " 30", strtol returned 30.
 Extracted " -40", strtol returned -40.

.SH See also

   stoi
   stol
   stoll      converts a string to a signed integer
   \fI(C++11)\fP    \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   strtoul    converts a byte string to an unsigned integer value
   strtoull   \fI(function)\fP 
   \fI(C++11)\fP
   strtoimax
   strtoumax  converts a byte string to std::intmax_t or std::uintmax_t
   \fI(C++11)\fP    \fI(function)\fP 
   \fI(C++11)\fP
   wcstol     converts a wide string to an integer value
   wcstoll    \fI(function)\fP 
   strtof     converts a byte string to a floating-point value
   strtod     \fI(function)\fP 
   strtold
   from_chars converts a character sequence to an integer or floating-point value
   \fI(C++17)\fP    \fI(function)\fP 
   atoi
   atol       converts a byte string to an integer value
   atoll      \fI(function)\fP 
   \fI(C++11)\fP
   C documentation for
   strtol,
   strtoll
