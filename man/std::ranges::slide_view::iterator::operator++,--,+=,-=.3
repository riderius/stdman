.TH std::ranges::slide_view::iterator::operator++,--,+=,-= 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::slide_view::iterator::operator++,--,+=,-= \- std::ranges::slide_view::iterator::operator++,--,+=,-=

.SH Synopsis
   constexpr /*iterator*/& operator++();                   \fB(1)\fP (since C++23)
   constexpr /*iterator*/ operator++( int );               \fB(2)\fP (since C++23)
   constexpr /*iterator*/& operator--()                    \fB(3)\fP (since C++23)
       requires ranges::bidirectional_range<Base>;
   constexpr /*iterator*/ operator--( int )                \fB(4)\fP (since C++23)
       requires ranges::bidirectional_range<Base>;
   constexpr /*iterator*/& operator+=( difference_type n ) \fB(5)\fP (since C++23)
       requires ranges::random_access_range<Base>;
   constexpr /*iterator*/& operator-=( difference_type n ) \fB(6)\fP (since C++23)
       requires ranges::random_access_range<Base>;

   Advances or decrements the iterator.

   Let current_ and last_ele_ be the underlying iterators to the begin and end of the
   sliding window.

   1) Equivalent to:

 current_ = ranges::next(current_);
 last_ele_ = ranges::next(last_ele_); // if last_ele_ is present
 return *this;

   Before the invocation, the current_ and last_ele_ (if present) must be
   incrementable.
   2) Equivalent to: auto tmp = *this; ++*this; return tmp;
   3) Equivalent to:

 current_ = ranges::prev(current_);
 last_ele_ = ranges::prev(last_ele_); // if last_ele_ is present
 return *this;

   Before the invocation, the current_ and last_ele_ (if present) must be
   decrementable.
   4) Equivalent to: auto tmp = *this; --*this; return tmp;
   5) Equivalent to:

 current_ = current_ + n;
 last_ele_ = last_ele_ + n; // if last_ele_ is present
 return *this;

   Before the invocation, the expressions current_ + n and last_ele_ + n (if last_ele_
   is present) must have well-defined behavior.
   6) Equivalent to:

 current_ = current_ - n;
 last_ele_ = last_ele_ - n; // if last_ele_ is present
 return *this;

   Before the invocation, the expressions current_ - n and last_ele_ - n (if last_ele_
   is present) must have well-defined behavior.

.SH Parameters

   n - position relative to current location

.SH Return value

   1,3,5,6) *this
   2,4) a copy of *this that was made before the change

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   operator+ performs iterator arithmetic
   operator- \fI(function)\fP
   (C++23)

.SH Category:
     * Todo no example
