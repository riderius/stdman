.TH std::is_convertible,std::is_nothrow_convertible 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_convertible,std::is_nothrow_convertible \- std::is_convertible,std::is_nothrow_convertible

.SH Synopsis
   Defined in header <type_traits>
   template< class From, class To > \fB(1)\fP \fI(since C++11)\fP
   struct is_convertible;
   template< class From, class To > \fB(2)\fP \fI(since C++20)\fP
   struct is_nothrow_convertible;

   1) If the imaginary function definition To test() { return std::declval<From>(); }
   is well-formed, (that is, either std::declval<From>() can be converted to To using
   implicit conversions, or both From and To are possibly cv-qualified void), provides
   the member constant value equal to true. Otherwise value is false. For the purposes
   of this check, the use of std::declval in the return statement is not considered an
   ODR-use.

   If To is a reference type and a temporary object would be created when
   binding std::declval<From>() to To, the return statement in the        (since C++26)
   imaginary function is considered well-formed, even though such binding
   is ill-formed in an actual function.

   Access checks are performed as if from a context unrelated to either type. Only the
   validity of the immediate context of the expression in the return statement
   (including conversions to the return type) is considered.
   2) Same as \fB(1)\fP, but the conversion is also noexcept.

   If From or To is not a complete type, (possibly cv-qualified) void, or an array of
   unknown bound, the behavior is undefined.

   If an instantiation of a template above depends, directly or indirectly, on an
   incomplete type, and that instantiation could yield a different result if that type
   were hypothetically completed, the behavior is undefined.

   If the program adds specializations for any of the templates described on this page,
   the behavior is undefined.

.SH Member constants

   value    true if From is convertible to To, false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Possible implementation

                                    is_convertible \fB(1)\fP
namespace detail
{
    template<class T>
    auto test_returnable(int) -> decltype(
        void(static_cast<T(*)()>(nullptr)), std::true_type{}
    );
    template<class>
    auto test_returnable(...) -> std::false_type;
 
    template<class From, class To>
    auto test_implicitly_convertible(int) -> decltype(
        void(std::declval<void(&)(To)>()(std::declval<From>())), std::true_type{}
    );
    template<class, class>
    auto test_implicitly_convertible(...) -> std::false_type;
} // namespace detail
 
template<class From, class To>
struct is_convertible : std::integral_constant<bool,
    (decltype(detail::test_returnable<To>\fB(0)\fP)::value &&
     decltype(detail::test_implicitly_convertible<From, To>\fB(0)\fP)::value) ||
    (std::is_void<From>::value && std::is_void<To>::value)
> {};
                                is_nothrow_convertible \fB(2)\fP
template<class From, class To>
struct is_nothrow_convertible : std::conjunction<std::is_void<From>, std::is_void<To>> {};
 
template<class From, class To>
    requires
        requires
        {
            static_cast<To(*)()>(nullptr);
            { std::declval<void(&)(To) noexcept>()(std::declval<From>()) } noexcept;
        }
struct is_nothrow_convertible<From, To> : std::true_type {};

.SH Notes

   Gives well-defined results for reference types, void types, array types, and
   function types.

   Currently the standard has not specified whether the destruction of the object
   produced by the conversion (either a result object or a temporary bound to a
   reference) is considered as a part of the conversion. This is LWG issue 3400.

   All known implementations treat the destruction as a part of the conversion, as
   proposed in P0758R1.

          Feature-test macro         Value    Std             Feature
   __cpp_lib_is_nothrow_convertible 201806L (C++20) std::is_nothrow_convertible

.SH Example

   
// Run this code

 #include <iomanip>
 #include <iostream>
 #include <string>
 #include <string_view>
 #include <type_traits>
  
 class E { public: template<class T> E(T&&) {} };
  
 int main()
 {
     class A {};
     class B : public A {};
     class C {};
     class D { public: operator C() { return c; } C c; };
  
     static_assert(std::is_convertible_v<B*, A*>);
     static_assert(!std::is_convertible_v<A*, B*>);
     static_assert(std::is_convertible_v<D, C>);
     static_assert(!std::is_convertible_v<B*, C*>);
     // Note that the Perfect Forwarding constructor makes the class E be
     // "convertible" from everything. So, A is replaceable by B, C, D..:
     static_assert(std::is_convertible_v<A, E>);
  
     static_assert(!std::is_convertible_v<std::string_view, std::string>);
     static_assert(std::is_convertible_v<std::string, std::string_view>);
  
     auto stringify = []<typename T>(T x)
     {
         if constexpr (std::is_convertible_v<T, std::string> or
                       std::is_convertible_v<T, std::string_view>)
             return x;
         else
             return std::to_string(x);
     };
  
     using std::operator "" s, std::operator "" sv;
     const char* three = "three";
  
     std::cout << std::quoted(stringify("one"s)) << ' '
               << std::quoted(stringify("two"sv)) << ' '
               << std::quoted(stringify(three)) << ' '
               << std::quoted(stringify(42)) << ' '
               << std::quoted(stringify(42.0)) << '\\n';
 }

.SH Output:

 "one" "two" "three" "42" "42.000000"

.SH See also

   is_base_of                             checks if a type is derived from the other
   \fI(C++11)\fP                                type
                                          \fI(class template)\fP 
                                          checks if a type is a
   is_pointer_interconvertible_base_of    pointer-interconvertible (initial) base of
   (C++20)                                another type
                                          \fI(class template)\fP 
                                          checks if objects of a type are
   is_pointer_interconvertible_with_class pointer-interconvertible with the specified
   (C++20)                                subobject of that type
                                          \fI(function template)\fP 
   convertible_to                         specifies that a type is implicitly
   (C++20)                                convertible to another type
                                          (concept) 
