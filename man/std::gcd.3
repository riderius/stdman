.TH std::gcd 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::gcd \- std::gcd

.SH Synopsis
   Defined in header <numeric>
   template< class M, class N >                         \fI(since C++17)\fP
   constexpr std::common_type_t<M, N> gcd( M m, N n );

   Computes the greatest common divisor of the integers m and n.

   If either M or N is not an integer type, or if either is (possibly cv-qualified)
   bool, the program is ill-formed.

   If either |m| or |n| is not representable as a value of type std::common_type_t<M,
   N>, the behavior is undefined.

.SH Parameters

   m, n - integer values

.SH Return value

   If both m and n are zero, returns zero. Otherwise, returns the greatest common
   divisor of |m| and |n|.

.SH Exceptions

   Throws no exceptions.

.SH Notes

   Feature-test macro  Value    Std        Feature
   __cpp_lib_gcd_lcm  201606L \fI(C++17)\fP std::gcd, std::lcm

.SH Example

   
// Run this code

 #include <numeric>
  
 int main()
 {
     constexpr int p{2 * 2 * 3};
     constexpr int q{2 * 3 * 3};
     static_assert(2 * 3 == std::gcd(p, q));
  
     static_assert(std::gcd( 6,  10) == 2);
     static_assert(std::gcd( 6, -10) == 2);
     static_assert(std::gcd(-6, -10) == 2);
  
     static_assert(std::gcd( 24, 0) == 24);
     static_assert(std::gcd(-24, 0) == 24);
 }

.SH See also

   lcm     computes the least common multiple of two integers
   \fI(C++17)\fP \fI(function template)\fP 
