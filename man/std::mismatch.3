.TH std::mismatch 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::mismatch \- std::mismatch

.SH Synopsis
   Defined in header <algorithm>
   template< class InputIt1, class InputIt2 >

   std::pair<InputIt1, InputIt2>                            \fB(1)\fP (constexpr since C++20)
       mismatch( InputIt1 first1, InputIt1 last1,

                 InputIt2 first2 );
   template< class ExecutionPolicy, class ForwardIt1, class
   ForwardIt2 >

   std::pair<ForwardIt1, ForwardIt2>                        \fB(2)\fP \fI(since C++17)\fP
       mismatch( ExecutionPolicy&& policy,
                 ForwardIt1 first1, ForwardIt1 last1,

                 ForwardIt2 first2 );
   template< class InputIt1, class InputIt2, class
   BinaryPred >

   std::pair<InputIt1, InputIt2>                            \fB(3)\fP (constexpr since C++20)
       mismatch( InputIt1 first1, InputIt1 last1,

                 InputIt2 first2, BinaryPred p );
   template< class ExecutionPolicy,

             class ForwardIt1, class ForwardIt2, class
   BinaryPred >
   std::pair<ForwardIt1, ForwardIt2>                        \fB(4)\fP \fI(since C++17)\fP
       mismatch( ExecutionPolicy&& policy,
                 ForwardIt1 first1, ForwardIt1 last1,

                 ForwardIt2 first2, BinaryPred p );
   template< class InputIt1, class InputIt2 >

   std::pair<InputIt1, InputIt2>                            \fB(5)\fP \fI(since C++14)\fP
       mismatch( InputIt1 first1, InputIt1 last1,               (constexpr since C++20)

                 InputIt2 first2, InputIt2 last2 );
   template< class ExecutionPolicy, class ForwardIt1, class
   ForwardIt2 >

   std::pair<ForwardIt1, ForwardIt2>                        \fB(6)\fP \fI(since C++17)\fP
       mismatch( ExecutionPolicy&& policy,
                 ForwardIt1 first1, ForwardIt1 last1,

                 ForwardIt2 first2, ForwardIt2 last2 );
   template< class InputIt1, class InputIt2, class
   BinaryPred >

   std::pair<InputIt1, InputIt2>                            \fB(7)\fP \fI(since C++14)\fP
       mismatch( InputIt1 first1, InputIt1 last1,               (constexpr since C++20)

                 InputIt2 first2, InputIt2 last2,
   BinaryPred p );
   template< class ExecutionPolicy,

             class ForwardIt1, class ForwardIt2, class
   BinaryPred >
   std::pair<ForwardIt1, ForwardIt2>                        \fB(8)\fP \fI(since C++17)\fP
       mismatch( ExecutionPolicy&& policy,
                 ForwardIt1 first1, ForwardIt1 last1,

                 ForwardIt2 first2, ForwardIt2 last2,
   BinaryPred p );

   Returns a pair of iterators to the first mismatching of elements from
   [first1, last1) and a range starting from first2:

     * For overloads (1-4), the second range has std::distance(first1, last1) elements.
     * For overloads (5-8), the second range is [first2, last2).

     * If std::distance(first1, last1) and std::distance(first2, last2) are different,
       the comparison stops when last1 or last2 is reached.
   1,5) Elements are compared using operator==.
   3,7) Elements are compared using the given binary predicate p.
   2,4,6,8) Same as (1,3,5,7), but executed according to policy.
   These overloads participate in overload resolution only if

   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true.        (until
                                                                             C++20)
   std::is_execution_policy_v<std::remove_cvref_t<ExecutionPolicy>> is true. (since
                                                                             C++20)

.SH Parameters

   first1, last1 - the first range of the elements
   first2, last2 - the second range of the elements
   policy        - the execution policy to use. See execution policy for details.
                   binary predicate which returns true if the elements should be
                   treated as equal.

                   The signature of the predicate function should be equivalent to the
                   following:

                    bool pred(const Type1 &a, const Type2 &b);

   p             - While the signature does not need to have const &, the function must
                   not modify the objects passed to it and must be able to accept all
                   values of type (possibly const) Type1 and Type2 regardless of value
                   category (thus, Type1 & is not allowed
                   , nor is Type1 unless for Type1 a move is equivalent to a copy
                   \fI(since C++11)\fP).
                   The types Type1 and Type2 must be such that objects of types
                   InputIt1 and InputIt2 can be dereferenced and then implicitly
                   converted to Type1 and Type2 respectively.
.SH Type requirements
   -
   InputIt1 must meet the requirements of LegacyInputIterator.
   -
   InputIt2 must meet the requirements of LegacyInputIterator.
   -
   ForwardIt1 must meet the requirements of LegacyForwardIterator.
   -
   ForwardIt2 must meet the requirements of LegacyForwardIterator.
   -
   BinaryPred must meet the requirements of BinaryPredicate.

.SH Return value

   std::pair with iterators to the first two non-equal elements.

   If last1 is reached, the second iterator in the pair is the std::distance(first1,
   last1)
   th iterator after first2.

   For overloads (5-8), if last2 is reached, the first iterator in the pair is the
   std::distance(first2, last2)
   th iterator after first1.

.SH Complexity

   Given \\(\\scriptsize N_1\\)N
   1 as std::distance(first1, last1) and \\(\\scriptsize N_2\\)N
   2 as std::distance(first2, last2):

   1,2) At most \\(\\scriptsize N_1\\)N
   1 comparisons using operator==.
   3,4) At most \\(\\scriptsize N_1\\)N
   1 applications of the predicate p.
   5,6) At most \\(\\scriptsize \\min(N_1,N_2)\\)min(N
   1,N
   2) comparisons using operator==.
   7,8) At most \\(\\scriptsize \\min(N_1,N_2)\\)min(N
   1,N
   2) applications of the predicate p.

.SH Exceptions

   The overloads with a template parameter named ExecutionPolicy report errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the standard policies, std::terminate is called.
       For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Possible implementation

                                    mismatch \fB(1)\fP
   template<class InputIt1, class InputIt2>
   std::pair<InputIt1, InputIt2>
       mismatch(InputIt1 first1, InputIt1 last1, InputIt2 first2)
   {
       while (first1 != last1 && *first1 == *first2)
           ++first1, ++first2;
    
       return std::make_pair(first1, first2);
   }
                                    mismatch \fB(3)\fP
   template<class InputIt1, class InputIt2, class BinaryPred>
   std::pair<InputIt1, InputIt2>
       mismatch(InputIt1 first1, InputIt1 last1, InputIt2 first2, BinaryPred p)
   {
       while (first1 != last1 && p(*first1, *first2))
           ++first1, ++first2;
    
       return std::make_pair(first1, first2);
   }
                                    mismatch \fB(5)\fP
   template<class InputIt1, class InputIt2>
   std::pair<InputIt1, InputIt2>
       mismatch(InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2)
   {
       while (first1 != last1 && first2 != last2 && *first1 == *first2)
           ++first1, ++first2;
    
       return std::make_pair(first1, first2);
   }
                                    mismatch \fB(7)\fP
   template<class InputIt1, class InputIt2, class BinaryPred>
   std::pair<InputIt1, InputIt2>
       mismatch(InputIt1 first1, InputIt1 last1,
                InputIt2 first2, InputIt2 last2, BinaryPred p)
   {
       while (first1 != last1 && first2 != last2 && p(*first1, *first2))
           ++first1, ++first2;
    
       return std::make_pair(first1, first2);
   }

.SH Example

   This program determines the longest substring that is simultaneously found at the
   very beginning of the given string and at the very end of it, in reverse order
   (possibly overlapping).

   
// Run this code

 #include <algorithm>
 #include <iostream>
 #include <string>
  
 std::string mirror_ends(const std::string& in)
 {
     return std::string(in.begin(),
                        std::mismatch(in.begin(), in.end(), in.rbegin()).first);
 }
  
 int main()
 {
     std::cout << mirror_ends("abXYZba") << '\\n'
               << mirror_ends("abca") << '\\n'
               << mirror_ends("aba") << '\\n';
 }

.SH Output:

 ab
 a
 aba

.SH See also

   equal                   determines if two sets of elements are the same
                           \fI(function template)\fP 
   find
   find_if                 finds the first element satisfying specific criteria
   find_if_not             \fI(function template)\fP 
   \fI(C++11)\fP
                           returns true if one range is lexicographically less than
   lexicographical_compare another
                           \fI(function template)\fP 
   search                  searches for a range of elements
                           \fI(function template)\fP 
   ranges::mismatch        finds the first position where two ranges differ
   (C++20)                 (niebloid)
