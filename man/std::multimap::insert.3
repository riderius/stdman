.TH std::multimap::insert 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::multimap::insert \- std::multimap::insert

.SH Synopsis
   iterator insert( const value_type& value );          \fB(1)\fP
   iterator insert( value_type&& value );               \fB(2)\fP \fI(since C++17)\fP
   template< class P >                                  \fB(3)\fP \fI(since C++11)\fP
   iterator insert( P&& value );
   iterator insert( iterator pos, const value_type&                       \fI(until C++11)\fP
   value );
   iterator insert( const_iterator pos, const                             \fI(since C++11)\fP
   value_type& value );
   iterator insert( const_iterator pos, value_type&&        \fB(5)\fP           \fI(since C++17)\fP
   value );
   template< class P >                                      \fB(6)\fP           \fI(since C++11)\fP
   iterator insert( const_iterator pos, P&& value );    \fB(4)\fP
   template< class InputIt >                                \fB(7)\fP
   void insert( InputIt first, InputIt last );
   void insert( std::initializer_list<value_type> ilist     \fB(8)\fP           \fI(since C++11)\fP
   );
   iterator insert( node_type&& nh );                       \fB(9)\fP           \fI(since C++17)\fP
   iterator insert( const_iterator pos, node_type&& nh      \fB(10)\fP          \fI(since C++17)\fP
   );

   Inserts element(s) into the container.

   1-3) Inserts value. If the container has elements with equivalent key, inserts at
   the upper bound of that range.
   Overload \fB(3)\fP is equivalent to emplace(std::forward<P>(value)) and only participates
   in overload resolution if std::is_constructible<value_type, P&&>::value == true.
   4-6) Inserts value in the position as close as possible to the position just prior
   to pos.
   Overload \fB(6)\fP is equivalent to emplace_hint(hint, std::forward<P>(value)) and only
   participates in overload resolution if std::is_constructible<value_type, P&&>::value
   == true.
   7) Inserts elements from range [first, last).
   8) Inserts elements from initializer list ilist.
   9) If nh is an empty node handle, does nothing. Otherwise, inserts the element owned
   by nh into the container and returns an iterator pointing at the inserted element.
   If a range containing elements with keys equivalent to nh.key() exists in the
   container, the element is inserted at the end of that range. The behavior is
   undefined if nh is not empty and get_allocator() != nh.get_allocator().
   10) If nh is an empty node handle, does nothing and returns the end iterator.
   Otherwise, inserts the element owned by nh into the container, and returns the
   iterator pointing to the element with key equivalent to nh.key(). The element is
   inserted as close as possible to the position just prior to pos. The behavior is
   undefined if nh is not empty and get_allocator() != nh.get_allocator().

   No iterators or references are invalidated.
   If the insertion is successful, pointers and references to the element obtained
   while it is held in the node handle are invalidated, and pointers and references
   obtained to that element before it was extracted become valid.
   \fI(since C++17)\fP

.SH Parameters

   pos         - iterator to the position before which the new element will be inserted
   value       - element value to insert
   first, last - range of elements to insert
   ilist       - initializer list to insert the values from
   nh          - a compatible node handle
.SH Type requirements
   -
   InputIt must meet the requirements of LegacyInputIterator.

.SH Return value

   1-6) An iterator to the inserted element.
   7,8) \fI(none)\fP
   9,10) End iterator if nh was empty, iterator pointing to the inserted element
   otherwise.

.SH Exceptions

   1-6) If an exception is thrown by any operation, the insertion has no effect.
   7,8) No exception safety guarantee.
   9,10) If an exception is thrown by any operation, the insertion has no effect.

.SH Complexity

   1-3) O(log(size()))
   4-6) Amortized constant if the insertion happens in the position just before pos,
   O(log(size())) otherwise.
   7,8) O(N·log(size() + N)), where N is the number of elements to insert.
   9) O(log(size()))
   10) Amortized constant if the insertion happens in the position just before pos,
   O(log(size())) otherwise.

.SH Example

   
// Run this code

 #include <functional>
 #include <iostream>
 #include <map>
 #include <string>
 #include <string_view>
 #include <utility>
  
 template<class M>
 void print(const std::string_view rem, const M& mmap)
 {
     std::cout << rem << ' ';
     for (const auto& e : mmap)
         std::cout << '{' << e.first << ',' << e.second << "} ";
     std::cout << '\\n';
 }
  
 int main()
 {
     // list-initialize
     std::multimap<int, std::string, std::greater<int>> mmap
         {{2, "foo"}, {2, "bar"}, {3, "baz"}, {1, "abc"}, {5, "def"}};
     print("#1", mmap);
  
     // insert using value_type
     mmap.insert(decltype(mmap)::value_type(5, "pqr"));
     print("#2", mmap);
  
     // insert using pair
     mmap.insert(std::pair{6, "uvw"});
     print("#3", mmap);
  
     mmap.insert({7, "xyz"});
     print("#4", mmap);
  
     // insert using initializer_list
     mmap.insert({{5, "one"}, {5, "two"}});
     print("#5", mmap);
  
     // insert using a pair of iterators
     mmap.clear();
     const auto il = {std::pair{1, "ä"}, {2, "ё"}, {2, "ö"}, {3, "ü"}};
     mmap.insert(il.begin(), il.end());
     print("#6", mmap);
 }

.SH Output:

 #1 {5,def} {3,baz} {2,foo} {2,bar} {1,abc}
 #2 {5,def} {5,pqr} {3,baz} {2,foo} {2,bar} {1,abc}
 #3 {6,uvw} {5,def} {5,pqr} {3,baz} {2,foo} {2,bar} {1,abc}
 #4 {7,xyz} {6,uvw} {5,def} {5,pqr} {3,baz} {2,foo} {2,bar} {1,abc}
 #5 {7,xyz} {6,uvw} {5,def} {5,pqr} {5,one} {5,two} {3,baz} {2,foo} {2,bar} {1,abc}
 #6 {3,ü} {2,ё} {2,ö} {1,ä}

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to         Behavior as published              Correct behavior
                                                             the insertion is required
                       pos was just a hint, it could be      to
   LWG 233  C++98      totally ignored                       be as close as possible to
                                                             the
                                                             position just prior to pos
                       the complexity of overload \fB(5)\fP was    removed the linear
   LWG 264  C++98      required to be linear if              requirement
                       the range [first, last) is sorted     in this special case
                       according to Compare
   LWG 371  C++98      the order of equivalent elements      required to be preserved
                       was not guaranteed to be preserved
   LWG 2005 C++11      overloads (3,6) were poorly described improved the description

.SH See also

   emplace      constructs element in-place
   \fI(C++11)\fP      \fI(public member function)\fP 
   emplace_hint constructs elements in-place using a hint
   \fI(C++11)\fP      \fI(public member function)\fP 
   inserter     creates a std::insert_iterator of type inferred from the argument
                \fI(function template)\fP 
