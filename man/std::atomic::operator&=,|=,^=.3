.TH std::atomic::operator&=,|=,^= 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::atomic::operator&=,|=,^= \- std::atomic::operator&=,|=,^=

.SH Synopsis
   member only of atomic<Integralâ€Š> specializations
   T operator&=( T arg ) noexcept;                   \fB(1)\fP \fI(since C++11)\fP
   T operator&=( T arg ) volatile noexcept;          \fB(2)\fP \fI(since C++11)\fP
   T operator|=( T arg ) noexcept;                   \fB(3)\fP \fI(since C++11)\fP
   T operator|=( T arg ) volatile noexcept;          \fB(4)\fP \fI(since C++11)\fP
   T operator^=( T arg ) noexcept;                   \fB(5)\fP \fI(since C++11)\fP
   T operator^=( T arg ) volatile noexcept;          \fB(6)\fP \fI(since C++11)\fP

   Atomically replaces the current value with the result of computation involving the
   previous value and arg. The operation is read-modify-write operation.

     * operator&= performs atomic bitwise and. Equivalent to return fetch_and(arg) &
       arg;.
     * operator|= performs atomic bitwise or. Equivalent to return fetch_or(arg) |
       arg;.
     * operator^= performs atomic bitwise exclusive or. Equivalent to return
       fetch_xor(arg) ^ arg;.

   It is deprecated if std::atomic<T>::is_always_lock_free is false and   \fI(since C++20)\fP
   any volatile overload participates in overload resolution.

.SH Parameters

   arg - the argument for the arithmetic operation

.SH Return value

   The resulting value (that is, the result of applying the corresponding binary
   operator to the value immediately preceding the effects of the corresponding member
   function in the modification order of *this).

.SH Notes

   Unlike most compound assignment operators, the compound assignment operators for
   atomic types do not return a reference to their left-hand arguments. They return a
   copy of the stored value instead.

.SH See also

                   atomically performs bitwise AND between the argument and the value
   fetch_and       of the atomic object and obtains the value held previously
                   \fI(public member function)\fP 
                   atomically performs bitwise OR between the argument and the value of
   fetch_or        the atomic object and obtains the value held previously
                   \fI(public member function)\fP 
                   atomically performs bitwise XOR between the argument and the value
   fetch_xor       of the atomic object and obtains the value held previously
                   \fI(public member function)\fP 
   operator++
   operator++(int) increments or decrements the atomic value by one
   operator--      \fI(public member function)\fP 
   operator--(int)
   operator+=      adds to or subtracts from the atomic value
   operator-=      \fI(public member function)\fP 
