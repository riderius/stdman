.TH std::ranges::take_view::end 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::take_view::end \- std::ranges::take_view::end

.SH Synopsis
   constexpr auto end() requires (!__SimpleView<V>);           \fB(1)\fP \fI(since C++20)\fP
   constexpr auto end() const requires ranges::range<const V>; \fB(2)\fP \fI(since C++20)\fP

   Returns a sentinel or an iterator representing the end of the take_view. The end of
   the take_view is either one past the count-th element in the underlying range, or
   the end of the underlying range if the latter has less than count elements.

   1) Returns a take_view::/*sentinel*/<false>, a std::default_sentinel_t, or a
   ranges::iterator_t<V>.
   2) Returns a take_view::/*sentinel*/<true>, a std::default_sentinel_t, or a
   ranges::iterator_t<const V>.

   Overload \fB(1)\fP does not participate in overload resolution if V is a simple view (that
   is, if V and const V are views with the same iterator and sentinel types).

.SH Parameters

   \fI(none)\fP

.SH Return value

   The result depends on the concepts satisfied by possibly const-qualified underlying
   view type Base_, that is V (for overload \fB(1)\fP) or const V (for overload \fB(2)\fP).

   Let base_ be the underlying view.

   The underlying                           random_access_range
   view satisfies
         ...                             yes                                no
                   ranges::begin(base_) +
               yes                                                 std::default_sentinel
   sized_range     ranges::range_difference_t<Base_>(this->size())
               no  1) /*sentinel*/<false>{ranges::end(base_)}
                   2) /*sentinel*/<true>{ranges::end(base_)}

.SH Example

   
// Run this code

 #include <iostream>
 #include <iterator>
 #include <list>
 #include <ranges>
 #include <type_traits>
  
 int main()
 {
     const auto list1 = {3, 1, 4, 1, 5};
     const auto seq1 = list1 | std::views::take(4);
     static_assert(std::ranges::sized_range<decltype(seq1)> &&
                   std::ranges::random_access_range<decltype(seq1)> &&
                   std::is_same_v<decltype(seq1.end()), decltype(list1.end())>);
     for (auto it = seq1.begin(); it != seq1.end(); ++it)
         std::cout << *it << ' ';
     std::cout << '\\n';
  
     std::list list2 = {2, 7, 1, 8, 2};
     const auto seq2 = list2 | std::views::take(4);
     static_assert(std::ranges::sized_range<decltype(seq2)> &&
                   not std::ranges::random_access_range<decltype(seq2)> &&
                   std::is_same_v<decltype(seq2.end()), std::default_sentinel_t>);
     for (auto it = seq2.begin(); it != std::default_sentinel; ++it)
         std::cout << *it << ' ';
     std::cout << '\\n';
 }

.SH Output:

 3 1 4 1
 2 7 1 8

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

     DR    Applied to              Behavior as published               Correct behavior
   P2393R1 C++20      implicit conversions between signed and unsigned made explicit
                      integer-class types might fail

.SH See also

   begin            returns an iterator to the beginning
   (C++20)          \fI(public member function)\fP 
   counted_iterator iterator adaptor that tracks the distance to the end of the range
   (C++20)          \fI(class template)\fP 
   operator==       compares a sentinel with an iterator returned from take_view::begin
   (C++20)          \fI(function)\fP 
