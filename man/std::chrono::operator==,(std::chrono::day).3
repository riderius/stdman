.TH std::chrono::operator==,(std::chrono::day) 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::chrono::operator==,(std::chrono::day) \- std::chrono::operator==,(std::chrono::day)

.SH Synopsis
   Defined in header <chrono>
   constexpr bool operator==( const std::chrono::day& x,              \fB(1)\fP \fI(since C++20)\fP
                              const std::chrono::day& y ) noexcept;
   constexpr std::strong_ordering operator<=>( const
   std::chrono::day& x,                                               \fB(2)\fP \fI(since C++20)\fP
                                               const
   std::chrono::day& y ) noexcept;

   Compare the two std::chrono::day x and y.

   The <, <=, >, >=, and != operators are synthesized from operator<=> and operator==
   respectively.

.SH Return value

   1) unsigned(x) == unsigned(y)
   2) unsigned(x) <=> unsigned(y)

.SH Example

   
// Run this code

 #include <chrono>
 #include <iostream>
  
 int main()
 {
     constexpr std::chrono::day x{13}, y{31};
     static_assert(x != y);
  
     if constexpr (constexpr auto res = x <=> y; res < 0)
         std::cout << "x is less than y\\n";
     else if constexpr (res > 0)
         std::cout << "x is greater than y\\n";
     else
         std::cout << "x and y are equal\\n";
  
     using namespace std::literals::chrono_literals;
  
     static_assert
     (
         (6d < 9d) && (6d == 6d) && (6d <= 9d) &&
         (9d > 6d) && (9d != 6d) && (9d >= 6d)
     );
 }

.SH Output:

 x is less than y
