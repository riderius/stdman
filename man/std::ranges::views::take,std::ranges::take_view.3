.TH std::ranges::views::take,std::ranges::take_view 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::views::take,std::ranges::take_view \- std::ranges::views::take,std::ranges::take_view

.SH Synopsis
   Defined in header <ranges>
   template< ranges::view V >

   class take_view                                                    \fB(1)\fP \fI(since C++20)\fP

       : public ranges::view_interface<take_view<V>>
   namespace views {

       inline constexpr /* unspecified */ take = /* unspecified */;   \fB(2)\fP \fI(since C++20)\fP

   }
   Call signature
   template< ranges::viewable_range R >

       requires /* see below */                                           \fI(since C++20)\fP
   constexpr ranges::view auto

       take( R&& r, ranges::range_difference_t<R> count );
   template< class DifferenceType >
   constexpr /* range adaptor closure */ take( DifferenceType&& count     \fI(since C++20)\fP
   );

   1) A range adaptor that represents view of the elements from an underlying sequence,
   starting at the beginning and ending at a given bound.
   2) views::take is a RangeAdaptorObject. The expression views::take(e, f) results in
   a view that represents the first f elements from e. The result is not necessarily a
   take_view.

   views::take(e, f) is expression-equivalent to (where T is
   std::remove_cvref_t<decltype((e))> and D is
   ranges::range_difference_t<decltype((e))>):

     * ((void)f, decay-copy(e)), if T is a ranges::empty_view, except that the
       evaluations of e and f are indeterminately sequenced;
     * U(ranges::begin(e), ranges::begin(e) + std::min<D>(ranges::distance(e), f)), if
       T is a specialization of std::span, std::basic_string_view, or ranges::subrange
       that models both random_access_range and sized_range, where U is

     * std::span<typename T::element_type>, if T is a specialization of std::span;
     * T, if T is a specialization of std::basic_string_view;
     * ranges::subrange<ranges::iterator_t<T>>, if T is a specialization of
       ranges::subrange;
     * ranges::iota_view(*ranges::begin(e),
                         *(ranges::begin(e) + std::min<D>(ranges::distance(e), f))), if
       T is a specialization of ranges::iota_view that models both random_access_range
       and sized_range;

     * otherwise, if T is a specialization of ranges::repeat_view:

     * views::repeat(*e.value_, std::min<D>(ranges::distance(e), f)), if  (since C++23)
       T models sized_range; is such case e is evaluated only once;
     * views::repeat(*e.value_, static_cast<D>(e)) otherwise;

     * otherwise, take_view(e, f).
   In all cases, decltype((f)) must model std::convertible_to<D>.

   take_view models the concepts contiguous_range, random_access_range,
   bidirectional_range, forward_range, input_range, and sized_range when the underlying
   view V models respective concepts. It models common_range when the underlying view V
   models both random_access_range and sized_range.

.SH Member functions

   constructor   constructs a take_view
   (C++20)       \fI(public member function)\fP 
   base          returns a copy of the underlying (adapted) view
   (C++20)       \fI(public member function)\fP 
   begin         returns an iterator to the beginning
   (C++20)       \fI(public member function)\fP 
   end           returns an iterator or a sentinel to the end
   (C++20)       \fI(public member function)\fP 
   size          returns the number of elements. Provided only if the underlying
   (C++20)       (adapted) range satisfies sized_range.
                 \fI(public member function)\fP 
         Inherited from std::ranges::view_interface
   empty         returns whether the derived view is empty. Provided if it satisfies
   (C++20)       sized_range or forward_range.
                 \fI(public member function of std::ranges::view_interface<D>)\fP 
   cbegin        returns a constant iterator to the beginning of the range.
   (C++23)       \fI(public member function of std::ranges::view_interface<D>)\fP 
   cend          returns a sentinel for the constant iterator of the range.
   (C++23)       \fI(public member function of std::ranges::view_interface<D>)\fP 
   operator bool returns whether the derived view is not empty. Provided if
   (C++20)       ranges::empty is applicable to it.
                 \fI(public member function of std::ranges::view_interface<D>)\fP 
   data          gets the address of derived view's data. Provided if its iterator type
   (C++20)       satisfies contiguous_iterator.
                 \fI(public member function of std::ranges::view_interface<D>)\fP 
   front         returns the first element in the derived view. Provided if it
   (C++20)       satisfies forward_range.
                 \fI(public member function of std::ranges::view_interface<D>)\fP 
   back          returns the last element in the derived view. Provided if it satisfies
   (C++20)       bidirectional_range and common_range.
                 \fI(public member function of std::ranges::view_interface<D>)\fP 
   operator[]    returns the n^th element in the derived view. Provided if it satisfies
   (C++20)       random_access_range.
                 \fI(public member function of std::ranges::view_interface<D>)\fP 

   Deduction guides

   Nested classes

   sentinel the sentinel type
   (C++20)  (exposition-only member class template*)

   Helper templates

   template< class T >

   inline constexpr bool                                                  \fI(since C++20)\fP
   enable_borrowed_range<std::ranges::take_view<T>> =

       std::ranges::enable_borrowed_range<T>;

   This specialization of std::ranges::enable_borrowed_range makes take_view satisfy
   borrowed_range when the underlying view satisfies it.

.SH Example

   
// Run this code

 #include <algorithm>
 #include <iostream>
 #include <ranges>
  
 auto print = [](char x){ std::cout << x; };
  
 int main()
 {
     constexpr char pi[]{'3', '.', '1', '4', '1', '5', '9', '2'};
  
     std::ranges::for_each(pi | std::ranges::views::take(6), print);
     std::cout << '\\n';
  
     // safely takes 8 chars only, i.e. min(pi.size(), 42)
     std::ranges::for_each(std::ranges::take_view{pi, 42}, print);
  
     std::cout << '\\n';
 }

.SH Output:

 3.1415
 3.141592

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to    Behavior as published              Correct behavior
                       views::take sometimes failed
   LWG 3407 C++20      to                           the result type is adjusted so
                       construct a sized random     that construction is always valid
                       access range
   LWG 3494 C++20      take_view was never a        it is a borrowed_range if its
                       borrowed_range               underlying view is

.SH See also

   views::counted          creates a subrange from an iterator and a count
   (C++20)                 (customization point object)
   ranges::take_while_view a view consisting of the initial elements of another view,
   views::take_while       until the first element on which a predicate returns false
   (C++20)                 \fI(class template)\fP (range adaptor object)
   ranges::copy_n          copies a number of elements to a new location
   (C++20)                 (niebloid)
