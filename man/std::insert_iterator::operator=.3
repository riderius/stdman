.TH std::insert_iterator::operator= 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::insert_iterator::operator= \- std::insert_iterator::operator=

.SH Synopsis
   insert_iterator<Container>&
       operator=( typename                                  \fI(until C++11)\fP
   Container::const_reference value );
   insert_iterator<Container>&                              \fI(since C++11)\fP
       operator=( const typename                            \fI(until C++20)\fP
   Container::value_type& value );
   constexpr insert_iterator<Container>&
       operator=( const typename                    \fB(1)\fP     \fI(since C++20)\fP
   Container::value_type& value );
   insert_iterator<Container>&                                            \fI(since C++11)\fP
       operator=( typename Container::value_type&&                        \fI(until C++20)\fP
   value );                                             \fB(2)\fP
   constexpr insert_iterator<Container>&
       operator=( typename Container::value_type&&                        \fI(since C++20)\fP
   value );

   Inserts the given value value to the container.

   1) Results in iter = container->insert(iter, value); ++iter;.
   2) Results in iter = container->insert(iter, std::move(value)); ++iter;.

.SH Parameters

   value - the value to insert

.SH Return value

   *this

.SH Notes

   This function exploits the signature compatibility between hinted insert for
   associative containers (such as std::set::insert) and positional insert for
   sequential containers (such as std::vector::insert).

.SH Example

   
// Run this code

 #include <deque>
 #include <iostream>
 #include <iterator>
  
 int main()
 {
     std::deque<int> q;
     std::insert_iterator<std::deque<int>> it(q, q.begin());
  
     for (int i = 0; i < 10; ++i)
         it = i; // inserts i
  
     for (auto& elem : q)
         std::cout << elem << ' ';
     std::cout << '\\n';
 }

.SH Output:

 0 1 2 3 4 5 6 7 8 9
