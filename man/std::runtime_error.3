.TH std::runtime_error 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::runtime_error \- std::runtime_error

.SH Synopsis
   Defined in header <stdexcept>
   class runtime_error;

   Defines a type of object to be thrown as exception. It reports errors that are due
   to events beyond the scope of the program and can not be easily predicted.

   Exceptions of type std::runtime_error are thrown by the following standard library
   components: std::locale::locale and std::locale::combine.

   In addition, the following standard exception types are derived from
   std::runtime_error:

     * std::range_error
     * std::overflow_error
     * std::underflow_error

     * std::regex_error    \fI(since C++11)\fP
     * std::system_error

     * std::chrono::ambiguous_local_time
     * std::chrono::nonexistent_local_time   \fI(since C++20)\fP
     * std::format_error

   std-runtime error-inheritance.svg

                                   Inheritance diagram

.SH Member functions

   constructor   constructs a new runtime_error object with the given message
                 \fI(public member function)\fP
   operator=     replaces the runtime_error object
                 \fI(public member function)\fP

std::runtime_error::runtime_error

   runtime_error( const std::string& what_arg ); \fB(1)\fP
   runtime_error( const char* what_arg );        \fB(2)\fP
   runtime_error( const runtime_error& other );  \fB(3)\fP (noexcept since C++11)

   1) Constructs the exception object with what_arg as explanatory string. After
   construction, std::strcmp(what(), what_arg.c_str()) == 0.
   2) Constructs the exception object with what_arg as explanatory string. After
   construction, std::strcmp(what(), what_arg) == 0.
   3) Copy constructor. If *this and other both have dynamic type std::runtime_error
   then std::strcmp(what(), other.what()) == 0. No exception can be thrown from the
   copy constructor.

.SH Parameters

   what_arg - explanatory string
   other    - another exception object to copy

.SH Exceptions

   1,2) May throw std::bad_alloc.

.SH Notes

   Because copying std::runtime_error is not permitted to throw exceptions, this
   message is typically stored internally as a separately-allocated reference-counted
   string. This is also why there is no constructor taking std::string&&: it would have
   to copy the content anyway.

   Before the resolution of LWG issue 254, the non-copy constructor can only accept
   std::string. It makes dynamic allocation mandatory in order to construct a
   std::string object.

   After the resolution of LWG issue 471, a derived standard exception class must have
   a publicly accessible copy constructor. It can be implicitly defined as long as the
   explanatory strings obtained by what() are the same for the original object and the
   copied object.

std::runtime_error::operator=

   runtime_error& operator=( const runtime_error& other );  (noexcept since C++11)

   Assigns the contents with those of other. If *this and other both have dynamic type
   std::runtime_error then std::strcmp(what(), other.what()) == 0 after assignment. No
   exception can be thrown from the copy assignment operator.

.SH Parameters

   other - another exception object to assign with

.SH Return value

   *this

.SH Notes

   After the resolution of LWG issue 471, a derived standard exception class must have
   a publicly accessible copy assignment operator. It can be implicitly defined as long
   as the explanatory strings obtained by what() are the same for the original object
   and the copied object.

Inherited from std::exception

.SH Member functions

   destructor   destroys the exception object
   \fB[virtual]\fP    \fI(virtual public member function of std::exception)\fP 
   what         returns an explanatory string
   \fB[virtual]\fP    \fI(virtual public member function of std::exception)\fP 

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

     DR    Applied to        Behavior as published               Correct behavior
   LWG 254 C++98      the constructor accepting const      added
                      char* was missing
                      the explanatory strings of           they are the same as that of
   LWG 471 C++98      std::runtime_error's                 the
                      copies were implementation-defined   original std::runtime_error
                                                           object
