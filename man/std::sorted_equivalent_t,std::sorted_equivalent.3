.TH std::sorted_equivalent_t,std::sorted_equivalent 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::sorted_equivalent_t,std::sorted_equivalent \- std::sorted_equivalent_t,std::sorted_equivalent

.SH Synopsis
   Defined in header <flat_map>
   Defined in header <flat_set>
   struct sorted_equivalent_t { explicit sorted_equivalent_t() =      \fB(1)\fP (since C++23)
   default; };
   inline constexpr sorted_equivalent_t sorted_equivalent{};          \fB(2)\fP (since C++23)

   1) The type std::sorted_equivalent_t can be used in the function's (including
   constructor's) parameter list to match the intended tag.
   2) The corresponding std::sorted_equivalent instance of \fB(1)\fP is a disambiguation tag
   that can be passed to the functions of std::flat_multimap and std::flat_multiset to
   indicate that the input range or container is sorted (with respect to the comparator
   used in flat container adaptor), whilst uniqueness of elements is not required.

.SH Standard library

   The following standard library container adaptors use (1,2) as disambiguation tags:

   flat_multimap adapts two containers to provide a collection of key-value pairs,
   (C++23)       sorted by keys
                 \fI(class template)\fP 
   flat_multiset adapts a container to provide a collection of keys, sorted by keys
   (C++23)       \fI(class template)\fP 

.SH See also

   sorted_unique    indicates that elements of a range are sorted and unique
   sorted_unique_t  (tag)
   (C++23)
   from_range_t     from-range construction tag
   from_range       (tag)
   (C++23)
   in_place
   in_place_type
   in_place_index   in-place construction tag
   in_place_t       (tag)
   in_place_type_t
   in_place_index_t
   \fI(C++17)\fP
