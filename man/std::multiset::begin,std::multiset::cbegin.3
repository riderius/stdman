.TH std::multiset::begin,std::multiset::cbegin 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::multiset::begin,std::multiset::cbegin \- std::multiset::begin,std::multiset::cbegin

.SH Synopsis
   iterator begin();                       \fB(1)\fP (noexcept since C++11)
   const_iterator begin() const;           \fB(2)\fP (noexcept since C++11)
   const_iterator cbegin() const noexcept; \fB(3)\fP \fI(since C++11)\fP

   Returns an iterator to the first element of the multiset.

   If the multiset is empty, the returned iterator will be equal to end().

   range-begin-end.svg

.SH Parameters

   \fI(none)\fP

.SH Return value

   Iterator to the first element.

.SH Complexity

   Constant.

.SH Notes

   Because both iterator and const_iterator are constant iterators (and may in fact be
   the same type), it is not possible to mutate the elements of the container through
   an iterator returned by any of these member functions.

   libc++ backports cbegin() to C++98 mode.

.SH Example

   
// Run this code

 #include <iostream>
 #include <iterator>
 #include <set>
 #include <string>
  
 int main()
 {
     const std::multiset<std::string> words =
     {
         "some", "not", "sorted", "words",
         "will", "come", "out", "sorted",
     };
  
     for (auto it = words.begin(); it != words.end(); )
     {
         auto count = words.count(*it);
         std::cout << *it << ":\\t" << count << '\\n';
         std::advance(it, count); // all count elements have equivalent keys
     }
 }

.SH Output:

 come:   1
 not:    1
 out:    1
 some:   1
 sorted: 2
 will:   1
 words:  1

.SH See also

   end     returns an iterator to the end
   cend    \fI(public member function)\fP 
   \fI(C++11)\fP
   begin
   cbegin  returns an iterator to the beginning of a container or array
   \fI(C++11)\fP \fI(function template)\fP 
   \fI(C++14)\fP
