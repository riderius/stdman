.TH std::literals::chrono_literals::operator""h 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::literals::chrono_literals::operator""h \- std::literals::chrono_literals::operator""h

.SH Synopsis
   Defined in header <chrono>
   constexpr std::chrono::hours                                       \fB(1)\fP \fI(since C++14)\fP
       operator""h( unsigned long long hrs );
   constexpr std::chrono::duration</*unspecified*/,
   std::ratio<3600,1>>                                                \fB(2)\fP \fI(since C++14)\fP
       operator""h( long double hrs );

   Forms a std::chrono::duration literal representing hours.

   1) Integer literal, returns exactly std::chrono::hours(hrs).
   2) Floating-point literal, returns a floating-point duration equivalent to
   std::chrono::hours.

.SH Parameters

   hrs - the number of hours

.SH Return value

   The std::chrono::duration literal.

.SH Possible implementation

   constexpr std::chrono::hours operator""h(unsigned long long h)
   {
       return std::chrono::hours(h);
   }
    
   constexpr std::chrono::duration<long double, ratio<3600,1>> operator""h(long double h)
   {
       return std::chrono::duration<long double, std::ratio<3600,1>>(h);
   }

.SH Notes

   This operator is declared in the namespace std::literals::chrono_literals, where
   both literals and chrono_literals are inline namespaces. Access to this operator can
   be gained with:

     * using namespace std::literals,
     * using namespace std::chrono_literals, or
     * using namespace std::literals::chrono_literals.

   In addition, within the namespace std::chrono, the directive using namespace
   literals::chrono_literals; is provided by the standard library, so that if a
   programmer uses using namespace std::chrono; to gain access to the classes in the
   chrono library, the corresponding literal operators become visible as well.

.SH Example

   
// Run this code

 #include <chrono>
 #include <iostream>
  
 int main()
 {
     using namespace std::chrono_literals;
     auto day = 24h;
     auto halfhour = 0.5h;
     std::cout << "one day is " << day.count() << " hours (" << day << ")\\n"
               << "half an hour is " << halfhour.count() << " hours ("
               << halfhour << ")\\n";
 }

.SH Output:

 one day is 24 hours (24h)
 half an hour is 0.5 hours (0.5h)

.SH See also

   constructor   constructs new duration
                 \fI(public member function of std::chrono::duration<Rep,Period>)\fP 
