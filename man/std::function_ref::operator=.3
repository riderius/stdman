.TH std::function_ref::operator= 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::function_ref::operator= \- std::function_ref::operator=

.SH Synopsis
   constexpr function_ref& operator=( const function_ref& ) noexcept  \fB(1)\fP (since C++26)
   = default;
   template< class T >                                                \fB(2)\fP (since C++26)
   constexpr function_ref& operator=( T ) = delete;

   1) Copy assignment operator is explicitly-defaulted. std::function_ref satisfies
   copyable and TriviallyCopyable. This defaulted assignment operator performs a
   shallow copy of the stored thunk-ptr and bound-entity.
   2) User-defined assignment operator is explicitly-deleted if T is not the same type
   as std::function_ref, std::is_pointer_v<T> is false, and T is not a specialization
   of std::nontype_t. This overload participates in overload resolution only if the
   constraints are satisfied in the conditions above.

.SH Return value

   *this

.SH See also

   constructor   constructs a new function_ref object
   (C++26)       \fI(public member function)\fP 
   operator=     assigns a new target
                 \fI(public member function of std::function<R(Args...)>)\fP 
