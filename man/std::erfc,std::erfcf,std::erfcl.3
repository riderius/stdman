.TH std::erfc,std::erfcf,std::erfcl 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::erfc,std::erfcf,std::erfcl \- std::erfc,std::erfcf,std::erfcl

.SH Synopsis
   Defined in header <cmath>
   float       erfc ( float num );

   double      erfc ( double num );                            (until C++23)

   long double erfc ( long double num );
   /* floating-point-type */                                   (since C++23)
               erfc ( /* floating-point-type */ num );         (constexpr since C++26)
   float       erfcf( float num );                     \fB(1)\fP \fB(2)\fP \fI(since C++11)\fP
                                                               (constexpr since C++26)
   long double erfcl( long double num );                   \fB(3)\fP \fI(since C++11)\fP
                                                               (constexpr since C++26)
   Additional overloads \fI(since C++11)\fP
   Defined in header <cmath>
   template< class Integer >                               (A) (constexpr since C++26)
   double      erfc ( Integer num );

   1-3) Computes the complementary error function of num, that is 1.0 - std::erf(num),
   but without loss of precision for large num.
   The library provides overloads of std::erfc for all cv-unqualified floating-point
   types as the type of the parameter.
   (since C++23)

   A) Additional overloads are provided for all integer types, which are  \fI(since C++11)\fP
   treated as double.

.SH Parameters

   num - floating-point or integer value

.SH Return value

   If no errors occur, value of the complementary error function of num, that is
   \\(\\frac{2}{\\sqrt{\\pi} }\\int_{num}^{\\infty}{e^{-{t^2} }\\mathsf{d}t}\\)

   2
   √
   π

   ∫∞
   nume^-t2
   dt or \\({\\small 1-\\operatorname{erf}(num)}\\)1-erf(num), is returned.

   If a range error occurs due to underflow, the correct result (after rounding) is
   returned.

.SH Error handling

   Errors are reported as specified in math_errhandling.

   If the implementation supports IEEE floating-point arithmetic (IEC 60559),

     * If the argument is +∞, +0 is returned.
     * If the argument is -∞, 2 is returned.
     * If the argument is NaN, NaN is returned.

.SH Notes

   For the IEEE-compatible type double, underflow is guaranteed if num > 26.55.

   The additional overloads are not required to be provided exactly as (A). They only
   need to be sufficient to ensure that for their argument num of integer type,
   std::erfc(num) has the same effect as std::erfc(static_cast<double>(num)).

.SH Example

   
// Run this code

 #include <cmath>
 #include <iomanip>
 #include <iostream>
  
 double normalCDF(double x) // Phi(-∞, x) aka N(x)
 {
     return std::erfc(-x / std::sqrt(2)) / 2;
 }
  
 int main()
 {
     std::cout << "normal cumulative distribution function:\\n"
               << std::fixed << std::setprecision(2);
     for (double n = 0; n < 1; n += 0.1)
         std::cout << "normalCDF(" << n << ") = " << 100 * normalCDF(n) << "%\\n";
  
     std::cout << "special values:\\n"
               << "erfc(-Inf) = " << std::erfc(-INFINITY) << '\\n'
               << "erfc(Inf) = " << std::erfc(INFINITY) << '\\n';
 }

.SH Output:

 normal cumulative distribution function:
 normalCDF(0.00) = 50.00%
 normalCDF(0.10) = 53.98%
 normalCDF(0.20) = 57.93%
 normalCDF(0.30) = 61.79%
 normalCDF(0.40) = 65.54%
 normalCDF(0.50) = 69.15%
 normalCDF(0.60) = 72.57%
 normalCDF(0.70) = 75.80%
 normalCDF(0.80) = 78.81%
 normalCDF(0.90) = 81.59%
 normalCDF(1.00) = 84.13%
 special values:
 erfc(-Inf) = 2.00
 erfc(Inf) = 0.00

.SH See also

   erf
   erff
   erfl    error function
   \fI(C++11)\fP \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   C documentation for
   erfc

.SH External links

   Weisstein, Eric W. "Erfc." From MathWorld — A Wolfram Web Resource.
