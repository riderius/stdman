.TH std::forward_list::insert_range_after 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::forward_list::insert_range_after \- std::forward_list::insert_range_after

.SH Synopsis
   template< container-compatible-range<T> R >                 (since C++23)
   iterator insert_range_after( const_iterator pos, R&& rg );

   Inserts, in non-reversing order, the copies of elements in rg before pos. Each
   iterator in the range rg is dereferenced exactly once.

   pos must be any dereferenceable iterator in the range [begin(), end()) or the
   before_begin() iterator (thus, end() is not a valid argument for pos).

   No iterators or references become invalidated.

   The behavior is undefined if rg overlaps with the container.

.SH Parameters

   pos        -       an iterator after which the content will be inserted
   rg         -       a container compatible range, that is, an input_range whose
                      elements are convertible to T
.SH Type requirements
   -
   T must be EmplaceConstructible into forward_list from *ranges::begin(rg). Otherwise,
   the behavior is undefined.

.SH Return value

   An iterator that points at the copy of the last element inserted into forward_list
   or at pos if rg is empty.

.SH Complexity

   Linear in size of rg.

.SH Notes

       Feature-test macro       Value    Std                   Feature
   __cpp_lib_containers_ranges 202202L (C++23) Ranges-aware construction and insertion

.SH Example

   
// Run this code

 #include <algorithm>
 #include <cassert>
 #include <forward_list>
 #include <iterator>
 #include <vector>
  
 int main()
 {
     auto container = std::forward_list{1, 2, 3, 4};
     auto pos = std::next(container.cbegin());
     assert(*pos == 2);
     const auto rg = std::vector{-1, -2, -3};
  
 #ifdef __cpp_lib_containers_ranges
     container.insert_range_after(pos, rg);
 #else
     container.insert_after(pos, rg.cbegin(), rg.cend());
 #endif
  
     assert(std::ranges::equal(container, std::vector{1, 2, -1, -2, -3, 3, 4}));
 }

.SH See also

   prepend_range adds a range of elements to the beginning
   (C++23)       \fI(public member function)\fP
   insert_after  inserts elements after an element
                 \fI(public member function)\fP
   emplace_after constructs elements in-place after an element
                 \fI(public member function)\fP
