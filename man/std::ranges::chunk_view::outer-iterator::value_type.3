.TH std::ranges::chunk_view::outer-iterator::value_type 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::chunk_view::outer-iterator::value_type \- std::ranges::chunk_view::outer-iterator::value_type

.SH Synopsis
   Defined in header <ranges>
   struct value_type : view_interface<value_type>  (since C++23)

   A value type of the iterator chunk_view::outer-iterator, formed when V models
   input_range.

.SH Member functions

   constructor   constructs an value_type
   (C++23)       \fI(public member function)\fP
   begin         returns the beginning chunk_view::inner-iterator
   (C++23)       \fI(public member function)\fP
   end           returns the default sentinel
   (C++23)       \fI(public member function)\fP
   size          returns the size of the view
   (C++23)       \fI(public member function)\fP
         Inherited from std::ranges::view_interface
   empty         returns whether the derived view is empty. Provided if it satisfies
   (C++20)       sized_range or forward_range.
                 \fI(public member function of std::ranges::view_interface<D>)\fP 
   cbegin        returns a constant iterator to the beginning of the range.
   (C++23)       \fI(public member function of std::ranges::view_interface<D>)\fP 
   cend          returns a sentinel for the constant iterator of the range.
   (C++23)       \fI(public member function of std::ranges::view_interface<D>)\fP 
   operator bool returns whether the derived view is not empty. Provided if
   (C++20)       ranges::empty is applicable to it.
                 \fI(public member function of std::ranges::view_interface<D>)\fP 

std::ranges::chunk_view::outer-iterator::value_type::value_type

   private:

   // exposition only                                    (since C++23)

   constexpr explicit value_type( chunk_view& parent );

   Constructs the value_type object so that parent_ is initialized with
   std::addressof(parent).

.SH Parameters

   parent - the chunk_view object

std::ranges::chunk_view::outer-iterator::value_type::begin

   constexpr /*inner-iterator*/ begin() const noexcept;  (since C++23)

   Equivalent to return /*inner-iterator*/(*parent_);.

std::ranges::chunk_view::outer-iterator::value_type::end

   constexpr std::default_sentinel_t end() const noexcept;  (since C++23)

   Equivalent to return std::default_sentinel;.

std::ranges::chunk_view::outer-iterator::value_type::size

   constexpr auto size() const
       requires std::sized_sentinel_for<ranges::sentinel_t<V>,            (since C++23)
   ranges::iterator_t<V>>;

   Returns the size of the view.

   Equivalent to
   return /*to-unsigned-like*/(
       ranges::min(parent_->remainder_, ranges::end(parent_->base_) -
   *parent_->current_));

.SH Example

    This section is incomplete
    Reason: example

.SH References

     * C++23 standard (ISO/IEC 14882:2023):

     * 26.7.28.4 Class chunk_view::outer-iterator::value_type [range.chunk.outer.value]

.SH See also

   outer_iterator the output ("chunk-wise") iterator type when V models input_range
   (C++23)        (exposition-only member class of std::ranges::chunk_view<V>*)
   inner_iterator the inner ("element-wise") iterator type when V models input_range
   (C++23)        (exposition-only member class of std::ranges::chunk_view<V>*)

.SH Category:
     * Todo with reason
