.TH std::is_fundamental 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_fundamental \- std::is_fundamental

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_fundamental;

   std::is_fundamental is a UnaryTypeTrait.

   If T is a fundamental type (that is, arithmetic type, void, or nullptr_t), provides
   the member constant value equal true. For any other type, value is false.

   If the program adds specializations for std::is_fundamental or
   std::is_fundamental_v, the behavior is undefined.

.SH Template parameters

   T - a type to check

   Helper variable template

   template< class T >                                                 \fI(since C++17)\fP
   inline constexpr bool is_fundamental_v = is_fundamental<T>::value;

   

Inherited from std::integral_constant

.SH Member constants

   value    true if T is a fundamental type, false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Possible implementation

   template<class T>
   struct is_fundamental
       : std::integral_constant<
           bool,
           std::is_arithmetic<T>::value ||
           std::is_void<T>::value ||
           std::is_same<std::nullptr_t, typename std::remove_cv<T>::type>::value
           // you can also use 'std::is_null_pointer<T>::value' instead in C++14
   > {};

.SH Example

   
// Run this code

 #include <type_traits>
  
 static_assert(std::is_fundamental_v<int> == true);
 static_assert(std::is_fundamental_v<int&> == false);
 static_assert(std::is_fundamental_v<int*> == false);
 static_assert(std::is_fundamental_v<void> == true);
 static_assert(std::is_fundamental_v<void*> == false);
 static_assert(std::is_fundamental_v<float> == true);
 static_assert(std::is_fundamental_v<float&> == false);
 static_assert(std::is_fundamental_v<float*> == false);
 static_assert(std::is_fundamental_v<std::nullptr_t> == true);
 static_assert(std::is_fundamental_v<std::is_fundamental<int>> == false);
  
 class A {};
 static_assert(std::is_fundamental_v<A> == false);
 static_assert(std::is_fundamental_v<std::is_fundamental<A>::value_type>);
  
 int main() {}

.SH See also

   is_compound     checks if a type is a compound type
   \fI(C++11)\fP         \fI(class template)\fP 
   is_arithmetic   checks if a type is an arithmetic type
   \fI(C++11)\fP         \fI(class template)\fP 
   is_void         checks if a type is void
   \fI(C++11)\fP         \fI(class template)\fP 
   is_null_pointer checks if a type is std::nullptr_t
   \fI(C++14)\fP         \fI(class template)\fP 
