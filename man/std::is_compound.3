.TH std::is_compound 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_compound \- std::is_compound

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_compound;

   std::is_compound is a UnaryTypeTrait.

   If T is a compound type (that is, array, function, object pointer, function pointer,
   member object pointer, member function pointer, reference, class, union, or
   enumeration, including any cv-qualified variants), provides the member constant
   value equal true. For any other type, value is false.

   If the program adds specializations for std::is_compound or std::is_compound_v, the
   behavior is undefined.

.SH Template parameters

   T - a type to check

   Helper variable template

   template< class T >                                           \fI(since C++17)\fP
   inline constexpr bool is_compound_v = is_compound<T>::value;

   

Inherited from std::integral_constant

.SH Member constants

   value    true if T is a compound type, false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Notes

   Compound types are the types that are constructed from fundamental types. Any C++
   type is either fundamental or compound.

.SH Possible implementation

   template<class T>
   struct is_compound : std::integral_constant<bool, !std::is_fundamental<T>::value> {};

.SH Example

   
// Run this code

 #include <type_traits>
 #include <iostream>
  
 static_assert(not std::is_compound_v<int>);
 static_assert(std::is_compound_v<int*>);
 static_assert(std::is_compound_v<int&>);
  
 void f();
 static_assert(std::is_compound_v<decltype(f)>);
 static_assert(std::is_compound_v<decltype(&f)>);
  
 static_assert(std::is_compound_v<char[100]>);
  
 class C {};
 static_assert(std::is_compound_v<C>);
  
 union U {};
 static_assert(std::is_compound_v<U>);
  
 enum struct E { e };
 static_assert(std::is_compound_v<E>);
 static_assert(std::is_compound_v<decltype(E::e)>);
  
 struct S
 {
     int i : 8;
     int j;
     void foo();
 };
 static_assert(not std::is_compound_v<decltype(S::i)>);
 static_assert(not std::is_compound_v<decltype(S::j)>);
 static_assert(std::is_compound_v<decltype(&S::j)>);
 static_assert(std::is_compound_v<decltype(&S::foo)>);
  
 int main()
 {
     std::cout << "All checks have passed\\n";
 }

.SH See also

   is_fundamental checks if a type is a fundamental type
   \fI(C++11)\fP        \fI(class template)\fP 
   is_scalar      checks if a type is a scalar type
   \fI(C++11)\fP        \fI(class template)\fP 
   is_object      checks if a type is an object type
   \fI(C++11)\fP        \fI(class template)\fP 
   is_array       checks if a type is an array type
   \fI(C++11)\fP        \fI(class template)\fP 
