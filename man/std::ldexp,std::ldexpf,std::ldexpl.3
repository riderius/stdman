.TH std::ldexp,std::ldexpf,std::ldexpl 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ldexp,std::ldexpf,std::ldexpl \- std::ldexp,std::ldexpf,std::ldexpl

.SH Synopsis
   Defined in header <cmath>
   float       ldexp ( float num, int exp );

   double      ldexp ( double num, int exp );                   (until C++23)

   long double ldexp ( long double num, int exp );
   constexpr /* floating-point-type */
               ldexp ( /* floating-point-type */ num,           (since C++23)
   int exp );                                           \fB(1)\fP
   float       ldexpf( float num, int exp );                \fB(2)\fP \fI(since C++11)\fP
                                                                (constexpr since C++23)
   long double ldexpl( long double num, int exp );          \fB(3)\fP \fI(since C++11)\fP
                                                                (constexpr since C++23)
   Additional overloads \fI(since C++11)\fP
   Defined in header <cmath>
   template< class Integer >                                (A) \fI(since C++11)\fP
   double      ldexp ( Integer num, int exp );                  (constexpr since C++23)

   1-3) Multiplies a floating point value num by the number 2 raised to the exp power.
   The library provides overloads of std::ldexp for all cv-unqualified floating-point
   types as the type of the parameter num.
   (since C++23)

   A) Additional overloads are provided for all integer types, which are  \fI(since C++11)\fP
   treated as double.

.SH Parameters

   num - floating-point or integer value
   exp - integer value

.SH Return value

   If no errors occur, num multiplied by 2 to the power of exp (num×2exp
   ) is returned.

   If a range error due to overflow occurs, ±HUGE_VAL, ±HUGE_VALF, or ±HUGE_VALL is
   returned.

   If a range error due to underflow occurs, the correct result (after rounding) is
   returned.

.SH Error handling

   Errors are reported as specified in math_errhandling.

   If the implementation supports IEEE floating-point arithmetic (IEC 60559),

     * Unless a range error occurs, FE_INEXACT is never raised (the result is exact).
     * Unless a range error occurs, the current rounding mode is ignored.
     * If num is ±0, it is returned, unmodified.
     * If num is ±∞, it is returned, unmodified.
     * If exp is 0, then num is returned, unmodified.
     * If num is NaN, NaN is returned.

.SH Notes

   On binary systems (where FLT_RADIX is 2), std::ldexp is equivalent to std::scalbn.

   The function std::ldexp ("load exponent"), together with its dual, std::frexp, can
   be used to manipulate the representation of a floating-point number without direct
   bit manipulations.

   On many implementations, std::ldexp is less efficient than multiplication or
   division by a power of two using arithmetic operators.

   The additional overloads are not required to be provided exactly as (A). They only
   need to be sufficient to ensure that for their argument num of integer type,
   std::ldexp(num, exp) has the same effect as std::ldexp(static_cast<double>(num),
   exp).

   For exponentiation of 2 by a floating point exponent, std::exp2 can be used.

.SH Example

   
// Run this code

 #include <cerrno>
 #include <cfenv>
 #include <cmath>
 #include <cstring>
 #include <iostream>
 // #pragma STDC FENV_ACCESS ON
  
 int main()
 {
     std::cout
         << "ldexp(5, 3) = 5 * 8 = " << std::ldexp(5, 3) << '\\n'
         << "ldexp(7, -4) = 7 / 16 = " << std::ldexp(7, -4) << '\\n'
         << "ldexp(1, -1074) = " << std::ldexp(1, -1074)
         << " (minimum positive subnormal float64_t)\\n"
         << "ldexp(nextafter(1,0), 1024) = "
         << std::ldexp(std::nextafter(1,0), 1024)
         << " (largest finite float64_t)\\n";
  
     // special values
     std::cout << "ldexp(-0, 10) = " << std::ldexp(-0.0, 10) << '\\n'
               << "ldexp(-Inf, -1) = " << std::ldexp(-INFINITY, -1) << '\\n';
  
     // error handling
     std::feclearexcept(FE_ALL_EXCEPT);
     errno = 0;
     const double inf = std::ldexp(1, 1024);
     const bool is_range_error = errno == ERANGE;
  
     std::cout << "ldexp(1, 1024) = " << inf << '\\n';
     if (is_range_error)
         std::cout << "    errno == ERANGE: " << std::strerror(ERANGE) << '\\n';
     if (std::fetestexcept(FE_OVERFLOW))
         std::cout << "    FE_OVERFLOW raised\\n";
 }

.SH Possible output:

 ldexp(5, 3) = 5 * 8 = 40
 ldexp(7, -4) = 7 / 16 = 0.4375
 ldexp(1, -1074) = 4.94066e-324 (minimum positive subnormal float64_t)
 ldexp(nextafter(1,0), 1024) = 1.79769e+308 (largest finite float64_t)
 ldexp(-0, 10) = -0
 ldexp(-Inf, -1) = -inf
 ldexp(1, 1024) = inf
     errno == ERANGE: Numerical result out of range
     FE_OVERFLOW raised

.SH See also

   frexp
   frexpf   decomposes a number into significand and base-2 exponent
   frexpl   \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   scalbn
   scalbnf
   scalbnl
   scalbln
   scalblnf
   scalblnl multiplies a number by FLT_RADIX raised to a power
   \fI(C++11)\fP  \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   \fI(C++11)\fP
   \fI(C++11)\fP
   \fI(C++11)\fP
   exp2
   exp2f
   exp2l    returns 2 raised to the given power (\\({\\small 2^x}\\)2^x)
   \fI(C++11)\fP  \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   C documentation for
   ldexp
