.TH std::replace_copy,std::replace_copy_if 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::replace_copy,std::replace_copy_if \- std::replace_copy,std::replace_copy_if

.SH Synopsis
   Defined in header <algorithm>
   template< class InputIt, class OutputIt,
   class T >

   OutputIt replace_copy( InputIt first,    \fB(1)\fP (constexpr since
   InputIt last, OutputIt d_first,              C++20)

                          const T&
   old_value, const T& new_value );
   template< class ExecutionPolicy,

             class ForwardIt1, class
   ForwardIt2, class T >
   ForwardIt2 replace_copy
       ( ExecutionPolicy&& policy,          \fB(2)\fP \fI(since C++17)\fP
         ForwardIt1 first, ForwardIt1 last,
   ForwardIt2 d_first,

         const T& old_value, const T&
   new_value );
   template< class InputIt, class OutputIt,
   class UnaryPred, class T >
                                                                 (constexpr
   OutputIt replace_copy_if                                      since C++20)
       ( InputIt first, InputIt last,                            (until C++26)
   OutputIt d_first,

         UnaryPred p, const T& new_value );
   template< class InputIt, class OutputIt,
   class UnaryPred,

             class T = typename
   std::iterator_traits
                                                                 (since C++26)
   <OutputIt>::value_type >
   constexpr OutputIt replace_copy_if
       ( InputIt first, InputIt last,
   OutputIt d_first,

         UnaryPred p, const T& new_value );
   template< class ExecutionPolicy, class
   ForwardIt1, class ForwardIt2,            \fB(3)\fP

             class UnaryPred, class T >                                         (since
   ForwardIt2 replace_copy_if                                                   C++17)
       ( ExecutionPolicy&& policy,                                              (until
         ForwardIt1 first, ForwardIt1 last,                                     C++26)
   ForwardIt2 d_first,

         UnaryPred p, const T& new_value );
   template< class ExecutionPolicy, class
   ForwardIt1, class ForwardIt2,                \fB(4)\fP

             class UnaryPred, class T =
   typename std::iterator_traits
                                                                                (since
    <ForwardIt2>::value_type >                                                  C++26)
   ForwardIt2 replace_copy_if
       ( ExecutionPolicy&& policy,
         ForwardIt1 first, ForwardIt1 last,
   ForwardIt2 d_first,

         UnaryPred p, const T& new_value );

   Copies the elements from the range [first, last) to another range beginning at
   d_first, while replacing all elements satisfying specific criteria with new_value.

   1) Replaces all elements that are equal to old_value (using operator==).
   3) Replaces all elements for which predicate p returns true.
   2,4) Same as (1,3), but executed according to policy.
   These overloads participate in overload resolution only if

   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true.        (until
                                                                             C++20)
   std::is_execution_policy_v<std::remove_cvref_t<ExecutionPolicy>> is true. (since
                                                                             C++20)

   If any of the results of the expressions *first and new_value is not writable to
   d_first, the program is ill-formed.

   If the source and destination ranges overlap, the behavior is undefined.

.SH Parameters

   first, last - the range of elements to copy
   d_first     - the beginning of the destination range
   old_value   - the value of elements to replace
   policy      - the execution policy to use. See execution policy for details.
                 unary predicate which returns true if the element value should be
                 replaced.

                 The expression p(v) must be convertible to bool for every argument v
   p           - of type (possibly const) VT, where VT is the value type of InputIt,
                 regardless of value category, and must not modify v. Thus, a parameter
                 type of VT&is not allowed
                 , nor is VT unless for VT a move is equivalent to a copy
                 \fI(since C++11)\fP.
   new_value   - the value to use as replacement
.SH Type requirements
   -
   InputIt must meet the requirements of LegacyInputIterator.
   -
   OutputIt must meet the requirements of LegacyOutputIterator.
   -
   ForwardIt1, ForwardIt2 must meet the requirements of LegacyForwardIterator.

.SH Return value

   Iterator to the element past the last element copied.

.SH Complexity

   Given \\(\\scriptsize N\\)N as std::distance(first, last):

   1,2) Exactly \\(\\scriptsize N\\)N comparisons using operator==.
   3,4) Exactly \\(\\scriptsize N\\)N applications of the predicate p.

.SH Exceptions

   The overloads with a template parameter named ExecutionPolicy report errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the standard policies, std::terminate is called.
       For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Possible implementation

                                 replace_copy
   template<class InputIt, class OutputIt, class T>
   OutputIt replace_copy(InputIt first, InputIt last, OutputIt d_first,
                         const T& old_value, const T& new_value)
   {
       for (; first != last; ++first)
           *d_first++ = (*first == old_value) ? new_value : *first;
       return d_first;
   }
                               replace_copy_if
   template<class InputIt, class OutputIt, class UnaryPred,
            class T = typename std::iterator_traits<ForwardIt>::value_type>
   OutputIt replace_copy_if(InputIt first, InputIt last, OutputIt d_first,
                            UnaryPred p, const T& new_value)
   {
       for (; first != last; ++first)
           *d_first++ = p(*first) ? new_value : *first;
       return d_first;
   }

.SH Notes

             Feature-test macro           Value    Std              Feature
   __cpp_lib_algorithm_default_value_type 202403 (C++26) List-initialization for
                                                         algorithms (3,4)

.SH Example

   
// Run this code

 #include <algorithm>
 #include <complex>
 #include <iostream>
 #include <vector>
  
 void println(const auto& seq)
 {
     for (const auto& e : seq)
         std::cout << e << ' ';
     std::cout << '\\n';
 }
  
 int main()
 {
     std::vector<short> src{3, 1, 4, 1, 5, 9, 2, 6, 5};
     println(src);
     std::vector<int> dst(src.size());
     std::replace_copy_if(src.cbegin(), src.cend(),
                          dst.begin(),
                          [](short n){ return n > 5; }, 0);
     println(dst);
  
     std::vector<std::complex<double>> src2{{1, 3}, {2, 4}, {3, 5}},
                                       dst2(src2.size());
     println(src2);
     #ifdef __cpp_lib_algorithm_default_value_type
         std::replace_copy_if(src2.cbegin(), src2.cend(), dst2.begin(),
             [](std::complex<double> z){ return std::abs(z) < 5; },
             {4, 2}); // Possible, since the T is deduced.
     #else
         std::replace_copy_if(src2.cbegin(), src2.cend(), dst2.begin(),
             [](std::complex<double> z){ return std::abs(z) < 5; },
             std::complex<double>{4, 2});
     #endif
     println(dst2);
 }

.SH Output:

 3 1 4 1 5 9 2 6 5
 3 1 4 1 5 0 2 0 5
 (1,3) (2,4) (3,5)
 (4,2) (4,2) (3,5)

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

     DR    Applied to           Behavior as published              Correct behavior
                      T was required to be CopyAssignable (and
   LWG 283 C++98      EqualityComparable for                    removed the requirement
                      replace_copy), but the value type of
                      InputIt is not always T
                      replace_copy_if only required InputIt to  corrected to
   LWG 337 C++98      meet the requirements of                  LegacyInputIterator
                      LegacyIterator^[1]

    1. â†‘ The actual defect in the C++ standard is that the template parameter
       InputIterator was misspecified as Iterator. This affects the type requirements
       because the C++ standard states that for the function templates in the
       algorithms library, the template type parameters whose name ends with Iterator
       imply the type requirements of the corresponding iterator categories.

.SH See also

   replace                 replaces all values satisfying specific criteria with
   replace_if              another value
                           \fI(function template)\fP 
   remove                  removes elements satisfying specific criteria
   remove_if               \fI(function template)\fP 
   ranges::replace_copy    copies a range, replacing elements satisfying specific
   ranges::replace_copy_if criteria with another value
   (C++20)                 (niebloid)
   (C++20)
