.TH std::vprint_unicode(std::ostream) 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::vprint_unicode(std::ostream) \- std::vprint_unicode(std::ostream)

.SH Synopsis
   Defined in header <ostream>
   void vprint_unicode( std::ostream& os, std::string_view fmt,           (since C++23)
   std::format_args args );

   Behaves as FormattedOutputFunction (except that some details of error reporting
   differ):

     * First, the function constructs and checks the sentry object.
     * Then, initializes an automatic variable as if by std::string out =
       std::vformat(os.getloc(), fmt, args);.
     * Finally, inserts the character sequence [out.begin(), out.end()) into os, that
       is, if os refers to a terminal capable of displaying Unicode, writes out to this
       terminal using the native Unicode API. Otherwise, writes unmodified out to the
       os.

.SH Parameters

   os   - output stream to insert data into
          
          an object that represents the format string. The format string consists of
            * ordinary characters (except { and }), which are copied unchanged to the
              output,
            * escape sequences {{ and }}, which are replaced with { and } respectively
              in the output, and
            * replacement fields.

          Each replacement field has the following format:

          { arg-id (optional) }               \fB(1)\fP
          { arg-id (optional) : format-spec } \fB(2)\fP

          1) replacement field without a format specification
          2) replacement field with a format specification

                        specifies the index of the argument in args whose value is to
                        be used for formatting; if it is omitted, the arguments are
          arg-id      - used in order.

                        The arg-idâ€Šs in a format string must all be present or all be
   fmt  -               omitted. Mixing manual and automatic indexing is an error.
                        the format specification defined by the std::formatter
          format-spec - specialization for the corresponding argument. Cannot start
                        with }.

            * For basic types and standard string types, the format specification is
              interpreted as standard format specification.
            * For chrono types, the format specification is interpreted as chrono
              format specification.

            * For range types, the format specification is interpreted as
              range format specification.
            * For std::pair and std::tuple, the format specification is
              interpreted as tuple format specification.                  (since C++23)
            * For std::thread::id and std::stacktrace_entry, see thread
              id format specification and stacktrace entry format
              specification.
            * For std::basic_stacktrace, no format specifier is allowed.

            * For std::filesystem::path, see path format specification.   (since C++26)

            * For other formattable types, the format specification is determined by
              user-defined formatter specializations.
   args - arguments to be formatted

.SH Return value

   \fI(none)\fP

.SH Exceptions

     * std::bad_alloc on allocation failure.
     * Propagate any exception thrown by any formatter, e.g. std::format_error, without
       regard to the value of os.exceptions() and without turning on ios_base::badbit
       in the error state of os.
     * May throw ios_base::failure caused by os.setstate(ios_base::badbit) which is
       called if an insertion into os fails.

.SH Notes

   If invoking the native Unicode API requires transcoding, the invalid code units are
   substituted with U+FFFD REPLACEMENT CHARACTER (see "The Unicode Standard Version
   14.0 - Core Specification", Chapter 3.9).

   Feature-test macro  Value    Std                Feature
   __cpp_lib_print    202207L (C++23) Formatted output
   __cpp_lib_format   202207L (C++23) Exposing std::basic_format_string

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   vprint_nonunicode(std::ostream) outputs character data using type-erased argument
   (C++23)                         representation
                                   \fI(function)\fP 
   print(std::ostream)             outputs formatted representation of the arguments
   (C++23)                         \fI(function template)\fP 
   operator<<(std::basic_ostream)  inserts character data or insert into rvalue stream
                                   \fI(function template)\fP 
   vprint_unicode                  prints to Unicode capable stdout or a file stream
   vprint_unicode_locking          using type-erased argument representation
   (C++23)                         \fI(function)\fP 
   (C++23)
   format                          stores formatted representation of the arguments in
   (C++20)                         a new string
                                   \fI(function template)\fP 

.SH External links

   1.  Unicode
   2.  The Unicode Standard Version 14.0 - Core Specification

.SH Category:
     * Todo no example
