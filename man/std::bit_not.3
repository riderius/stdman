.TH std::bit_not 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::bit_not \- std::bit_not

.SH Synopsis
   Defined in header <functional>
   template< class T = void >      \fI(since C++14)\fP
   struct bit_not;

   Function object for performing bitwise NOT. Effectively calls operator~ on type T.

.SH Specializations

   The standard library provides a specialization of std::bit_not when T is not
   specified, which leaves the parameter types and return type to be deduced.

   bit_not<void> function object implementing ~x deducing parameter and return types
   \fI(C++14)\fP       \fI(class template specialization)\fP 

.SH Member types

   Type                                                  Definition
   result_type (deprecated in C++17)(removed in C++20)   T
   argument_type (deprecated in C++17)(removed in C++20) T

.SH Member functions

   operator() returns the result of bitwise NOT of its argument
   \fI(C++14)\fP    \fI(public member function)\fP

std::bit_not::operator()

   constexpr T operator()( const T& arg ) const;  \fI(since C++14)\fP

   Returns the result of bitwise NOT of arg.

.SH Parameters

   arg - value to compute bitwise NOT of

.SH Return value

   The result of ~arg.

.SH Exceptions

   May throw implementation-defined exceptions.

.SH Possible implementation

   constexpr T operator()(const T& arg) const
   {
       return ~arg;
   }

.SH Notes

   Although std::bit_not is added via post-C++11 proposal N3421, it is treated as a
   part of the resolution for LWG issue 660 (except for its transparent specialization
   std::bit_not<>) by common implementations, and thus available in their C++98/03
   mode.
