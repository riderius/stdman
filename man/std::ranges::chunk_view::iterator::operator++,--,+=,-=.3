.TH std::ranges::chunk_view::iterator::operator++,--,+=,-= 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::chunk_view::iterator::operator++,--,+=,-= \- std::ranges::chunk_view::iterator::operator++,--,+=,-=

.SH Synopsis
   constexpr /*iterator*/& operator++();                   \fB(1)\fP (since C++23)
   constexpr /*iterator*/ operator++( int );               \fB(2)\fP (since C++23)
   constexpr /*iterator*/& operator--()                    \fB(3)\fP (since C++23)
       requires ranges::bidirectional_range<Base>;
   constexpr /*iterator*/ operator--( int )                \fB(4)\fP (since C++23)
       requires ranges::bidirectional_range<Base>;
   constexpr /*iterator*/& operator+=( difference_type x ) \fB(5)\fP (since C++23)
       requires ranges::random_access_range<Base>;
   constexpr /*iterator*/& operator-=( difference_type x ) \fB(6)\fP (since C++23)
       requires ranges::random_access_range<Base>;

   Advances or decrements the iterator.

   Let current_, end_, and n_ be the underlying data members of chunk_view::iterator.

   1) Equivalent to:

 missing_ = ranges::advance(current_, n_, end_);
 return *this;

   Before the invocation the expression current_ != end_ must be true, otherwise the
   behavior is undefined.
   2) Equivalent to: auto tmp = *this; ++*this; return tmp;.
   3) Equivalent to:

 ranges::advance(current_, missing_ - n_);
 missing_ = 0;
 return *this;

   4) Equivalent to: auto tmp = *this; --*this; return tmp;.
   5) Equivalent to:

 if (x > 0)
 {
     ranges::advance(current_, n_ * (x - 1));
     missing_ = ranges::advance(current_, n_, end_);
 }
 else if (x < 0)
 {
     ranges::advance(current_, n_ * x + missing_);
     missing_ = 0;
 }
 return *this;

   If x is positive, then before the invocation the expression
   ranges::distance(current_, end_) > n_ * (x - 1) must be true (i.e., informally, the
   requested chunk should be "inside" the underlying sequence). If x is negative, this
   precondition is always met.
   6) Equivalent to: return *this += -x;.

.SH Parameters

   x - a position relative to current location

.SH Return value

   1,3,5,6) *this
   2,4) a copy of *this that was made before the change

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   operator+ performs iterator arithmetic
   operator- \fI(function)\fP
   (C++23)

.SH Category:
     * Todo no example
