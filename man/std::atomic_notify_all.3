.TH std::atomic_notify_all 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::atomic_notify_all \- std::atomic_notify_all

.SH Synopsis
   Defined in header <atomic>
   template< class T >                                        \fB(1)\fP \fI(since C++20)\fP
   void atomic_notify_all( std::atomic<T>* object );
   template< class T >                                        \fB(2)\fP \fI(since C++20)\fP
   void atomic_notify_all( volatile std::atomic<T>* object );

   Performs atomic notifying operations.

   Unblocks all threads blocked in atomic waiting operations (i.e. std::atomic_wait(),
   std::atomic_wait_explicit(), or std::atomic::wait()) on *object, if there are any;
   otherwise does nothing.

   Equivalent to object->notify_all().

.SH Parameters

   object - pointer to the atomic object to notify

.SH Return value

   \fI(none)\fP

.SH Notes

   This form of change-detection is often more efficient than simple polling or pure
   spinlocks.

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   notify_one           notifies at least one thread waiting on the atomic object
   (C++20)              \fI(public member function of std::atomic<T>)\fP 
   notify_all           notifies all threads blocked waiting on the atomic object
   (C++20)              \fI(public member function of std::atomic<T>)\fP 
   atomic_wait
   atomic_wait_explicit blocks the thread until notified and the atomic value changes
   (C++20)              \fI(function template)\fP 
   (C++20)
   atomic_notify_one    notifies a thread blocked in atomic_wait
   (C++20)              \fI(function template)\fP 

.SH Category:
     * Todo no example
