.TH std::map::find 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::map::find \- std::map::find

.SH Synopsis
   iterator find( const Key& key );             \fB(1)\fP
   const_iterator find( const Key& key ) const; \fB(2)\fP
   template< class K >                          \fB(3)\fP \fI(since C++14)\fP
   iterator find( const K& x );
   template< class K >                          \fB(4)\fP \fI(since C++14)\fP
   const_iterator find( const K& x ) const;

   1,2) Finds an element with key equivalent to key.
   3,4) Finds an element with key that compares equivalent to the value x. This
   overload participates in overload resolution only if the qualified-id
   Compare::is_transparent is valid and denotes a type. It allows calling this function
   without constructing an instance of Key.

.SH Parameters

   key - key value of the element to search for
   x   - a value of any type that can be transparently compared with a key

.SH Return value

   An iterator to the requested element. If no such element is found, past-the-end (see
   end()) iterator is returned.

.SH Complexity

   Logarithmic in the size of the container.

.SH Notes

            Feature-test macro           Value    Std               Feature
                                                        Heterogeneous comparison lookup
   __cpp_lib_generic_associative_lookup 201304L \fI(C++14)\fP in associative containers;
                                                        overloads (3,4)

.SH Example

   
// Run this code

 #include <iostream>
 #include <map>
  
 struct LightKey
 {
     int x;
 };
  
 struct FatKey
 {
     int x;
     int data[1000]; // a heavy blob
 };
  
 // As detailed above, the container must use std::less<> (or other transparent
 // Comparator) to access these overloads. This includes standard overloads,
 // such as comparison between std::string and std::string_view.
 bool operator<(const FatKey& fk, const LightKey& lk) { return fk.x < lk.x; }
 bool operator<(const LightKey& lk, const FatKey& fk) { return lk.x < fk.x; }
 bool operator<(const FatKey& fk1, const FatKey& fk2) { return fk1.x < fk2.x; }
  
 int main()
 {
     // Simple comparison demo.
     std::map<int, char> example{{1,'a'}, {2,'b'}};
  
     if (auto search = example.find(2); search != example.end())
         std::cout << "Found " << search->first << ' ' << search->second << '\\n';
     else
         std::cout << "Not found\\n";
  
     // Transparent comparison demo.
     std::map<FatKey, char, std::less<>> example2{{{1, {}}, 'a'}, {{2, {}}, 'b'}};
  
     LightKey lk = {2};
     if (auto search = example2.find(lk); search != example2.end())
         std::cout << "Found " << search->first.x << ' ' << search->second << '\\n';
     else
         std::cout << "Not found\\n";
  
     // Obtaining const iterators.
     // Compiler decides whether to return iterator of (non) const type by way of
     // accessing map; to prevent intentional modification, one of the simplest
     // options is to access the map via a constant reference.
     const auto& example2ref = example2;
     if (auto search = example2ref.find(lk); search != example2.end())
     {
         std::cout << "Found " << search->first.x << ' ' << search->second << '\\n';
     //  search->second = 'c'; // error: assignment of member
                               // 'std::pair<const FatKey, char>::second'
                               // in read-only object
     }
 }

.SH Output:

 Found 2 b
 Found 2 b
 Found 2 b

.SH See also

   count       returns the number of elements matching specific key
               \fI(public member function)\fP 
   equal_range returns range of elements matching a specific key
               \fI(public member function)\fP 
