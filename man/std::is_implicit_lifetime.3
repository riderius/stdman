.TH std::is_implicit_lifetime 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_implicit_lifetime \- std::is_implicit_lifetime

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              (since C++23)
   struct is_implicit_lifetime;

   std::is_implicit_lifetime is a UnaryTypeTrait.

   If T is an implicit-lifetime type, provides the member constant value equal to true.
   For any other type, value is false.

   The behavior is undefined if T is an incomplete type other than an array type or
   (possibly cv-qualified) void.

   If the program adds specializations for std::is_implicit_lifetime or
   std::is_implicit_lifetime_v, the behavior is undefined.

.SH Template parameters

   T - a type to check

   Helper variable template

   template< class T >
   inline constexpr bool is_implicit_lifetime_v =                         (since C++23)
   is_implicit_lifetime<T>::value;

   

Inherited from std::integral_constant

.SH Member constants

   value    true if T is an implicit-lifetime type, false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Notes

         Feature-test macro        Value    Std            Feature
   __cpp_lib_is_implicit_lifetime 202302L (C++23) std::is_implicit_lifetime

.SH Example

    This section is incomplete
    Reason: example

.SH See also

   is_scalar               checks if a type is a scalar type
   \fI(C++11)\fP                 \fI(class template)\fP 
   is_array                checks if a type is an array type
   \fI(C++11)\fP                 \fI(class template)\fP 
   is_aggregate            checks if a type is an aggregate type
   \fI(C++17)\fP                 \fI(class template)\fP 
   start_lifetime_as       implicitly creates objects in given storage with the object
   start_lifetime_as_array representation reused
   (C++23)                 \fI(function template)\fP 

.SH Category:
     * Todo with reason
