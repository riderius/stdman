.TH deductionguidesforstd::mdspan 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
deductionguidesforstd::mdspan \- deductionguidesforstd::mdspan

.SH Synopsis
   Defined in header <mdspan>
   template< class CArray >

       requires(std::is_array_v<CArray> && std::rank_v<CArray> == 1)            (since
       mdspan( CArray& )                                                    \fB(1)\fP C++23)
           -> mdspan<std::remove_all_extents_t<CArray>,

                     std::extents<std::size_t, std::extent_v<CArray, 0>>>;
   template< class Pointer >

       requires(std::is_pointer_v<std::remove_reference_t<Pointer>>)
       mdspan( Pointer&& )                                                  \fB(2)\fP (since
           ->                                                                   C++23)
   mdspan<std::remove_pointer_t<std::remove_reference_t<Pointer>>,

                     std::extents<size_t>>;
   template< class ElementType, class... Integrals >

       requires((std::is_convertible_v<Integrals, std::size_t> && ...) &&
                sizeof...(Integrals) > 0)                                   \fB(3)\fP (since
       explicit mdspan( ElementType*, Integrals... )                            C++23)

           -> mdspan<ElementType, std::dextents<std::size_t,
   sizeof...(Integrals)>>;
   template< class ElementType, class OtherIndexType, std::size_t N >
                                                                                (since
       mdspan( ElementType*, std::span<OtherIndexType, N> )                 \fB(4)\fP C++23)

           -> mdspan<ElementType, std::dextents<std::size_t, N>>;
   template< class ElementType, class OtherIndexType, std::size_t N >
                                                                                (since
       mdspan( ElementType*, const std::array<OtherIndexType, N>& )         \fB(5)\fP C++23)

           -> mdspan<ElementType, std::dextents<std::size_t, N>>;
   template< class ElementType, class IndexType, std::size_t... ExtentsPack
   >
                                                                                (since
       mdspan( ElementType*, const std::extents<IndexType, ExtentsPack...>& \fB(6)\fP C++23)
   )

           -> mdspan<ElementType, std::extents<IndexType, ExtentsPack...>>;
   template< class ElementType, class MappingType >

       mdspan( ElementType*, const MappingType& )                           \fB(7)\fP (since
           -> mdspan<ElementType, typename MappingType::extents_type,           C++23)

                     typename MappingType::layout_type>;
   template< class MappingType, class AccessorType >

       mdspan( const typename AccessorType::data_handle_type&, const
   MappingType&,                                                                (since
               const AccessorType& )                                        \fB(8)\fP C++23)
           -> mdspan<typename AccessorType::element_type,
                     typename MappingType::extents_type,

                     typename MappingType::layout_type, AccessorType>;

    This section is incomplete
    Reason: explanation

.SH Example

    This section is incomplete
    Reason: no example

.SH Categories:
     * Todo with reason
     * Todo no example
