.TH std::atomic::operator+=,-= 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::atomic::operator+=,-= \- std::atomic::operator+=,-=

.SH Synopsis
   member only of atomic<Integral > specializations
   and atomic<Floating > specializations
   \fI(since C++20)\fP
   T operator+=( T arg ) noexcept;                        \fB(1)\fP \fI(since C++11)\fP
   T operator+=( T arg ) volatile noexcept;               \fB(2)\fP \fI(since C++11)\fP
   T operator-=( T arg ) noexcept;                        \fB(3)\fP \fI(since C++11)\fP
   T operator-=( T arg ) volatile noexcept;               \fB(4)\fP \fI(since C++11)\fP
   member only of atomic<T*> partial specialization
   T* operator+=( std::ptrdiff_t arg ) noexcept;          \fB(5)\fP \fI(since C++11)\fP
   T* operator+=( std::ptrdiff_t arg ) volatile noexcept; \fB(6)\fP \fI(since C++11)\fP
   T* operator-=( std::ptrdiff_t arg ) noexcept;          \fB(7)\fP \fI(since C++11)\fP
   T* operator-=( std::ptrdiff_t arg ) volatile noexcept; \fB(8)\fP \fI(since C++11)\fP

   Atomically replaces the current value with the result of computation involving the
   previous value and arg. The operation is read-modify-write operation.

     * operator+= performs atomic addition. Equivalent to return fetch_add(arg) + arg;.
     * operator-= performs atomic subtraction. Equivalent to return fetch_sub(arg) -
       arg;.
   1-4) For signed integral types, arithmetic is defined to use two’s complement
   representation. There are no undefined results.

   For floating-point types, the floating-point environment in effect may
   be different from the calling thread's floating-point environment. The
   operation need not be conform to the corresponding std::numeric_limits \fI(since C++20)\fP
   traits but is encouraged to do so. If the result is not a
   representable value for its type, the result is unspecified but the
   operation otherwise has no undefined behavior.

   5-8) The result may be an undefined address, but the operations otherwise have no
   undefined behavior.
   If T is not a complete object type, the program is ill-formed.

   It is deprecated if std::atomic<T>::is_always_lock_free is false and   \fI(since C++20)\fP
   any volatile overload participates in overload resolution.

.SH Parameters

   arg - the argument for the arithmetic operation

.SH Return value

   The resulting value (that is, the result of applying the corresponding binary
   operator to the value immediately preceding the effects of the corresponding member
   function in the modification order of *this).

.SH Notes

   Unlike most compound assignment operators, the compound assignment operators for
   atomic types do not return a reference to their left-hand arguments. They return a
   copy of the stored value instead.

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

     DR    Applied to              Behavior as published               Correct behavior
   P0558R1 C++11      arithmetic permitted on pointers to (possibly    made ill-formed
                      cv-qualified) void or function

.SH See also

                   atomically adds the argument to the value stored in the atomic
   fetch_add       object and obtains the value held previously
                   \fI(public member function)\fP 
                   atomically subtracts the argument from the value stored in the
   fetch_sub       atomic object and obtains the value held previously
                   \fI(public member function)\fP 
   operator++
   operator++(int) increments or decrements the atomic value by one
   operator--      \fI(public member function)\fP 
   operator--(int)
   operator&=      performs bitwise AND, OR, XOR with the atomic value
   operator|=      \fI(public member function)\fP 
   operator^=
