.TH std::experimental::is_simd_flag_type 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::is_simd_flag_type \- std::experimental::is_simd_flag_type

.SH Synopsis
   Defined in header <experimental/simd>
   template< class T >                    (parallelism TS v2)
   struct is_simd_flag_type;

   If T is a valid type for the second argument to copy_from, copy_to or the
   corresponding load constructors of simd or simd_mask, provides the member constant
   value equal true. For any other type, value is false.

.SH Template parameters

   T - a type to check

   Helper variable template

   template< class T >
   inline constexpr bool is_simd_flag_type_v =                      (parallelism TS v2)
   is_simd_flag_type<T>::value;

   

Inherited from std::integral_constant

.SH Member constants

   value    true if T is a load/store flag tag type, false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Example

   
// Run this code

 #include <experimental/simd>
 #include <iostream>
  
 int main()
 {
     namespace stdx = std::experimental;
     std::cout << std::boolalpha
               << stdx::is_simd_flag_type_v<stdx::element_aligned_tag> << '\\n'
               << stdx::is_simd_flag_type_v<int> << '\\n';
 }

.SH Output:

 true
 false

.SH See also

   is_abi_tag          checks if a type is an ABI tag type
   (parallelism TS v2) \fI(class template)\fP 
