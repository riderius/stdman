.TH std::flat_multimap::erase 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::flat_multimap::erase \- std::flat_multimap::erase

.SH Synopsis
   iterator erase( iterator position );                         \fB(1)\fP (since C++23)
   iterator erase( const_iterator pos );                        \fB(2)\fP (since C++23)
   iterator erase( const_iterator first, const_iterator last ); \fB(3)\fP (since C++23)
   size_type erase( const Key& key );                           \fB(4)\fP (since C++23)
   template< class K >                                          \fB(5)\fP (since C++23)
   size_type erase( K&& x );

   Removes specified elements from the container. The order of the remaining equivalent
   elements is preserved.

   1,2) Removes the element at pos.
   3) Removes the elements in the range [first, last), which must be a valid range in
   *this.
   4) Removes all elements with the key equivalent to key.
   5) Removes all elements with key that compares equivalent to the value x. This
   overload participates in overload resolution only if the qualified-id
   Compare::is_transparent is valid and denotes a type, and neither iterator nor
   const_iterator is implicitly convertible from K. It allows calling this function
   without constructing an instance of Key.

    Information on iterator invalidation is copied from here

   The iterator pos must be valid and dereferenceable. Thus the end() iterator (which
   is valid, but is not dereferenceable) cannot be used as a value for pos.

.SH Parameters

   pos         - iterator to the element to remove
   first, last - range of elements to remove
   key         - key value of the elements to remove
   x           - a value of any type that can be transparently compared with a key
                 denoting the elements to remove

.SH Return value

   1-3) Iterator following the last removed element.
   4) Number of elements removed.
   5) Number of elements removed.

.SH Exceptions

   1-3) Throws nothing.
   4,5) Any exceptions thrown by the Compare object.

.SH Complexity

   Depends on underlying containers. Typically linear.

    This section is incomplete
    Reason: revision required

.SH Example

   
// Run this code

 #include <flat_map>
 #include <iostream>
  
 int main()
 {
     std::flat_multimap<int, std::string> c =
     {
         {1, "one"}, {2, "two"}, {3, "three"},
         {4, "four"}, {5, "five"}, {6, "six"}
     };
  
     // erase all odd numbers from c
     for (auto it = c.begin(); it != c.end();)
     {
         if (it->first % 2 != 0)
             it = c.erase(it);
         else
             ++it;
     }
  
     for (auto& p : c)
         std::cout << p.second << ' ';
     std::cout << '\\n';
 }

.SH Output:

 two four six

.SH See also

   clear clears the contents
         \fI(public member function)\fP 

.SH Category:
     * Todo with reason
