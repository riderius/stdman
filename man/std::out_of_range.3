.TH std::out_of_range 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::out_of_range \- std::out_of_range

.SH Synopsis
   Defined in header <stdexcept>
   class out_of_range;

   Defines a type of object to be thrown as exception. It reports errors that are
   consequence of attempt to access elements out of defined range.

   It may be thrown by the member functions of std::bitset and std::basic_string, by
   std::stoi and std::stod families of functions, and by the bounds-checked member
   access functions (e.g. std::vector::at and std::map::at).

   std-out of range-inheritance.svg

                                   Inheritance diagram

.SH Member functions

   constructor   constructs a new out_of_range object with the given message
                 \fI(public member function)\fP
   operator=     replaces the out_of_range object
                 \fI(public member function)\fP

std::out_of_range::out_of_range

   out_of_range( const std::string& what_arg ); \fB(1)\fP
   out_of_range( const char* what_arg );        \fB(2)\fP
   out_of_range( const out_of_range& other );   \fB(3)\fP (noexcept since C++11)

   1) Constructs the exception object with what_arg as explanatory string. After
   construction, std::strcmp(what(), what_arg.c_str()) == 0.
   2) Constructs the exception object with what_arg as explanatory string. After
   construction, std::strcmp(what(), what_arg) == 0.
   3) Copy constructor. If *this and other both have dynamic type std::out_of_range
   then std::strcmp(what(), other.what()) == 0. No exception can be thrown from the
   copy constructor.

.SH Parameters

   what_arg - explanatory string
   other    - another exception object to copy

.SH Exceptions

   1,2) May throw std::bad_alloc.

.SH Notes

   Because copying std::out_of_range is not permitted to throw exceptions, this message
   is typically stored internally as a separately-allocated reference-counted string.
   This is also why there is no constructor taking std::string&&: it would have to copy
   the content anyway.

   Before the resolution of LWG issue 254, the non-copy constructor can only accept
   std::string. It makes dynamic allocation mandatory in order to construct a
   std::string object.

   After the resolution of LWG issue 471, a derived standard exception class must have
   a publicly accessible copy constructor. It can be implicitly defined as long as the
   explanatory strings obtained by what() are the same for the original object and the
   copied object.

std::out_of_range::operator=

   out_of_range& operator=( const out_of_range& other );  (noexcept since C++11)

   Assigns the contents with those of other. If *this and other both have dynamic type
   std::out_of_range then std::strcmp(what(), other.what()) == 0 after assignment. No
   exception can be thrown from the copy assignment operator.

.SH Parameters

   other - another exception object to assign with

.SH Return value

   *this

.SH Notes

   After the resolution of LWG issue 471, a derived standard exception class must have
   a publicly accessible copy assignment operator. It can be implicitly defined as long
   as the explanatory strings obtained by what() are the same for the original object
   and the copied object.

Inherited from std::logic_error

Inherited from std::exception

.SH Member functions

   destructor   destroys the exception object
   \fB[virtual]\fP    \fI(virtual public member function of std::exception)\fP 
   what         returns an explanatory string
   \fB[virtual]\fP    \fI(virtual public member function of std::exception)\fP 

.SH Notes

   The standard error condition std::errc::result_out_of_range typically indicates the
   condition where the result, rather than the input, is out of range, and is more
   closely related to std::range_error and ERANGE.

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

     DR    Applied to         Behavior as published               Correct behavior
   LWG 254 C++98      the constructor accepting const char*  added
                      was missing
                      the explanatory strings of             they are the same as that
   LWG 471 C++98      std::out_of_range's                    of the
                      copies were implementation-defined     original std::out_of_range
                                                             object

.SH See also

   at      accesses the specified character with bounds checking
           \fI(public member function of std::basic_string<CharT,Traits,Allocator>)\fP 
   at      accesses the specified character with bounds checking
           \fI(public member function of std::basic_string_view<CharT,Traits>)\fP 
   at      access specified element with bounds checking
           \fI(public member function of std::deque<T,Allocator>)\fP 
   at      access specified element with bounds checking
           \fI(public member function of std::map<Key,T,Compare,Allocator>)\fP 
           access specified element with bounds checking
   at      \fI\fI(public member\fP function of\fP
           std::unordered_map<Key,T,Hash,KeyEqual,Allocator>) 
   at      access specified element with bounds checking
           \fI(public member function of std::vector<T,Allocator>)\fP 
   at      access specified element with bounds checking
           \fI(public member function of std::array<T,N>)\fP 
   at      access specified element with bounds checking
   (C++26) \fI(public member function of std::span<T,Extent>)\fP 
