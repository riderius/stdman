.TH std::isfinite 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::isfinite \- std::isfinite

.SH Synopsis
   Defined in header <cmath>
   bool isfinite( float num );
                                                                \fI(since C++11)\fP
   bool isfinite( double num );                                 (until C++23)

   bool isfinite( long double num );
   constexpr bool isfinite( /* floating-point-type */   \fB(1)\fP     (since C++23)
   num );
   Additional overloads
   Defined in header <cmath>
   template< class Integer >                                (A) \fI(since C++11)\fP
   bool isfinite( Integer num );                                (constexpr since C++23)

   1) Determines if the given floating point number num has finite value i.e. it is
   normal, subnormal or zero, but not infinite or NaN.
   The library provides overloads for all cv-unqualified floating-point types as the
   type of the parameter num.
   (since C++23)
   A) Additional overloads are provided for all integer types, which are treated as
   double.

.SH Parameters

   num - floating-point or integer value

.SH Return value

   true if num has finite value, false otherwise.

.SH Notes

   The additional overloads are not required to be provided exactly as (A). They only
   need to be sufficient to ensure that for their argument num of integer type,
   std::isfinite(num) has the same effect as std::isfinite(static_cast<double>(num)).

.SH Examples

   
// Run this code

 #include <cfloat>
 #include <cmath>
 #include <iostream>
  
 int main()
 {
     std::cout << std::boolalpha
               << "isfinite(NaN) = " << std::isfinite(NAN) << '\\n'
               << "isfinite(Inf) = " << std::isfinite(INFINITY) << '\\n'
               << "isfinite(-Inf) = " << std::isfinite(-INFINITY) << '\\n'
               << "isfinite(HUGE_VAL) = " << std::isfinite(HUGE_VAL) << '\\n'
               << "isfinite(0.0) = " << std::isfinite(0.0) << '\\n'
               << "isfinite(exp(800)) = " << std::isfinite(std::exp(800)) << '\\n'
               << "isfinite(DBL_MIN/2.0) = " << std::isfinite(DBL_MIN / 2.0) << '\\n';
 }

.SH Output:

 isfinite(NaN) = false
 isfinite(Inf) = false
 isfinite(-Inf) = false
 isfinite(HUGE_VAL) = false
 isfinite(0.0) = true
 isfinite(exp(800)) = false
 isfinite(DBL_MIN/2.0) = true

.SH See also

   fpclassify categorizes the given floating-point value
   \fI(C++11)\fP    \fI(function)\fP 
   isinf      checks if the given number is infinite
   \fI(C++11)\fP    \fI(function)\fP 
   isnan      checks if the given number is NaN
   \fI(C++11)\fP    \fI(function)\fP 
   isnormal   checks if the given number is normal
   \fI(C++11)\fP    \fI(function)\fP 
   C documentation for
   isfinite
