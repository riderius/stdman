.TH std::bad_function_call 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::bad_function_call \- std::bad_function_call

.SH Synopsis
   Defined in header <functional>
   class bad_function_call;        \fI(since C++11)\fP

   std::bad_function_call is the type of the exception thrown by
   std::function::operator() if the function wrapper has no target.

   std-bad function call-inheritance.svg

                                   Inheritance diagram

.SH Member functions

   constructor   constructs a new bad_function_call object
                 \fI(public member function)\fP
   operator=     replaces the bad_function_call object
                 \fI(public member function)\fP
   what          returns the explanatory string
                 \fI(public member function)\fP

std::bad_function_call::bad_function_call

   bad_function_call() noexcept;                                 \fB(1)\fP \fI(since C++11)\fP
   bad_function_call( const bad_function_call& other ) noexcept; \fB(2)\fP \fI(since C++11)\fP

   Constructs a new bad_function_call object with an implementation-defined
   null-terminated byte string which is accessible through what().

   1) Default constructor.
   2) Copy constructor. If *this and other both have dynamic type
   std::bad_function_call then std::strcmp(what(), other.what()) == 0.

.SH Parameters

   other - another exception object to copy

std::bad_function_call::operator=

   bad_function_call& operator=( const bad_function_call& other )         \fI(since C++11)\fP
   noexcept;

   Assigns the contents with those of other. If *this and other both have dynamic type
   std::bad_function_call then std::strcmp(what(), other.what()) == 0 after assignment.

.SH Parameters

   other - another exception object to assign with

.SH Return value

   *this

std::bad_function_call::what

   virtual const char* what() const noexcept;  \fI(since C++11)\fP

   Returns the explanatory string.

.SH Parameters

   \fI(none)\fP

.SH Return value

   Pointer to a null-terminated string with explanatory information. The string is
   suitable for conversion and display as a std::wstring. The pointer is guaranteed to
   be valid at least until the exception object from which it is obtained is destroyed,
   or until a non-const member function (e.g. copy assignment operator) on the
   exception object is called.

.SH Notes

   Implementations are allowed but not required to override what().

Inherited from std::exception

.SH Member functions

   destructor   destroys the exception object
   \fB[virtual]\fP    \fI(virtual public member function of std::exception)\fP 
   what         returns an explanatory string
   \fB[virtual]\fP    \fI(virtual public member function of std::exception)\fP 

.SH Example

   
// Run this code

 #include <functional>
 #include <iostream>
  
 int main()
 {
     std::function<int()> f = nullptr;
     try
     {
         f();
     }
     catch (const std::bad_function_call& e)
     {
         std::cout << e.what() << '\\n';
     }
 }

.SH Possible output:

 bad function call

.SH See also

   function wraps callable object of any copy constructible type with specified
   \fI(C++11)\fP  function call signature
            \fI(class template)\fP 
