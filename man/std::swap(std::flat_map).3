.TH std::swap(std::flat_map) 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::swap(std::flat_map) \- std::swap(std::flat_map)

.SH Synopsis
   Defined in header <flat_map>
   friend void swap( std::flat_map& lhs, std::flat_map& rhs ) noexcept;  (since C++23)

   Specializes the std::swap algorithm for std::flat_map. Swaps the contents of lhs and
   rhs. Calls lhs.swap(rhs).

.SH Parameters

   lhs, rhs - containers whose contents to swap

.SH Return value

   \fI(none)\fP

.SH Complexity

   Same as swapping the underlying containers.

.SH Example

   
// Run this code

 #include <algorithm>
 #include <iostream>
 #include <flat_map>
  
 int main()
 {
     std::flat_map<int, char> alice{{1, 'a'}, {2, 'b'}, {3, 'c'}};
     std::flat_map<int, char> bob{{7, 'Z'}, {8, 'Y'}, {9, 'X'}, {10, 'W'}};
  
     auto print = [](std::pair<const int, char>& n)
     {
         std::cout << ' ' << n.first << ':' << n.second;
     };
  
     // Print state before swap
     std::cout << "Alice:";
     std::for_each(alice.begin(), alice.end(), print);
     std::cout << "\\n" "Bob  :";
     std::for_each(bob.begin(), bob.end(), print);
     std::cout << '\\n';
  
     std::cout << "-- SWAP\\n";
     std::swap(alice, bob);
  
     // Print state after swap
     std::cout << "Alice:";
     std::for_each(alice.begin(), alice.end(), print);
     std::cout << "\\n" "Bob  :";
     std::for_each(bob.begin(), bob.end(), print);
     std::cout << '\\n';
 }

.SH Output:

 Alice: 1:a 2:b 3:c
 Bob  : 7:Z 8:Y 9:X 10:W
 -- SWAP
 Alice: 7:Z 8:Y 9:X 10:W
 Bob  : 1:a 2:b 3:c

.SH See also

   swap swaps the contents
        \fI(public member function)\fP 
