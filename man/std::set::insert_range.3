.TH std::set::insert_range 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::set::insert_range \- std::set::insert_range

.SH Synopsis
   template< container-compatible-range<value_type> R >  (since C++23)
   void insert_range( R&& rg );

   Inserts a copy of each element in the range rg if and only if there is no element
   with key equivalent to the key of that element in *this.

   Each iterator in the range rg is dereferenced exactly once. The behavior is
   undefined if rg overlaps with the container.

   No iterators or references are invalidated.

.SH Parameters

   rg        -        a container compatible range, that is, an input_range whose
                      elements are convertible to T
.SH Type requirements
   -
   value_type must be EmplaceConstructible into set from *ranges::begin(rg). Otherwise,
   the behavior is undefined.

.SH Return value

   \fI(none)\fP

.SH Complexity

   NÂ·log(a.size() + N), where N is ranges::distance(rg).

.SH Notes

       Feature-test macro       Value    Std                   Feature
   __cpp_lib_containers_ranges 202202L (C++23) Ranges-aware construction and insertion

.SH Example

   
// Run this code

 #include <iostream>
 #include <set>
  
 void println(auto, auto const& container)
 {
     for (const auto& elem : container)
         std::cout << elem << ' ';
     std::cout << '\\n';
 }
  
 int main()
 {
     auto container = std::set{1, 3, 2, 4};
     const auto rg = {-1, 3, -2};
 #ifdef __cpp_lib_containers_ranges
     container.insert_range(rg);
 #else
     container.insert(rg.begin(), rg.end());
 #endif
     println("{}", container);
 }

.SH Output:

 -2 -1 1 2 3 4

.SH See also

          inserts elements
   insert or nodes
          \fI(since C++17)\fP
          \fI(public member function)\fP 
