.TH iter_move(std::move_iterator) 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
iter_move(std::move_iterator) \- iter_move(std::move_iterator)

.SH Synopsis
   friend constexpr std::iter_rvalue_reference_t<Iter>
       iter_move( const std::move_iterator& i ) noexcept(/* see below     \fI(since C++20)\fP
   */);

   Casts the result of dereferencing the underlying iterator to its associated rvalue
   reference type.

   The function body is equivalent to: return std::ranges::iter_move(i.base());.

   This function template is not visible to ordinary unqualified or qualified lookup,
   and can only be found by argument-dependent lookup when std::move_iterator<Iter> is
   an associated class of the arguments.

.SH Parameters

   i - a source move iterator

.SH Return value

   An rvalue reference or a prvalue temporary.

.SH Complexity

   Constant.

.SH Exceptions

   noexcept specification:  
   noexcept(noexcept(ranges::iter_move(i.base())))

.SH Example

   
// Run this code

 #include <iomanip>
 #include <iostream>
 #include <iterator>
 #include <string>
 #include <vector>
  
 void print(auto const& rem, auto const& v)
 {
     std::cout << rem << '[' << size(v) << "] { ";
     for (char comma[]{0, ' ', 0}; auto const& s : v)
         std::cout << comma << std::quoted(s), comma[0] = ',';
     std::cout << " }\\n";
 }
  
 int main()
 {
     std::vector<std::string> p{"Andromeda", "Cassiopeia", "Phoenix"}, q;
  
     print("p", p), print("q", q);
  
     using MI = std::move_iterator<std::vector<std::string>::iterator>;
  
     for (MI first{p.begin()}, last{p.end()}; first != last; ++first)
         q.emplace_back(/* ADL */ iter_move(first));
  
     print("p", p), print("q", q);
 }

.SH Possible output:

 p[3] { "Andromeda", "Cassiopeia", "Phoenix" }
 q[0] {  }
 p[3] { "", "", "" }
 q[3] { "Andromeda", "Cassiopeia", "Phoenix" }

.SH See also

   iter_move             casts the result of dereferencing an object to its associated
   (C++20)               rvalue reference type
                         (customization point object)
   iter_move             casts the result of dereferencing the adjusted underlying
   (C++20)               iterator to its associated rvalue reference type
                         \fI(function)\fP 
   move                  obtains an rvalue reference
   \fI(C++11)\fP               \fI(function template)\fP 
   move_if_noexcept      obtains an rvalue reference if the move constructor does not
   \fI(C++11)\fP               throw
                         \fI(function template)\fP 
   forward               forwards a function argument
   \fI(C++11)\fP               \fI(function template)\fP 
   ranges::move          moves a range of elements to a new location
   (C++20)               (niebloid)
   ranges::move_backward moves a range of elements to a new location in backwards order
   (C++20)               (niebloid)

.SH Category:
     * conditionally noexcept
