.TH std::is_aggregate 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_aggregate \- std::is_aggregate

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++17)\fP
   struct is_aggregate;

   std::is_aggregate is a UnaryTypeTrait.

   If T is an aggregate type, provides the member constant value equal true. For any
   other type, value is false.

   If T is an incomplete type other than an array type or (possibly cv-qualified) void,
   the behavior is undefined.

   If the program adds specializations for std::is_aggregate or std::is_aggregate_v,
   the behavior is undefined.

.SH Template parameters

   T - a type to check

   Helper variable template

   template< class T >                                             \fI(since C++17)\fP
   inline constexpr bool is_aggregate_v = is_aggregate<T>::value;

   

Inherited from std::integral_constant

.SH Member constants

   value    true if T is an aggregate type, false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Notes

     Feature-test macro    Value    Std       Feature
   __cpp_lib_is_aggregate 201703L \fI(C++17)\fP std::is_agregate

.SH Example

   
// Run this code

 #include <new>
 #include <type_traits>
 #include <utility>
  
 // constructs a T at the uninitialized memory pointed to by p using
 // list-initialization for aggregates and non-list initialization otherwise
 template<class T, class... Args>
 T* construct(T* p, Args&&... args)
 {
     if constexpr (std::is_aggregate_v<T>)
         return ::new (static_cast<void*>(p)) T{std::forward<Args>(args)...};
     else
         return ::new (static_cast<void*>(p)) T(std::forward<Args>(args)...);
 }
  
 struct A { int x, y; };
 struct B { B(int, const char*) {} };
  
 int main()
 {
     std::aligned_union_t<1, A, B> storage;
     [[maybe_unused]] A* a = construct(reinterpret_cast<A*>(&storage), 1, 2);
     [[maybe_unused]] B* b = construct(reinterpret_cast<B*>(&storage), 1, "hello");
 }

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

    DR   Applied         Behavior as published                 Correct behavior
           to
                 The behavior is undefined if T is an   The behavior is defined
   LWG           array type but                         regardless of the
   3823  C++17   std::remove_all_extents_t<T> is an     incompleteness of
                 incomplete type.                       std::remove_all_extents_t<T>
                                                        as long as T is an array type.
