.TH std::make_signed 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::make_signed \- std::make_signed

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct make_signed;

   If T is an integral (except bool) or enumeration type, provides the member typedef
   type which is the signed integer type corresponding to T, with the same
   cv-qualifiers.

   If T is signed or unsigned char, short, int, long, long long, the signed type from
   this list corresponding to T is provided.

   If T is an enumeration type or char, wchar_t
   , char8_t
   \fI(since C++20)\fP, char16_t, char32_t, the signed integer type with the smallest rank
   having the same sizeof as T is provided.

   Otherwise, the behavior is undefined. \fI(until C++20)\fP
   Otherwise, the program is ill-formed. \fI(since C++20)\fP

   If the program adds specializations for std::make_signed, the behavior is undefined.

.SH Member types

   Name Definition
   type the signed integer type corresponding to T

.SH Helper types

   template< class T >                                   \fI(since C++14)\fP
   using make_signed_t = typename make_signed<T>::type;

.SH Example

   
// Run this code

 #include <type_traits>
  
 enum struct E : unsigned short {};
  
 int main()
 {
     using char_type = std::make_signed_t<unsigned char>;
     using int_type  = std::make_signed_t<unsigned int>;
     using long_type = std::make_signed_t<volatile unsigned long>;
     using enum_type = std::make_signed_t<E>;
  
     static_assert(
         std::is_same_v<char_type, signed char> and
         std::is_same_v<int_type, signed int> and
         std::is_same_v<long_type, volatile signed long> and
         std::is_same_v<enum_type, signed short>
     );
 }

.SH See also

   is_signed     checks if a type is a signed arithmetic type
   \fI(C++11)\fP       \fI(class template)\fP 
   is_unsigned   checks if a type is an unsigned arithmetic type
   \fI(C++11)\fP       \fI(class template)\fP 
   make_unsigned makes the given integral type unsigned
   \fI(C++11)\fP       \fI(class template)\fP 
