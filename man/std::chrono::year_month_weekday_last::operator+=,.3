.TH std::chrono::year_month_weekday_last::operator+=, 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::chrono::year_month_weekday_last::operator+=, \- std::chrono::year_month_weekday_last::operator+=,

.SH Synopsis

   constexpr std::chrono::year_month_weekday_last&                 \fB(1)\fP \fI(since C++20)\fP
       operator+=( const std::chrono::years& dy ) const noexcept;
   constexpr std::chrono::year_month_weekday_last&                 \fB(2)\fP \fI(since C++20)\fP
       operator+=( const std::chrono::months& dm ) const noexcept;
   constexpr std::chrono::year_month_weekday_last&                 \fB(3)\fP \fI(since C++20)\fP
       operator-=( const std::chrono::years& dy ) const noexcept;
   constexpr std::chrono::year_month_weekday_last&                 \fB(4)\fP \fI(since C++20)\fP
       operator-=( const std::chrono::months& dm ) const noexcept;

   Modifies the time point *this represents by the duration dy or dm.

   1) Equivalent to *this = *this + dy;.
   2) Equivalent to *this = *this + dm;.
   3) Equivalent to *this = *this - dy;.
   4) Equivalent to *this = *this - dm;.

   For durations that are convertible to both std::chrono::years and
   std::chrono::months, the years overloads (1,3) are preferred if the call would
   otherwise be ambiguous.

.SH Example

   
// Run this code

 #include <chrono>
 #include <iostream>
 using namespace std::chrono;
  
 int main()
 {
     auto ymwdl{August/Friday[last]/2022};
     std::cout << year_month_day{ymwdl} << '\\n';
     ymwdl += months(2);
     std::cout << year_month_day{ymwdl} << '\\n';
     ymwdl -= years(1);
     std::cout << year_month_day{ymwdl} << '\\n';
 }

.SH Output:

 2022-08-26
 2022-10-28
 2021-10-29

.SH See also

   operator+ adds or subtracts a year_month_weekday_last and some number of years or
   operator- months
   (C++20)   \fI(function)\fP 
