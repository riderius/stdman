.TH std::list::rend,std::list::crend 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::list::rend,std::list::crend \- std::list::rend,std::list::crend

.SH Synopsis
   reverse_iterator rend();                       \fB(1)\fP (noexcept since C++11)
   const_reverse_iterator rend() const;           \fB(2)\fP (noexcept since C++11)
   const_reverse_iterator crend() const noexcept; \fB(3)\fP \fI(since C++11)\fP

   Returns a reverse iterator to the element following the last element of the reversed
   list. It corresponds to the element preceding the first element of the non-reversed
   list. This element acts as a placeholder, attempting to access it results in
   undefined behavior.

   range-rbegin-rend.svg

.SH Parameters

   \fI(none)\fP

.SH Return value

   Reverse iterator to the element following the last element.

.SH Complexity

   Constant.

.SH Notes

   libc++ backports crend() to C++98 mode.

.SH Example

   
// Run this code

 #include <algorithm>
 #include <iostream>
 #include <numeric>
 #include <string>
 #include <list>
  
 int main()
 {
     std::list<int> nums{1, 2, 4, 8, 16};
     std::list<std::string> fruits{"orange", "apple", "raspberry"};
     std::list<char> empty;
  
     // Print list.
     std::for_each(nums.rbegin(), nums.rend(), [](const int n) { std::cout << n << ' '; });
     std::cout << '\\n';
  
     // Sums all integers in the list nums (if any), printing only the result.
     std::cout << "Sum of nums: "
               << std::accumulate(nums.rbegin(), nums.rend(), 0) << '\\n';
  
     // Prints the first fruit in the list fruits, checking if there is any.
     if (!fruits.empty())
         std::cout << "First fruit: " << *fruits.rbegin() << '\\n';
  
     if (empty.rbegin() == empty.rend())
         std::cout << "list 'empty' is indeed empty.\\n";
 }

.SH Output:

 16 8 4 2 1
 Sum of nums: 31
 First fruit: raspberry
 list 'empty' is indeed empty.

.SH See also

   rbegin  returns a reverse iterator to the beginning
   crbegin \fI(public member function)\fP 
   \fI(C++11)\fP
   rend    returns a reverse end iterator for a container or array
   crend   \fI(function template)\fP 
   \fI(C++14)\fP
