.TH std::regex_constants::syntax_option_type 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::regex_constants::syntax_option_type \- std::regex_constants::syntax_option_type

.SH Synopsis
   Defined in header <regex>
   using syntax_option_type = /* implementation-defined \fB(1)\fP \fI(since C++11)\fP
   */;
   constexpr syntax_option_type icase      = /*
   unspecified */;

   constexpr syntax_option_type nosubs     = /*
   unspecified */;
   constexpr syntax_option_type optimize   = /*
   unspecified */;
   constexpr syntax_option_type collate    = /*
   unspecified */;
   constexpr syntax_option_type ECMAScript = /*
   unspecified */;                                                        \fI(since C++11)\fP
   constexpr syntax_option_type basic      = /*                           \fI(until C++17)\fP
   unspecified */;
   constexpr syntax_option_type extended   = /*
   unspecified */;
   constexpr syntax_option_type awk        = /*
   unspecified */;
   constexpr syntax_option_type grep       = /*
   unspecified */;

   constexpr syntax_option_type egrep      = /*
   unspecified */;
   inline constexpr syntax_option_type icase      = /*  \fB(2)\fP
   unspecified */;

   inline constexpr syntax_option_type nosubs     = /*
   unspecified */;
   inline constexpr syntax_option_type optimize   = /*
   unspecified */;
   inline constexpr syntax_option_type collate    = /*
   unspecified */;
   inline constexpr syntax_option_type ECMAScript = /*
   unspecified */;                                                        \fI(since C++17)\fP
   inline constexpr syntax_option_type basic      = /*
   unspecified */;
   inline constexpr syntax_option_type extended   = /*
   unspecified */;
   inline constexpr syntax_option_type awk        = /*
   unspecified */;
   inline constexpr syntax_option_type grep       = /*
   unspecified */;

   inline constexpr syntax_option_type egrep      = /*
   unspecified */;
   inline constexpr syntax_option_type multiline  = /*      \fB(3)\fP           \fI(since C++17)\fP
   unspecified */;

   1) The syntax_option_type is a BitmaskType that contains options that govern how
   regular expressions behave.
   2,3) The possible values (icase, optimize, etc.) for type \fB(1)\fP are duplicated inside
   std::basic_regex.

.SH Constants

   Grammar option    Effect(s)
   ECMAScript        Use the Modified ECMAScript regular expression grammar.
   basic             Use the basic POSIX regular expression grammar (grammar
                     documentation).
   extended          Use the extended POSIX regular expression grammar (grammar
                     documentation).
   awk               Use the regular expression grammar used by the awk utility in
                     POSIX (grammar documentation).
                     Use the regular expression grammar used by the grep utility in
   grep              POSIX. This is effectively the same as the basic option with the
                     addition of newline '\\n' as an alternation separator.
                     Use the regular expression grammar used by the grep utility, with
   egrep             the -E option, in POSIX. This is effectively the same as the
                     extended option with the addition of newline '\\n' as an
                     alternation separator in addition to '|'.
   Grammar variation Effect(s)
   icase             Character matching should be performed without regard to case.
                     When performing matches, all marked sub-expressions (expr) are
   nosubs            treated as non-marking sub-expressions (?:expr). No matches are
                     stored in the supplied std::regex_match structure and mark_count()
                     is zero.
                     Instructs the regular expression engine to make matching faster,
   optimize          with the potential cost of making construction slower. For
                     example, this might mean converting a non-deterministic FSA to a
                     deterministic FSA.
   collate           Character ranges of the form "[a-b]" will be locale sensitive.
   multiline \fI(C++17)\fP Specifies that ^ shall match the beginning of a line and $ shall
                     match the end of a line, if the ECMAScript engine is selected.

   At most one grammar option can be chosen out of ECMAScript, basic, extended, awk,
   grep, egrep. If no grammar is chosen, ECMAScript is assumed to be selected. The
   other options serve as variations, such that std::regex("meow", std::regex::icase)
   is equivalent to std::regex("meow", std::regex::ECMAScript|std::regex::icase).

.SH Notes

   Because POSIX uses "leftmost longest" matching rule (the longest matching
   subsequence is matched, and if there are several such subsequences, the first one is
   matched), it is not suitable, for example, for parsing markup languages: a POSIX
   regex such as "<tag[^>]*>.*</tag>" would match everything from the first "<tag" to
   the last "</tag>", including every "</tag>" and "<tag>" in-between. On the other
   hand, ECMAScript supports non-greedy matches, and the ECMAScript regex
   "<tag[^>]*>.*?</tag>" would match only until the first closing tag.

.SH Example

   Illustrates the difference in the matching algorithm between ECMAScript and POSIX
   regular expressions:

   
// Run this code

 #include <iostream>
 #include <regex>
 #include <string>
  
 int main()
 {
     std::string str = "zzxayyzz";
     std::regex re1(".*(a|xayy)"); // ECMA
     std::regex re2(".*(a|xayy)", std::regex::extended); // POSIX
  
     std::cout << "Searching for .*(a|xayy) in zzxayyzz:\\n";
     std::smatch m;
     std::regex_search(str, m, re1);
     std::cout << "  ECMA (depth first search) match: " << m[0] << '\\n';
     std::regex_search(str, m, re2);
     std::cout << "  POSIX (leftmost longest)  match: " << m[0] << '\\n';
 }

.SH Output:

 Searching for .*(a|xayy) in zzxayyzz:
   ECMA (depth first search) match: zzxa
   POSIX (leftmost longest)  match: zzxayy

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to       Behavior as published              Correct behavior
   LWG 2053 C++11      the constants were declared static removed the static specifier

.SH See also

   basic_regex regular expression object
   \fI(C++11)\fP     \fI(class template)\fP 
