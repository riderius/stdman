.TH std::vector::insert 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::vector::insert \- std::vector::insert

.SH Synopsis
   iterator insert( const_iterator pos, const T& value );   \fB(1)\fP (constexpr since C++20)
   iterator insert( const_iterator pos, T&& value );        \fB(2)\fP \fI(since C++11)\fP
                                                                (constexpr since C++20)
   iterator insert( const_iterator pos,                     \fB(3)\fP (constexpr since C++20)
                    size_type count, const T& value );
   template< class InputIt >
   iterator insert( const_iterator pos, InputIt first,      \fB(4)\fP (constexpr since C++20)
   InputIt last );
   iterator insert( const_iterator pos,                     \fB(5)\fP \fI(since C++11)\fP
   std::initializer_list<T> ilist );                            (constexpr since C++20)

   Inserts elements at the specified location in the container.

   1,2) Inserts value before pos.
   3) Inserts count copies of the value before pos.
   4) Inserts elements from range [first, last) before pos.

   This overload has the same effect as overload \fB(3)\fP if InputIt is an     \fI(until C++11)\fP
   integral type.
   This overload participates in overload resolution only if InputIt
   qualifies as LegacyInputIterator, to avoid ambiguity with the overload \fI(since C++11)\fP
   \fB(3)\fP.

   If first and last are iterators into *this, the behavior is undefined.
   5) Inserts elements from initializer list ilist before pos.

   If after the operation the new size() is greater than old capacity() a reallocation
   takes place, in which case all iterators (including the end() iterator) and all
   references to the elements are invalidated. Otherwise, only the iterators and
   references before the insertion point remain valid.

.SH Parameters

   pos                  -          iterator before which the content will be inserted
                                   (pos may be the end() iterator)
   value                -          element value to insert
   count                -          number of elements to insert
   first, last          -          the range of elements to insert, cannot be iterators
                                   into container for which insert is called
   ilist                -          initializer list to insert the values from
.SH Type requirements
   -
   T must meet the requirements of CopyAssignable and CopyInsertable in order to use
   overload \fB(1)\fP.
   -
   T must meet the requirements of MoveAssignable and MoveInsertable in order to use
   overload \fB(2)\fP.
   -
   T must meet the requirements of CopyAssignable and CopyInsertable in order to use
   overload \fB(3)\fP.
   -
   T must meet the requirements of EmplaceConstructible in order to use overloads
   (4,5).
   -
   T must meet the requirements of MoveAssignable and MoveInsertable in order to use
   overload \fB(4)\fP. required only if InputIt satisfies LegacyInputIterator but not
   LegacyForwardIterator. \fI(until C++17)\fP
   -
   T must meet the requirements of Swappable, MoveAssignable, MoveConstructible and
   MoveInsertable in order to use overloads (4,5). \fI(since C++17)\fP

.SH Return value

   1,2) Iterator pointing to the inserted value.
   3) Iterator pointing to the first element inserted, or pos if count == 0.
   4) Iterator pointing to the first element inserted, or pos if first == last.
   5) Iterator pointing to the first element inserted, or pos if ilist is empty.

.SH Complexity

   1,2) Constant plus linear in the distance between pos and end of the container.
   3) Linear in count plus linear in the distance between pos and end of the container.
   4) Linear in std::distance(first, last) plus linear in the distance between pos and
   end of the container.
   5) Linear in ilist.size() plus linear in the distance between pos and end of the
   container.

.SH Exceptions

   If an exception is thrown other than by

     * the copy constructor of T,

     * the move constructor of T,   \fI(since C++11)\fP

     * the copy assignment operator of T,

     * the move assignment operator of T,   \fI(since C++11)\fP

     * any InputIt operation,

   these functions have no effect (strong exception safety guarantee).

   If an exception is thrown when inserting a single element at the end,
   and T is CopyInsertable or
   std::is_nothrow_move_constructible<T>::value is true, this function    \fI(since C++11)\fP
   has no effect \fI(strong exception guarantee)\fP. Otherwise, if an exception
   is thrown by the move constructor of a non-CopyInsertable T, the
   effects are unspecified.

.SH Example

   
// Run this code

 #include <iostream>
 #include <iterator>
 #include <vector>
  
 void print(int id, const std::vector<int>& container)
 {
     std::cout << id << ". ";
     for (const int x : container)
         std::cout << x << ' ';
     std::cout << '\\n';
 }
  
 int main ()
 {
     std::vector<int> c1(3, 100);
     print(1, c1);
  
     auto it = c1.begin();
     it = c1.insert(it, 200);
     print(2, c1);
  
     c1.insert(it, 2, 300);
     print(3, c1);
  
     // `it` no longer valid, get a new one:
     it = c1.begin();
  
     std::vector<int> c2(2, 400);
     c1.insert(std::next(it, 2), c2.begin(), c2.end());
     print(4, c1);
  
     int arr[] = {501, 502, 503};
     c1.insert(c1.begin(), arr, arr + std::size(arr));
     print(5, c1);
  
     c1.insert(c1.end(), {601, 602, 603});
     print(6, c1);
 }

.SH Output:

 1. 100 100 100
 2. 200 100 100 100
 3. 300 300 200 100 100 100
 4. 300 300 400 400 200 100 100 100
 5. 501 502 503 300 300 400 400 200 100 100 100
 6. 501 502 503 300 300 400 400 200 100 100 100 601 602 603

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

     DR    Applied to         Behavior as published               Correct behavior
   LWG 149 C++98      overloads \fB(3)\fP and \fB(4)\fP returned nothing returns an iterator
   LWG 247 C++98      the complexity was only specified for  specified for all
                      overload \fB(3)\fP                           overloads
                      the strong exception guarantee also
   LWG 406 C++98      applied if                             no guarantee in this case
                      the exception is thrown by an InputIt
                      operation

.SH See also

   emplace   constructs element in-place
   \fI(C++11)\fP   \fI(public member function)\fP 
   push_back adds an element to the end
             \fI(public member function)\fP 
   inserter  creates a std::insert_iterator of type inferred from the argument
             \fI(function template)\fP 
