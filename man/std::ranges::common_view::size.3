.TH std::ranges::common_view::size 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::common_view::size \- std::ranges::common_view::size

.SH Synopsis
   constexpr auto size() requires ranges::sized_range<V>;             \fB(1)\fP \fI(since C++20)\fP
   constexpr auto size() const requires ranges::sized_range<const V>; \fB(2)\fP \fI(since C++20)\fP

   Returns the number of elements.

   Equivalent to return ranges::size(base_);, where base_ is the underlying view.

.SH Parameters

   \fI(none)\fP

.SH Return value

   The number of elements.

.SH Example

   
// Run this code

 #include <ranges>
 #include <string_view>
  
 int main()
 {
     constexpr static auto v1 = {1, 2, 3, 4, 5};
     constexpr auto common1 { v1 | std::views::common };
     static_assert(common1.size() == 5);
  
     constexpr auto take3 { v1 | std::views::reverse | std::views::take(3) };
     constexpr auto common2 { take3 | std::views::common };
     static_assert(common2.size() == 3);
  
     using namespace std::literals;
     constexpr static auto v2 = { "∧"sv, "∨"sv, "∃"sv, "∀"sv };
     static_assert(std::ranges::views::common(v2).size() == 4);
 }

.SH See also

   ranges::size  returns an integer equal to the size of a range
   (C++20)       (customization point object)
   ranges::ssize returns a signed integer equal to the size of a range
   (C++20)       (customization point object)
