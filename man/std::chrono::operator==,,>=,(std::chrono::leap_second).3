.TH std::chrono::operator==,,>=,(std::chrono::leap_second) 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::chrono::operator==,,>=,(std::chrono::leap_second) \- std::chrono::operator==,,>=,(std::chrono::leap_second)

.SH Synopsis
   Defined in header <chrono>
   constexpr bool operator==( const std::chrono::leap_second& x,
                              const std::chrono::leap_second& y )    \fB(1)\fP  \fI(since C++20)\fP
   noexcept;
   constexpr std::strong_ordering operator<=>( const
   std::chrono::leap_second& x,                                      \fB(2)\fP  \fI(since C++20)\fP
                                               const
   std::chrono::leap_second& y ) noexcept;
   template< class Duration >

   constexpr bool operator==( const std::chrono::leap_second& x,     \fB(3)\fP  \fI(since C++20)\fP

                              const std::chrono::sys_time<Duration>&
   y ) noexcept;
   template< class Duration >

   constexpr bool operator< ( const std::chrono::leap_second& x,     \fB(4)\fP  \fI(since C++20)\fP

                              const std::chrono::sys_time<Duration>&
   y ) noexcept;
   template< class Duration >

   constexpr bool operator< ( const std::chrono::sys_time<Duration>&
   x,                                                                \fB(5)\fP  \fI(since C++20)\fP

                              const std::chrono::leap_second& y )
   noexcept;
   template< class Duration >

   constexpr bool operator> ( const std::chrono::leap_second& x,     \fB(6)\fP  \fI(since C++20)\fP

                              const std::chrono::sys_time<Duration>&
   y ) noexcept;
   template< class Duration >

   constexpr bool operator> ( const std::chrono::sys_time<Duration>&
   x,                                                                \fB(7)\fP  \fI(since C++20)\fP

                              const std::chrono::leap_second& y )
   noexcept;
   template< class Duration >

   constexpr bool operator<=( const std::chrono::leap_second& x,     \fB(8)\fP  \fI(since C++20)\fP

                              const std::chrono::sys_time<Duration>&
   y ) noexcept;
   template< class Duration >

   constexpr bool operator<=( const std::chrono::sys_time<Duration>&
   x,                                                                \fB(9)\fP  \fI(since C++20)\fP

                              const std::chrono::leap_second& y )
   noexcept;
   template< class Duration >

   constexpr bool operator>=( const std::chrono::leap_second& x,     \fB(10)\fP \fI(since C++20)\fP

                              const std::chrono::sys_time<Duration>&
   y ) noexcept;
   template< class Duration >

   constexpr bool operator>=( const std::chrono::sys_time<Duration>&
   x,                                                                \fB(11)\fP \fI(since C++20)\fP

                              const std::chrono::leap_second& y )
   noexcept;
   template< class Duration >

       requires std::three_way_comparable_with<
           std::chrono::sys_seconds,
   std::chrono::sys_time<Duration>>                                  \fB(12)\fP \fI(since C++20)\fP
   constexpr auto operator<=>( const std::chrono::leap_second& x,

                               const
   std::chrono::sys_time<Duration>& y ) noexcept;

   Compares the date and time represented by the objects x and y.

   Return type of \fB(12)\fP is deduced from x.date() <=> y, and hence the three-way
   comparison result type of std::chrono::seconds and Duration.

   The != operator is synthesized from operator==.

.SH Return value

   1) x.date() == y.date()
   2) x.date() <=> y.date()
   3) x.date() == y
   4) x.date() < y
   5) x < y.date()
   6) x.date() > y
   7) x > y.date()
   8) x.date() <= y
   9) x <= y.date()
   10) x.date() >= y
   11) x >= y.date()
   12) x.date() <=> y
