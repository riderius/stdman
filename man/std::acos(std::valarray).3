.TH std::acos(std::valarray) 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::acos(std::valarray) \- std::acos(std::valarray)

.SH Synopsis
   Defined in header <valarray>
   template< class T >
   valarray<T> acos( const valarray<T>& va );

   For each element in va computes arc cosine of the value of the element.

.SH Parameters

   va - value array to apply the operation to

.SH Return value

   Value array containing arc cosines of the values in va.

.SH Notes

   Unqualified function (acos) is used to perform the computation. If such function is
   not available, std::acos is used due to argument-dependent lookup.

   The function can be implemented with the return type different from std::valarray.
   In this case, the replacement type has the following properties:

     * All const member functions of std::valarray are provided.
     * std::valarray, std::slice_array, std::gslice_array, std::mask_array and
       std::indirect_array can be constructed from the replacement type.
     * For every function taking a const std::valarray<T>&
       except begin() and end()
       \fI(since C++11)\fP, identical functions taking the replacement types shall be added;
     * For every function taking two const std::valarray<T>& arguments, identical
       functions taking every combination of const std::valarray<T>& and replacement
       types shall be added.
     * The return type does not add more than two levels of template nesting over the
       most deeply-nested argument type.

.SH Possible implementation

   template<class T>
   valarray<T> acos(const valarray<T>& va)
   {
       valarray<T> other = va;
       for (T& i : other)
           i = acos(i);
    
       return other; // proxy object may be returned
   }

.SH Example

   
// Run this code

 #include <cmath>
 #include <iostream>
 #include <numbers>
 #include <valarray>
  
 int main()
 {
     // take common x-values from unit circle
     const double s32 = std::sqrt(3.0) / 2.0;
     const double s22 = std::sqrt(2.0) / 2.0;
     std::valarray<double> v1 = {-1.0, -s32, -s22, -0.5, 0.0, 0.5, s22, s32, 1.0};
     std::valarray<double> v2 = std::acos(v1) * 180.0 / std::numbers::pi;
  
     for (double n : v2)
         std::cout << n << "° ";
     std::cout << '\\n';
 }

.SH Output:

 180° 150° 135° 120° 90° 60° 45° 30° 0°

.SH See also

   asin(std::valarray)  applies the function std::asin to each element of valarray
                        \fI(function template)\fP 
   atan(std::valarray)  applies the function std::atan to each element of valarray
                        \fI(function template)\fP 
   atan2(std::valarray) applies the function std::atan2 to a valarray and a value
                        \fI(function template)\fP 
   cos(std::valarray)   applies the function std::cos to each element of valarray
                        \fI(function template)\fP 
   acos
   acosf                computes arc cosine (\\({\\small\\arccos{x}}\\)arccos(x))
   acosl                \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   acos(std::complex)   computes arc cosine of a complex number
   \fI(C++11)\fP              (\\({\\small\\arccos{z}}\\)arccos(z))
                        \fI(function template)\fP 

.SH Hidden category:
     * Pages with unreviewed LWG DR marker
