.TH std::is_empty 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_empty \- std::is_empty

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_empty;

   std::is_empty is a UnaryTypeTrait.

   If T is an empty type (that is, a non-union class type with no non-static data
   members other than bit-fields of size 0, no virtual functions, no virtual base
   classes, and no non-empty base classes), provides the member constant value equal to
   true. For any other type, value is false.

   If T is an incomplete non-union class type, the behavior is undefined.

   If the program adds specializations for std::is_empty or std::is_empty_v, the
   behavior is undefined.

.SH Template parameters

   T - a type to check

   Helper variable template

   template< class T >                                     \fI(since C++17)\fP
   inline constexpr bool is_empty_v = is_empty<T>::value;

   

Inherited from std::integral_constant

.SH Member constants

   value    true if T is an empty class type, false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Notes

   Inheriting from empty base classes usually does not increase the size of a class due
   to empty base optimization.

   std::is_empty<T> and all other type traits are empty classes.

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>
  
 struct A {};
 static_assert(std::is_empty_v<A> == true);
  
 struct B { int m; };
 static_assert(std::is_empty_v<B> == false);
  
 struct C { static int m; };
 static_assert(std::is_empty_v<C> == true);
  
 struct D { virtual ~D(); };
 static_assert(std::is_empty_v<D> == false);
  
 union E {};
 static_assert(std::is_empty_v<E> == false);
  
 struct F { [[no_unique_address]] E e; };
  
 struct G
 {
     int:0;
     // C++ standard allow "as a special case, an unnamed bit-field with a width of zero
     // specifies alignment of the next bit-field at an allocation unit boundary.
     // Only when declaring an unnamed bit-field may the width be zero."
 };
 static_assert(std::is_empty_v<G>); // holds only unnamed bit-fields of zero width
  
 int main()
 {
     std::cout << std::boolalpha;
     std::cout << "F: " << std::is_empty_v<F> << '\\n'; // the result is ABI-dependent
 }

.SH Possible output:

 F: true

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to     Behavior as published           Correct behavior
   LWG 2015 C++11      the behavior was undefined if the base characteristic is
                       T is an incomplete union type std::false_type in this case

.SH See also

   is_class checks if a type is a non-union class type
   \fI(C++11)\fP  \fI(class template)\fP 
