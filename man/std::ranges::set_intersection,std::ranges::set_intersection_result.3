.TH std::ranges::set_intersection,std::ranges::set_intersection_result 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::set_intersection,std::ranges::set_intersection_result \- std::ranges::set_intersection,std::ranges::set_intersection_result

.SH Synopsis
   Defined in header <algorithm>
   Call signature
   template< std::input_iterator I1, std::sentinel_for<I1> S1,

             std::input_iterator I2, std::sentinel_for<I2> S2,
             std::weakly_incrementable O, class Comp = ranges::less,
             class Proj1 = std::identity, class Proj2 = std::identity >      (since
   requires std::mergeable<I1, I2, O, Comp, Proj1, Proj2>                \fB(1)\fP C++20)
   constexpr set_intersection_result<I1, I2, O>
       set_intersection( I1 first1, S1 last1, I2 first2, S2 last2,
                         O result, Comp comp = {},

                         Proj1 proj1 = {}, Proj2 proj2 = {} );
   template< ranges::input_range R1, ranges::input_range R2,

             std::weakly_incrementable O, class Comp = ranges::less,
             class Proj1 = std::identity, class Proj2 = std::identity >
   requires std::mergeable<ranges::iterator_t<R1>,
   ranges::iterator_t<R2>,                                               \fB(2)\fP (since
                           O, Comp, Proj1, Proj2>                            C++20)
   constexpr set_intersection_result<ranges::borrowed_iterator_t<R1>,
                                     ranges::borrowed_iterator_t<R2>, O>
       set_intersection( R1&& r1, R2&& r2, O result, Comp comp = {},

                         Proj1 proj1 = {}, Proj2 proj2 = {} );
.SH Helper types
   template< class I1, class I2, class O >                               \fB(3)\fP (since
   using set_intersection_result = ranges::in_in_out_result<I1, I2, O>;      C++20)

   Constructs a sorted range beginning at result consisting of elements that are found
   in both sorted input ranges [first1, last1) and [first2, last2). If some element is
   found m times in [first1, last1) and n times in [first2, last2), the first min(m, n)
   elements will be copied from the first range to result. The order of equivalent
   elements is preserved.

   The behavior is undefined if

     * the input ranges are not sorted with respect to comp and proj1 or proj2,
       respectively, or
     * the resulting range overlaps with either of the input ranges.
   1) Elements are compared using the given binary comparison function comp.
   2) Same as \fB(1)\fP, but uses r1 as the first range and r2 as the second range, as if
   using ranges::begin(r1) as first1, ranges::end(r1) as last1, ranges::begin(r2) as
   first2, and ranges::end(r2) as last2.

   The function-like entities described on this page are niebloids, that is:

     * Explicit template argument lists cannot be specified when calling any of them.
     * None of them are visible to argument-dependent lookup.
     * When any of them are found by normal unqualified lookup as the name to the left
       of the function-call operator, argument-dependent lookup is inhibited.

   In practice, they may be implemented as function objects, or with special compiler
   extensions.

.SH Parameters

   first1, last1 - iterator-sentinel pair denoting the first input sorted range
   first2, last2 - iterator-sentinel pair denoting the second input sorted range
   r1            - the first sorted input range
   r2            - the second sorted input range
   result        - the beginning of the output range
   comp          - comparison to apply to the projected elements
   proj1         - projection to apply to the elements in the first range
   proj2         - projection to apply to the elements in the second range

.SH Return value

   {last1, last2, result_last}, where result_last is the end of the constructed range.

.SH Complexity

   At most \\(\\scriptsize 2\\cdot(N_1+N_2)-1\\)2·(N
   1+N
   2)-1 comparisons and applications of each projection, where \\(\\scriptsize N_1\\)N
   1 and \\(\\scriptsize N_2\\)N
   2 are ranges::distance(first1, last1) and ranges::distance(first2, last2),
   respectively.

.SH Possible implementation

   struct set_intersection_fn
   {
       template<std::input_iterator I1, std::sentinel_for<I1> S1,
                std::input_iterator I2, std::sentinel_for<I2> S2,
                std::weakly_incrementable O, class Comp = ranges::less,
                class Proj1 = std::identity, class Proj2 = std::identity>
       requires std::mergeable<I1, I2, O, Comp, Proj1, Proj2>
       constexpr ranges::set_union_result<I1, I2, O>
           operator()(I1 first1, S1 last1, I2 first2, S2 last2,
                      O result, Comp comp = {},
                      Proj1 proj1 = {}, Proj2 proj2 = {}) const
       {
           while (!(first1 == last1 or first2 == last2))
           {
               if (std::invoke(comp, std::invoke(proj1, *first1),
                                     std::invoke(proj2, *first2)))
                   ++first1;
               else if (std::invoke(comp, std::invoke(proj2, *first2),
                                          std::invoke(proj1, *first1)))
                   ++first2;
               else
                   *result = *first1, ++first1, ++first2, ++result;
           }
           return {ranges::next(std::move(first1), std::move(last1)),
                   ranges::next(std::move(first2), std::move(last2)),
                   std::move(result)};
       }
    
       template<ranges::input_range R1, ranges::input_range R2,
                std::weakly_incrementable O, class Comp = ranges::less,
                class Proj1 = std::identity, class Proj2 = std::identity>
       requires std::mergeable<ranges::iterator_t<R1>, ranges::iterator_t<R2>,
                               O, Comp, Proj1, Proj2>
       constexpr ranges::set_intersection_result<ranges::borrowed_iterator_t<R1>,
                                                 ranges::borrowed_iterator_t<R2>, O>
           operator()(R1&& r1, R2&& r2, O result, Comp comp = {},
                      Proj1 proj1 = {}, Proj2 proj2 = {}) const
       {
           return (*this)(ranges::begin(r1), ranges::end(r1),
                          ranges::begin(r2), ranges::end(r2),
                          std::move(result), std::move(comp),
                          std::move(proj1), std::move(proj2));
       }
   };
    
   inline constexpr set_intersection_fn set_intersection {};

.SH Example

   
// Run this code

 #include <algorithm>
 #include <iostream>
 #include <iterator>
 #include <vector>
  
 void print(const auto& v, const auto& rem)
 {
     std::cout << "{ ";
     for (const auto& e : v)
         std::cout << e << ' ';
     std::cout << '}' << rem;
 }
  
 int main()
 {
     const auto in1 = {1, 2, 2, 3, 4, 5, 6};
     const auto in2 = {2, 2, 3, 3, 5, 7};
     std::vector<int> out {};
  
     std::ranges::set_intersection(in1, in2, std::back_inserter(out));
  
     print(in1, " ∩ "), print(in2, " = "), print(out, "\\n");
 }

.SH Output:

 { 1 2 2 3 4 5 6 } ∩ { 2 2 3 3 5 7 } = { 2 2 3 5 }

.SH See also

   ranges::set_union                computes the union of two sets
   (C++20)                          (niebloid)
   ranges::set_difference           computes the difference between two sets
   (C++20)                          (niebloid)
   ranges::set_symmetric_difference computes the symmetric difference between two sets
   (C++20)                          (niebloid)
   ranges::includes                 returns true if one sequence is a subsequence of
   (C++20)                          another
                                    (niebloid)
   set_intersection                 computes the intersection of two sets
                                    \fI(function template)\fP 
