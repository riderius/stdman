.TH std::experimental::erase(std::list) 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::erase(std::list) \- std::experimental::erase(std::list)

.SH Synopsis
   Defined in header <experimental/list>
   template< class T, class A, class U >              (library fundamentals TS v2)
   void erase( std::list<T, A>& c, const U& value );

   Erases all elements that compare equal to value from the container. Equivalent to
   c.remove_if([&](auto& elem) { return elem == value; });.

.SH Parameters

   c     - container from which to erase
   value - value to be removed

.SH Complexity

   Linear.

.SH Example

   
// Run this code

 #include <experimental/list>
 #include <iostream>
  
 auto show = [](const auto& container)
 {
     for (auto e : container)
         std::cout << e;
     std::cout << '\\n';
 };
  
 int main()
 {
     std::list<int> data{1, 1, 1, 4, 1, 1, 1, 2, 1, 1, 1};
     show(data);
     std::experimental::erase(data, 1);
     show(data);
 }

.SH Output:

 11141112111
 42

.SH Notes

   Unlike std::list::remove, this function template accepts heterogeneous types and
   does not force a conversion to the container's value type before invoking the ==
   operator.

.SH See also

   remove                      removes elements satisfying specific criteria
   remove_if                   \fI(function template)\fP 
   remove                      removes elements satisfying specific criteria
   remove_if                   \fI(public member function of std::list<T,Allocator>)\fP
                               
   erase_if (std::list)        erases all elements satisfying a predicate from a
   (library fundamentals 2 TS) std::list
                               \fI(function template)\fP 
