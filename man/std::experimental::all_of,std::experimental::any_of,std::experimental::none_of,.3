.TH std::experimental::all_of,std::experimental::any_of,std::experimental::none_of, 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::all_of,std::experimental::any_of,std::experimental::none_of, \- std::experimental::all_of,std::experimental::any_of,std::experimental::none_of,

.SH Synopsis

   Defined in header <experimental/simd>
   template< class T, class Abi >              \fB(1)\fP (parallelism TS v2)
   bool all_of( const simd_mask<T, Abi>& k );
   template< class T, class Abi >              \fB(2)\fP (parallelism TS v2)
   bool any_of( const simd_mask<T, Abi>& k );
   template< class T, class Abi >              \fB(3)\fP (parallelism TS v2)
   bool none_of( const simd_mask<T, Abi>& k );
   template< class T, class Abi >              \fB(4)\fP (parallelism TS v2)
   bool some_of( const simd_mask<T, Abi>& k );

   1) Returns true if all values in k are true.
   2) Returns true if at least one value in k is true.
   3) Returns true if all values in k are false.
   4) Returns true if at least one value in k is true but not all values in k are true.

.SH Parameters

   k - the simd_mask to apply the reduction to

.SH Return value

   The boolean result of the horizontal reduction.

.SH Example

   
// Run this code

 #include <cassert>
 #include <experimental/simd>
  
 namespace stq = std::experimental;
  
 int main()
 {
     using mask = stq::fixed_size_simd_mask<int, 4>;
  
     mask mask1{false}; // = {0, 0, 0, 0}
     assert
     (
         stq::none_of(mask1) == true &&
         stq::any_of(mask1) == false &&
         stq::some_of(mask1) == false &&
         stq::all_of(mask1) == false
     );
  
     mask mask2{true}; // = {1, 1, 1, 1}
     assert
     (
         stq::none_of(mask2) == false &&
         stq::any_of(mask2) == true &&
         stq::some_of(mask2) == false &&
         stq::all_of(mask2) == true
     );
  
     mask mask3{true};
     mask3[0] = mask3[1] = false; // mask3 = {0, 0, 1, 1}
     assert
     (
         stq::none_of(mask3) == false &&
         stq::any_of(mask3) == true &&
         stq::some_of(mask3) == true &&
         stq::all_of(mask3) == false
     );
 }
