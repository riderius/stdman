.TH std::optional 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::optional \- std::optional

.SH Synopsis
   Defined in header <optional>
   template< class T >           \fI(since C++17)\fP
   class optional;

   The class template std::optional manages an optional contained value, i.e. a value
   that may or may not be present.

   A common use case for optional is the return value of a function that may fail. As
   opposed to other approaches, such as std::pair<T, bool>, optional handles
   expensive-to-construct objects well and is more readable, as the intent is expressed
   explicitly.

   Any instance of optional<T> at any given point in time either contains a value or
   does not contain a value.

   If an optional<T> contains a value, the value is guaranteed to be allocated as part
   of the optional object footprint, i.e. no dynamic memory allocation ever takes
   place. Thus, an optional object models an object, not a pointer, even though
   operator*() and operator->() are defined.

   When an object of type optional<T> is contextually converted to bool, the conversion
   returns true if the object contains a value and false if it does not contain a
   value.

   The optional object contains a value in the following conditions:

     * The object is initialized with/assigned from a value of type T or another
       optional that contains a value.

   The object does not contain a value in the following conditions:

     * The object is default-initialized.
     * The object is initialized with/assigned from a value of type std::nullopt_t or
       an optional object that does not contain a value.
     * The member function reset() is called.

   There are no optional references, functions, arrays, or cv void; a program is
   ill-formed if it instantiates an optional with such a type. In addition, a program
   is ill-formed if it instantiates an optional with the (possibly cv-qualified) tag
   types std::nullopt_t or std::in_place_t.

.SH Template parameters

       the type of the value to manage initialization state for. The type must meet the
   T - requirements of Destructible (in particular, array and reference types are not
       allowed).

.SH Member types

   Member type Definition
   value_type  T

.SH Member functions

   constructor   constructs the optional object
                 \fI(public member function)\fP 
   destructor    destroys the contained value, if there is one
                 \fI(public member function)\fP 
   operator=     assigns contents
                 \fI(public member function)\fP 
.SH Observers
   operator->    accesses the contained value
   operator*     \fI(public member function)\fP 
   operator bool checks whether the object contains a value
   has_value     \fI(public member function)\fP 
   value         returns the contained value
                 \fI(public member function)\fP 
   value_or      returns the contained value if available, another value otherwise
                 \fI(public member function)\fP 
         Monadic operations
   and_then      returns the result of the given function on the contained value if it
   (C++23)       exists, or an empty optional otherwise
                 \fI(public member function)\fP 
   transform     returns an optional containing the transformed contained value if it
   (C++23)       exists, or an empty optional otherwise
                 \fI(public member function)\fP 
   or_else       returns the optional itself if it contains a value, or the result of
   (C++23)       the given function otherwise
                 \fI(public member function)\fP 
.SH Modifiers
   swap          exchanges the contents
                 \fI(public member function)\fP 
   reset         destroys any contained value
                 \fI(public member function)\fP 
   emplace       constructs the contained value in-place
                 \fI(public member function)\fP 

.SH Non-member functions

   operator==
   operator!=
   operator<
   operator<=
   operator>
   operator>=
   operator<=>              compares optional objects
   \fI(C++17)\fP                  \fI(function template)\fP 
   \fI(C++17)\fP
   \fI(C++17)\fP
   \fI(C++17)\fP
   \fI(C++17)\fP
   \fI(C++17)\fP
   (C++20)
   make_optional            creates an optional object
   \fI(C++17)\fP                  \fI(function template)\fP 
   std::swap(std::optional) specializes the std::swap algorithm
   \fI(C++17)\fP                  \fI(function template)\fP 

.SH Helper classes

   std::hash<std::optional> hash support for std::optional
   \fI(C++17)\fP                  \fI(class template specialization)\fP 
   nullopt_t                indicator of optional type with uninitialized state
   \fI(C++17)\fP                  \fI(class)\fP 
   bad_optional_access      exception indicating checked access to an optional that
   \fI(C++17)\fP                  doesn't contain a value
                            \fI(class)\fP 

   Helpers

   nullopt          an object of type nullopt_t
   \fI(C++17)\fP          (constant) 
   in_place
   in_place_type
   in_place_index   in-place construction tag
   in_place_t       (tag)
   in_place_type_t
   in_place_index_t
   \fI(C++17)\fP

   Deduction guides

.SH Notes

   Feature-test macro  Value    Std        Feature
   __cpp_lib_optional 201606L \fI(C++17)\fP std::optional
   __cpp_lib_optional 202106L (C++20) Fully constexpr
                              (DR)
   __cpp_lib_optional 202110L (C++23) Monadic operations

.SH Example

   
// Run this code

 #include <iostream>
 #include <optional>
 #include <string>
  
 // optional can be used as the return type of a factory that may fail
 std::optional<std::string> create(bool b)
 {
     if (b)
         return "Godzilla";
     return {};
 }
  
 // std::nullopt can be used to create any (empty) std::optional
 auto create2(bool b)
 {
     return b ? std::optional<std::string>{"Godzilla"} : std::nullopt;
 }
  
 int main()
 {
     std::cout << "create(false) returned "
               << create(false).value_or("empty") << '\\n';
  
     // optional-returning factory functions are usable as conditions of while and if
     if (auto str = create2(true))
         std::cout << "create2(true) returned " << *str << '\\n';
 }

.SH Output:

 create(false) returned empty
 create2(true) returned Godzilla

.SH See also

   variant a type-safe discriminated union
   \fI(C++17)\fP \fI(class template)\fP 
   any     objects that hold instances of any CopyConstructible type
   \fI(C++17)\fP \fI(class)\fP 
