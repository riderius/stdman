.TH std::iter_swap(std::reverse_iterator) 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::iter_swap(std::reverse_iterator) \- std::iter_swap(std::reverse_iterator)

.SH Synopsis
   template< std::indirectly_swappable<Iter> Iter2 >

       friend constexpr void
           iter_swap( const reverse_iterator& x,                          \fI(since C++20)\fP

                      const std::reverse_iterator<Iter2>& y )
   noexcept(/*see below*/);

   Swaps the objects pointed to by two adjusted underlying iterators. The function body
   is equivalent to:

 auto tmp_x = x.base();
 auto tmp_y = y.base();
 ranges::iter_swap(--tmp_x, --tmp_y);

   This function template is not visible to ordinary unqualified or qualified lookup,
   and can only be found by argument-dependent lookup when std::reverse_iterator<Iter>
   is an associated class of the arguments.

.SH Parameters

   x, y - reverse iterators to the elements to swap

.SH Return value

   \fI(none)\fP

.SH Complexity

   Constant.

.SH Exceptions

   noexcept specification:  
   noexcept(

       std::is_nothrow_copy_constructible_v<Iter> &&
       std::is_nothrow_copy_constructible_v<Iter2> &&
       noexcept(ranges::iter_swap(--std::declval<Iter&>(), --std::declval<Iter2&>()))

   )

.SH Example

   
// Run this code

 #include <iostream>
 #include <iterator>
 #include <list>
 #include <vector>
  
 int main()
 {
     std::vector v{1, 2, 3};
     std::list l{4, 5, 6};
  
     std::reverse_iterator<std::vector<int>::iterator> r1{v.rbegin()};
     std::reverse_iterator<std::list<int>::iterator> r2{l.rbegin()};
  
     std::cout << *r1 << ' ' << *r2 << '\\n';
  
     iter_swap(r1, r2); // ADL
  
     std::cout << *r1 << ' ' << *r2 << '\\n';
 }

.SH Output:

 3 6
 6 3

.SH See also

   swap        swaps the values of two objects
               \fI(function template)\fP 
   swap_ranges swaps two ranges of elements
               \fI(function template)\fP 
   iter_swap   swaps the elements pointed to by two iterators
               \fI(function template)\fP 
   iter_swap   swaps the values referenced by two dereferenceable objects
   (C++20)     (customization point object)
   iter_swap   swaps the objects pointed to by two underlying iterators
   (C++20)     \fI(function template)\fP 

.SH Category:
     * conditionally noexcept
