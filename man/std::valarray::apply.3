.TH std::valarray::apply 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::valarray::apply \- std::valarray::apply

.SH Synopsis
   valarray<T> apply( T func(T) ) const;
   valarray<T> apply( T func(const T&) ) const;

   Returns a new valarray of the same size with values which are acquired by applying
   function func to the previous values of the elements.

.SH Parameters

   func - function to apply to the values

.SH Return value

   The resulting valarray with values acquired by applying function func.

.SH Notes

   The function can be implemented with the return type different from std::valarray.
   In this case, the replacement type has the following properties:

     * All const member functions of std::valarray are provided.
     * std::valarray, std::slice_array, std::gslice_array, std::mask_array and
       std::indirect_array can be constructed from the replacement type.
     * For every function taking a const std::valarray<T>&
       except begin() and end()
       \fI(since C++11)\fP, identical functions taking the replacement types shall be added;
     * For every function taking two const std::valarray<T>& arguments, identical
       functions taking every combination of const std::valarray<T>& and replacement
       types shall be added.
     * The return type does not add more than two levels of template nesting over the
       most deeply-nested argument type.

.SH Possible implementation

   Following straightforward implementations can be replaced by expression templates
   for a higher efficiency.

   template<class T>
   valarray<T> valarray<T>::apply(T func(T)) const
   {
       valarray<T> other = *this;
       for (T& i : other)
           i = func(i);
       return other;
   }
    
   template<class T>
   valarray<T> valarray<T>::apply(T func(const T&)) const
   {
       valarray<T> other = *this;
       for (T& i : other)
           i = func(i);
       return other;
   }

.SH Example

   Calculates and prints the first 10 factorials.

   
// Run this code

 #include <cmath>
 #include <iostream>
 #include <valarray>
  
 int main()
 {
     std::valarray<int> v = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
     v = v.apply([](int n) -> int
                 {
                     return std::round(std::tgamma(n + 1));
                 });
     for (auto n : v)
         std::cout << n << ' ';
     std::cout << '\\n';
 }

.SH Output:

 1 2 6 24 120 720 5040 40320 362880 3628800

.SH See also

   for_each         applies a function to a range of elements
                    \fI(function template)\fP 
   ranges::for_each applies a function to a range of elements
   (C++20)          (niebloid)

.SH Hidden category:
     * Pages with unreviewed LWG DR marker
