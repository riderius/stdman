.TH std::discrete_distribution 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::discrete_distribution \- std::discrete_distribution

.SH Synopsis
   Defined in header <random>
   template< class IntType = int >  \fI(since C++11)\fP
   class discrete_distribution;

   std::discrete_distribution produces random integers on the interval [0, n), where
   the probability of each individual integer i is defined as w
   i/S, that is the weight of the ith integer divided by the sum of all n weights.

   std::discrete_distribution satisfies all requirements of RandomNumberDistribution.

.SH Template parameters

             The result type generated by the generator. The effect is undefined if
   IntType - this is not one of short, int, long, long long, unsigned short, unsigned
             int, unsigned long, or unsigned long long.

.SH Member types

   Member type         Definition
   result_type \fI(C++11)\fP IntType
   param_type \fI(C++11)\fP  the type of the parameter set, see RandomNumberDistribution.

.SH Member functions

   constructor   constructs new distribution
   \fI(C++11)\fP       \fI(public member function)\fP 
   reset         resets the internal state of the distribution
   \fI(C++11)\fP       \fI(public member function)\fP 
.SH Generation
   operator()    generates the next random number in the distribution
   \fI(C++11)\fP       \fI(public member function)\fP 
.SH Characteristics
   probabilities obtains the list of probabilities
                 \fI(public member function)\fP 
   param         gets or sets the distribution parameter object
   \fI(C++11)\fP       \fI(public member function)\fP 
   min           returns the minimum potentially generated value
   \fI(C++11)\fP       \fI(public member function)\fP 
   max           returns the maximum potentially generated value
   \fI(C++11)\fP       \fI(public member function)\fP 

.SH Non-member functions

   operator==
   operator!=                compares two distribution objects
   \fI(C++11)\fP                   \fI(function)\fP 
   \fI(C++11)\fP(removed in C++20)
   operator<<                performs stream input and output on pseudo-random number
   operator>>                distribution
   \fI(C++11)\fP                   \fI(function template)\fP 

.SH Example

   
// Run this code

 #include <iomanip>
 #include <iostream>
 #include <map>
 #include <random>
  
 int main()
 {
     std::random_device rd;
     std::mt19937 gen(rd());
     std::discrete_distribution<> d({40, 10, 10, 40});
     std::map<int, int> map;
  
     for (int n = 0; n < 1e4; ++n)
         ++map[d(gen)];
  
     for (const auto& [num, count] : map)
         std::cout << num << " generated " << std::setw(4) << count << " times\\n";
 }

.SH Possible output:

 0 generated 4037 times
 1 generated  962 times
 2 generated 1030 times
 3 generated 3971 times
