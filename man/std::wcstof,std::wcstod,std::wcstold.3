.TH std::wcstof,std::wcstod,std::wcstold 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::wcstof,std::wcstod,std::wcstold \- std::wcstof,std::wcstod,std::wcstold

.SH Synopsis
   Defined in header <cwchar>
   float       wcstof( const wchar_t* str, wchar_t** str_end );   \fI(since C++11)\fP
   double      wcstod( const wchar_t* str, wchar_t** str_end );
   long double wcstold( const wchar_t* str, wchar_t** str_end );  \fI(since C++11)\fP

   Interprets a floating point value in a wide string pointed to by str.

   Function discards any whitespace characters (as determined by std::iswspace) until
   first non-whitespace character is found. Then it takes as many characters as
   possible to form a valid floating-point representation and converts them to a
   floating-point value. The valid floating-point value can be one of the following:

     * decimal floating-point expression. It consists of the following parts:

     * (optional) plus or minus sign
     * nonempty sequence of decimal digits optionally containing decimal-point
       character (as determined by the current C locale) (defines significand)
     * (optional) e or E followed with optional minus or plus sign and nonempty
       sequence of decimal digits (defines exponent to base 10)

     * hexadecimal floating-point expression. It consists of the
       following parts:

     * (optional) plus or minus sign
     * 0x or 0X
     * nonempty sequence of hexadecimal digits optionally containing a
       decimal-point character (as determined by the current C locale)
       (defines significand)
     * (optional) p or P followed with optional minus or plus sign and
       nonempty sequence of decimal digits (defines exponent to base 2)   \fI(since C++11)\fP
     * infinity expression. It consists of the following parts:

     * (optional) plus or minus sign
     * INF or INFINITY ignoring case
     * not-a-number expression. It consists of the following parts:

     * (optional) plus or minus sign
     * NAN or NAN(char_sequence) ignoring case of the NAN part.
       char_sequence can only contain digits, Latin letters, and
       underscores. The result is a quiet NaN floating-point value.

     * any other expression that may be accepted by the currently installed C locale

   The functions sets the pointer pointed to by str_end to point to the wide character
   past the last character interpreted. If str_end is a null pointer, it is ignored.

.SH Parameters

   str     - pointer to the null-terminated wide string to be interpreted
   str_end - pointer to a pointer to a wide character

.SH Return value

   Floating point value corresponding to the contents of str on success. If the
   converted value falls out of range of corresponding return type, range error occurs
   and HUGE_VAL, HUGE_VALF or HUGE_VALL is returned. If no conversion can be performed,
   0 is returned.

.SH Example

   
// Run this code

 #include <cerrno>
 #include <clocale>
 #include <cwchar>
 #include <iostream>
 #include <string>
  
 int main()
 {
     const wchar_t* p = L"111.11 -2.22 0X1.BC70A3D70A3D7P+6 -Inf 1.18973e+4932zzz";
     wchar_t* end;
     std::wcout << "Parsing L\\"" << p << "\\":\\n";
     for (double f = std::wcstod(p, &end); p != end; f = std::wcstod(p, &end))
     {
         std::wcout << "  '" << std::wstring(p, end-p) << "' -> ";
         p = end;
         if (errno == ERANGE)
         {
             std::wcout << "range error, got ";
             errno = 0;
         }
         std::wcout << f << '\\n';
     }
  
     if (std::setlocale(LC_NUMERIC, "de_DE.utf8"))
     {
         std::wcout << L"With de_DE.utf8 locale:\\n";
         std::wcout << L"  '123.45' -> " << std::wcstod(L"123.45", 0) << L'\\n';
         std::wcout << L"  '123,45' -> " << std::wcstod(L"123,45", 0) << L'\\n';
     }
 }

.SH Output:

 Parsing L"111.11 -2.22 0X1.BC70A3D70A3D7P+6 -Inf 1.18973e+4932zzz":
   '111.11' -> 111.11
   ' -2.22' -> -2.22
   ' 0X1.BC70A3D70A3D7P+6' -> 111.11
   ' -Inf' -> -inf
   ' 1.18973e+4932' -> range error, got inf
 With de_DE.utf8 locale:
   '123.45' -> 123
   '123,45' -> 123.45

.SH See also

   strtof  converts a byte string to a floating-point value
   strtod  \fI(function)\fP 
   strtold
   C documentation for
   wcstof
