.TH std::pmr::polymorphic_allocator::new_object 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::pmr::polymorphic_allocator::new_object \- std::pmr::polymorphic_allocator::new_object

.SH Synopsis
   template< class U, class... CtorArgs >                   \fI(since C++20)\fP
   [[nodiscard]] U* new_object( CtorArgs&&... ctor_args );

   Allocates and constructs an object of type U.

   Given alloc is a std::pmr::polymorphic_allocator<T>:

 U* p = alloc.new_object<U>(std::forward<CtorArgs>(ctor_args)...);

   is equivalent to

 U* p = alloc.allocate_object<U>();
 try
 {
     alloc.construct(p, std::forward<CtorArgs>(ctor_args)...);
 }
 catch (...)
 {
     alloc.deallocate_object(p);
     throw;
 }

.SH Parameters

   ctor_args - the arguments to forward to the constructor of U

.SH Return value

   A pointer to the allocated and constructed object.

.SH Notes

   This function was introduced for use with the fully-specialized allocator
   std::pmr::polymorphic_allocator<>, but it may be useful in any specialization as a
   shortcut to avoid having to rebind from std::pmr::polymorphic_allocator<T> to
   std::pmr::polymorphic_allocator<U>, and having to call allocate, construct, and
   deallocate individually.

   Since U is not deduced, it must be provided as a template argument when calling this
   function.

.SH Exceptions

   May throw any exceptions thrown by the call to allocate_object or the constructor of
   U.

.SH See also

   allocate_bytes  allocate raw aligned memory from the underlying resource
   (C++20)         \fI(public member function)\fP 
   allocate_object allocates raw memory suitable for an object or an array
   (C++20)         \fI(public member function)\fP 
   allocate        allocate memory
                   \fI(public member function)\fP 
   allocate        allocates uninitialized storage using the allocator
   \fB[static]\fP        \fI(public static member function of std::allocator_traits<Alloc>)\fP
                   
   allocate        allocates memory
                   \fI(public member function of std::pmr::memory_resource)\fP 
