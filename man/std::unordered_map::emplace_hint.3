.TH std::unordered_map::emplace_hint 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::unordered_map::emplace_hint \- std::unordered_map::emplace_hint

.SH Synopsis
   template< class... Args >                                      \fI(since C++11)\fP
   iterator emplace_hint( const_iterator hint, Args&&... args );

   Inserts a new element into the container, using hint as a suggestion where the
   element should go.

   The constructor of the element type (value_type, that is, std::pair<const Key, T>)
   is called with exactly the same arguments as supplied to the function, forwarded
   with std::forward<Args>(args)....

   If after the operation the new number of elements is greater than old
   max_load_factor() * bucket_count() a rehashing takes place.
   If rehashing occurs (due to the insertion), all iterators are invalidated. Otherwise
   (no rehashing), iterators are not invalidated.

.SH Parameters

   hint - iterator, used as a suggestion as to where to insert the new element
   args - arguments to forward to the constructor of the element

.SH Return value

   An iterator to the inserted element, or to the element that prevented the insertion.

.SH Exceptions

   If an exception is thrown for any reason, this function has no effect (strong
   exception safety guarantee).

.SH Complexity

   Amortized constant on average, worst case linear in the size of the container.

.SH Example

   
// Run this code

 #include <chrono>
 #include <cstddef>
 #include <functional>
 #include <iomanip>
 #include <iostream>
 #include <unordered_map>
  
 const int n_operations = 100'500'0;
  
 std::size_t map_emplace()
 {
     std::unordered_map<int, char> map;
     for (int i = 0; i < n_operations; ++i)
         map.emplace(i, 'a');
     return map.size();
 }
  
 std::size_t map_emplace_hint()
 {
     std::unordered_map<int, char> map;
     auto it = map.begin();
     for (int i = 0; i < n_operations; ++i)
     {
         map.emplace_hint(it, i, 'b');
         it = map.end();
     }
     return map.size();
 }
  
 std::size_t map_emplace_hint_wrong()
 {
     std::unordered_map<int, char> map;
     auto it = map.begin();
     for (int i = n_operations; i > 0; --i)
     {
         map.emplace_hint(it, i, 'c');
         it = map.end();
     }
     return map.size();
 }
  
 std::size_t map_emplace_hint_corrected()
 {
     std::unordered_map<int, char> map;
     auto it = map.begin();
     for (int i = n_operations; i > 0; --i)
     {
         map.emplace_hint(it, i, 'd');
         it = map.begin();
     }
     return map.size();
 }
  
 std::size_t map_emplace_hint_closest()
 {
     std::unordered_map<int, char> map;
     auto it = map.begin();
     for (int i = 0; i < n_operations; ++i)
         it = map.emplace_hint(it, i, 'e');
     return map.size();
 }
  
 double time_it(std::function<std::size_t()> map_test,
                std::string what = "", double ratio = 0.0)
 {
     const auto start = std::chrono::system_clock::now();
     const std::size_t map_size = map_test();
     const auto stop = std::chrono::system_clock::now();
     std::chrono::duration<double, std::milli> time = stop - start;
     if (what.size() && map_size)
         std::cout << std::setw(8) << time << " for " << what << " (ratio: "
                   << (ratio == 0.0 ? 1.0 : ratio / time.count()) << ")\\n";
     return time.count();
 }
  
 int main()
 {
     std::cout << std::fixed << std::setprecision(2);
     time_it(map_emplace); // cache warmup
     const auto x = time_it(map_emplace, "plain emplace");
     time_it(map_emplace_hint, "emplace with correct hint", x);
     time_it(map_emplace_hint_wrong, "emplace with wrong hint", x);
     time_it(map_emplace_hint_corrected, "corrected emplace", x);
     time_it(map_emplace_hint_closest, "emplace using returned iterator", x);
 }

.SH Possible output:

 143.48ms for plain emplace (ratio: 1.00)
 164.78ms for emplace with correct hint (ratio: 0.87)
 171.22ms for emplace with wrong hint (ratio: 0.84)
 166.55ms for corrected emplace (ratio: 0.86)
 167.41ms for emplace using returned iterator (ratio: 0.86)

.SH See also

   emplace constructs element in-place
           \fI(public member function)\fP 
           inserts elements
   insert  or nodes
           \fI(since C++17)\fP
           \fI(public member function)\fP 
