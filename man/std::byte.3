.TH std::byte 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::byte \- std::byte

.SH Synopsis
   Defined in header <cstddef>
   enum class byte : unsigned char {};  \fI(since C++17)\fP

   std::byte is a distinct type that implements the concept of byte as specified in the
   C++ language definition.

   Like unsigned char, it can be used to access raw memory occupied by other objects
   (object representation), but unlike unsigned char, it is not a character type and is
   not an arithmetic type. std::byte models a mere collection of bits, supporting only
   bitshift operations with an integer, and bitwise and comparison operations with
   another std::byte.

.SH Non-member functions

std::to_integer

   template <class IntegerType>                                \fI(since C++17)\fP
    constexpr IntegerType to_integer( std::byte b ) noexcept;

   Equivalent to: return IntegerType(b); This overload participates in overload
   resolution only if std::is_integral_v<IntegerType> is true.

std::operator<<=,operator>>=

   template <class IntegerType>
    constexpr std::byte& operator<<=( std::byte& b, IntegerType shift \fB(1)\fP \fI(since C++17)\fP
   ) noexcept;
   template <class IntegerType>
    constexpr std::byte& operator>>=( std::byte& b, IntegerType shift \fB(2)\fP \fI(since C++17)\fP
   ) noexcept;

   1) Equivalent to: return b = b << shift; This overload participates in overload
   resolution only if std::is_integral_v<IntegerType> is true.
   2) Equivalent to: return b = b >> shift;

   This overload participates in overload resolution only if
   std::is_integral_v<IntegerType> is true.

std::operator<<,operator>>

   template <class IntegerType>
    constexpr std::byte operator<<( std::byte b, IntegerType shift )  \fB(1)\fP \fI(since C++17)\fP
   noexcept;
   template <class IntegerType>
    constexpr std::byte operator>>( std::byte b, IntegerType shift )  \fB(2)\fP \fI(since C++17)\fP
   noexcept;

   1) Equivalent to: return std::byte(static_cast<unsigned int>(b) << shift); This
   overload participates in overload resolution only if std::is_integral_v<IntegerType>
   is true.
   2) Equivalent to: return std::byte(static_cast<unsigned int>(b) >> shift);

   This overload participates in overload resolution only if
   std::is_integral_v<IntegerType> is true.

std::operator|=,operator&=,operator^=

   constexpr std::byte& operator|=( std::byte& l, std::byte r )       \fB(1)\fP \fI(since C++17)\fP
   noexcept;
   constexpr std::byte& operator&=( std::byte& l, std::byte r )       \fB(2)\fP \fI(since C++17)\fP
   noexcept;
   constexpr std::byte& operator^=( std::byte& l, std::byte r )       \fB(3)\fP \fI(since C++17)\fP
   noexcept;

   1) Equivalent to: return l = l | r;.
   2) Equivalent to: return l = l & r;.
   3) Equivalent to: return l = l ^ r;.

std::operator|,operator&,operator^,operator~

   constexpr std::byte operator|( std::byte l, std::byte r )          \fB(1)\fP \fI(since C++17)\fP
   noexcept;
   constexpr std::byte operator&( std::byte l, std::byte r )          \fB(2)\fP \fI(since C++17)\fP
   noexcept;
   constexpr std::byte operator^( std::byte l, std::byte r )          \fB(3)\fP \fI(since C++17)\fP
   noexcept;
   constexpr std::byte operator~( std::byte b ) noexcept;             \fB(4)\fP \fI(since C++17)\fP

   1) Equivalent to: return std::byte(static_cast<unsigned int>(l) |
   static_cast<unsigned int>(r));.
   2) Equivalent to: return std::byte(static_cast<unsigned int>(l) &
   static_cast<unsigned int>(r));.
   3) Equivalent to: return std::byte(static_cast<unsigned int>(l) ^
   static_cast<unsigned int>(r));.
   4) Equivalent to: return std::byte(~static_cast<unsigned int>(b));

.SH Notes

   A numeric value n can be converted to a byte value using std::byte{n}, due to C++17
   relaxed enum class initialization rules.

   A byte can be converted to a numeric value (such as to produce an integer hash of an
   object) the usual way with an explicit conversion or alternatively with
   std::to_integer.

   Feature-test macro  Value    Std    Feature
   __cpp_lib_byte     201603L \fI(C++17)\fP std::byte

.SH Example

   
// Run this code

 #include <bitset>
 #include <cstddef>
 #include <iostream>
 #include <utility>
  
 std::ostream& operator<<(std::ostream& os, std::byte b)
 {
     return os << std::bitset<8>(std::to_integer<int>(b));
 }
  
 int main()
 {
     // std::byte y = 1; // Error: cannot convert int to byte.
     std::byte y{1}; // OK
  
     // if (y == 13) {} // Error: cannot be compared.
     if (y == std::byte{13}) {} // OK, bytes are comparable
  
     int arr[]{1, 2, 3};
     // int c = a[y]; // Error: array subscript is not an integer
     [[maybe_unused]] int i = arr[std::to_integer<int>(y)]; // OK
     [[maybe_unused]] int j = arr[std::to_underlying(y)]; // OK
  
     std::byte b{42};
     std::cout << "1. " << b << '\\n';
  
     // b *= 2; // Error: b is not of arithmetic type
     b <<= 1;
     std::cout << "2. " << b << '\\n';
  
     b >>= 1;
     std::cout << "3. " << b << '\\n';
  
     std::cout << "4. " << (b << 1) << '\\n';
     std::cout << "5. " << (b >> 1) << '\\n';
  
     b |= std::byte{0b11110000};
     std::cout << "6. " << b << '\\n';
  
     b &= std::byte{0b11110000};
     std::cout << "7. " << b << '\\n';
  
     b ^= std::byte{0b11111111};
     std::cout << "8. " << b << '\\n';
 }

.SH Output:

 1. 00101010
 2. 01010100
 3. 00101010
 4. 01010100
 5. 00010101
 6. 11111010
 7. 11110000
 8. 00001111
