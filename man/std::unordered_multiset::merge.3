.TH std::unordered_multiset::merge 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::unordered_multiset::merge \- std::unordered_multiset::merge

.SH Synopsis
   template< class H2, class P2 >                                     \fB(1)\fP \fI(since C++17)\fP
   void merge( std::unordered_set<Key, H2, P2, Allocator>& source );
   template< class H2, class P2 >                                     \fB(2)\fP \fI(since C++17)\fP
   void merge( std::unordered_set<Key, H2, P2, Allocator>&& source );
   template< class H2, class P2 >
   void merge( std::unordered_multiset<Key, H2, P2, Allocator>&       \fB(3)\fP \fI(since C++17)\fP
   source );
   template< class H2, class P2 >
   void merge( std::unordered_multiset<Key, H2, P2, Allocator>&&      \fB(4)\fP \fI(since C++17)\fP
   source );

   Attempts to extract ("splice") each element in source and insert it into *this using
   the hash function and key equality predicate of *this.

   No elements are copied or moved, only the internal pointers of the container nodes
   are repointed. All pointers and references to the transferred elements remain valid,
   but now refer into *this, not into source. Iterators referring to the transferred
   elements and all iterators referring to *this are invalidated.

   The behavior is undefined if get_allocator() != source.get_allocator().

.SH Parameters

   source - compatible container to transfer the nodes from

.SH Return value

   \fI(none)\fP

.SH Complexity

   Average case O(N), worst case O(N * size() + N), where N is source.size().

.SH Example

   
// Run this code

 #include <iostream>
 #include <unordered_set>
  
 // print out a container
 template<class Os, class K>
 Os& operator<<(Os& os, const std::unordered_multiset<K>& v)
 {
     os << '[' << v.size() << "] {";
     bool o{};
     for (const auto& e : v)
         os << (o ? ", " : (o = 1, " ")) << e;
     return os << " }\\n";
 }
  
 int main()
 {
     std::unordered_multiset<char>
         p{'C', 'B', 'B', 'A'},
         q{'E', 'D', 'E', 'C'};
  
     std::cout << "p: " << p << "q: " << q;
  
     p.merge(q);
  
     std::cout << "p.merge(q);\\n" << "p: " << p << "q: " << q;
 }

.SH Possible output:

 p: [4] { A, B, B, C }
 q: [4] { C, D, E, E }
 p.merge(q);
 p: [8] { E, E, D, A, B, B, C, C }
 q: [0] { }

.SH See also

   extract extracts nodes from the container
   \fI(C++17)\fP \fI(public member function)\fP 
           inserts elements
   insert  or nodes
           \fI(since C++17)\fP
           \fI(public member function)\fP 
