.TH std::exp2,std::exp2f,std::exp2l 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::exp2,std::exp2f,std::exp2l \- std::exp2,std::exp2f,std::exp2l

.SH Synopsis
   Defined in header <cmath>
   float       exp2 ( float num );

   double      exp2 ( double num );                            (until C++23)

   long double exp2 ( long double num );
   /* floating-point-type */                                   (since C++23)
               exp2 ( /* floating-point-type */ num );         (constexpr since C++26)
   float       exp2f( float num );                     \fB(1)\fP \fB(2)\fP \fI(since C++11)\fP
                                                               (constexpr since C++26)
   long double exp2l( long double num );                   \fB(3)\fP \fI(since C++11)\fP
                                                               (constexpr since C++26)
   Additional overloads \fI(since C++11)\fP
   Defined in header <cmath>
   template< class Integer >                               (A) (constexpr since C++26)
   double      exp2 ( Integer num );

   1-3) Computes 2 raised to the given power num.
   The library provides overloads of std::exp2 for all cv-unqualified floating-point
   types as the type of the parameter.
   (since C++23)

   A) Additional overloads are provided for all integer types, which are  \fI(since C++11)\fP
   treated as double.

.SH Parameters

   num - floating-point or integer value

.SH Return value

   If no errors occur, the base-2 exponential of num (2num
   ) is returned.

   If a range error due to overflow occurs, +HUGE_VAL, +HUGE_VALF, or +HUGE_VALL is
   returned.

   If a range error occurs due to underflow, the correct result (after rounding) is
   returned.

.SH Error handling

   Errors are reported as specified in math_errhandling.

   If the implementation supports IEEE floating-point arithmetic (IEC 60559),

     * If the argument is ±0, 1 is returned.
     * If the argument is -∞, +0 is returned.
     * If the argument is +∞, +∞ is returned.
     * If the argument is NaN, NaN is returned.

.SH Notes

   The additional overloads are not required to be provided exactly as (A). They only
   need to be sufficient to ensure that for their argument num of integer type,
   std::exp2(num) has the same effect as std::exp2(static_cast<double>(num)).

   For integral exponents, it may be preferable to use std::ldexp.

.SH Example

   
// Run this code

 #include <cerrno>
 #include <cfenv>
 #include <cmath>
 #include <cstring>
 #include <iostream>
  
 // #pragma STDC FENV_ACCESS ON
  
 int main()
 {
     std::cout << "exp2(4) = " << std::exp2(4) << '\\n'
               << "exp2(0.5) = " << std::exp2(0.5) << '\\n'
               << "exp2(-4) = " << std::exp2(-4) << '\\n';
  
     // special values
     std::cout << "exp2(-0) = " << std::exp2(-0.0) << '\\n'
               << "exp2(-Inf) = " << std::exp2(-INFINITY) << '\\n';
  
     // error handling
     errno = 0;
     std::feclearexcept(FE_ALL_EXCEPT);
     const double inf = std::exp2(1024);
     const bool is_range_error = errno == ERANGE;
  
     std::cout << "exp2(1024) = " << inf << '\\n';
     if (is_range_error)
         std::cout << "    errno == ERANGE: " << std::strerror(ERANGE) << '\\n';
     if (std::fetestexcept(FE_OVERFLOW))
         std::cout << "    FE_OVERFLOW raised\\n";
 }

.SH Possible output:

 exp2\fB(4)\fP = 16
 exp2(0.5) = 1.41421
 exp2(-4) = 0.0625
 exp2(-0) = 1
 exp2(-Inf) = 0
 exp2(1024) = inf
     errno == ERANGE: Numerical result out of range
     FE_OVERFLOW raised

.SH See also

   exp
   expf    returns e raised to the given power (\\({\\small e^x}\\)e^x)
   expl    \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   expm1
   expm1f
   expm1l  returns e raised to the given power, minus one (\\({\\small e^x-1}\\)e^x-1)
   \fI(C++11)\fP \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   ldexp
   ldexpf  multiplies a number by 2 raised to an integral power
   ldexpl  \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   log2
   log2f
   log2l   base 2 logarithm of the given number (\\({\\small\\log_{2}{x}}\\)log[2](x))
   \fI(C++11)\fP \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   C documentation for
   exp2
