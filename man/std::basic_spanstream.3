.TH std::basic_spanstream 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_spanstream \- std::basic_spanstream

.SH Synopsis
   Defined in header <spanstream>
   template<

       class CharT,
       class Traits = std::char_traits<CharT>  (since C++23)
   > class basic_spanstream

       : public basic_iostream<CharT, Traits>

   The class template std::basic_spanstream implements input and output operations on
   streams based on fixed buffers.

   At the low level, the class essentially wraps a raw device implementation of
   std::basic_spanbuf into a higher-level interface of std::basic_iostream. The
   complete interface to unique std::basic_spanbuf members is provided.

   std-basic spanstream-inheritance.svg

                                   Inheritance diagram

   Several typedefs for common character types are provided:

   Defined in header <spanstream>
   Type             Definition
   std::spanstream  std::basic_spanstream<char>
   std::wspanstream std::basic_spanstream<wchar_t>

.SH Member types

   Member type Definition
   char_type   CharT
   traits_type Traits; the program is ill-formed if Traits::char_type is not
               CharT.
   int_type    Traits::int_type
   pos_type    Traits::pos_type
   off_type    Traits::off_type

   Data members

   Member name  Definition
   sb (private) The wrapped std::basic_spanbuf.
                (exposition-only member object*)

.SH Member functions

   constructor       constructs the basic_spanstream
   (C++23)           \fI(public member function)\fP 
   destructor        destroys the basic_spanstream
   \fB[virtual]\fP (C++23) \fI(virtual public member function)\fP
   operator=         move-assignments the basic_spanstream
   (C++23)           \fI(public member function)\fP 
   swap              swaps two basic_spanstream objects
   (C++23)           \fI(public member function)\fP 
   rdbuf             obtains the address of the wrapped raw span device object
   (C++23)           \fI(public member function)\fP 
         Underlying buffer operations
   span              gets or sets the underlying buffer of the wrapped span device
   (C++23)           object
                     \fI(public member function)\fP 

.SH Non-member functions

   std::swap(std::basic_spanstream) specializes the std::swap algorithm
   (C++23)                          \fI(function template)\fP 

Inherited from std::basic_istream

.SH Member functions

.SH Formatted input
   operator>> extracts formatted data
              \fI(public member function of std::basic_istream<CharT,Traits>)\fP 
.SH Unformatted input
   get        extracts characters
              \fI(public member function of std::basic_istream<CharT,Traits>)\fP 
   peek       reads the next character without extracting it
              \fI(public member function of std::basic_istream<CharT,Traits>)\fP 
   unget      unextracts a character
              \fI(public member function of std::basic_istream<CharT,Traits>)\fP 
   putback    puts a character into input stream
              \fI(public member function of std::basic_istream<CharT,Traits>)\fP 
   getline    extracts characters until the given character is found
              \fI(public member function of std::basic_istream<CharT,Traits>)\fP 
   ignore     extracts and discards characters until the given character is found
              \fI(public member function of std::basic_istream<CharT,Traits>)\fP 
   read       extracts blocks of characters
              \fI(public member function of std::basic_istream<CharT,Traits>)\fP 
   readsome   extracts already available blocks of characters
              \fI(public member function of std::basic_istream<CharT,Traits>)\fP 
              returns number of characters extracted by last unformatted input
   gcount     operation
              \fI(public member function of std::basic_istream<CharT,Traits>)\fP 
.SH Positioning
   tellg      returns the input position indicator
              \fI(public member function of std::basic_istream<CharT,Traits>)\fP 
   seekg      sets the input position indicator
              \fI(public member function of std::basic_istream<CharT,Traits>)\fP 
.SH Miscellaneous
   sync       synchronizes with the underlying storage device
              \fI(public member function of std::basic_istream<CharT,Traits>)\fP 

.SH Member classes

   sentry implements basic logic for preparation of the stream for input operations
          \fI(public member class of std::basic_istream<CharT,Traits>)\fP 

Inherited from std::basic_ostream

.SH Member functions

.SH Formatted output
   operator<< inserts formatted data
              \fI(public member function of std::basic_ostream<CharT,Traits>)\fP 
.SH Unformatted output
   put        inserts a character
              \fI(public member function of std::basic_ostream<CharT,Traits>)\fP 
   write      inserts blocks of characters
              \fI(public member function of std::basic_ostream<CharT,Traits>)\fP 
.SH Positioning
   tellp      returns the output position indicator
              \fI(public member function of std::basic_ostream<CharT,Traits>)\fP 
   seekp      sets the output position indicator
              \fI(public member function of std::basic_ostream<CharT,Traits>)\fP 
.SH Miscellaneous
   flush      synchronizes with the underlying storage device
              \fI(public member function of std::basic_ostream<CharT,Traits>)\fP 

.SH Member classes

   sentry implements basic logic for preparation of the stream for output operations
          \fI(public member class of std::basic_ostream<CharT,Traits>)\fP 

Inherited from std::basic_ios

.SH Member types

   Member type Definition
   char_type   CharT
   traits_type Traits
   int_type    Traits::int_type
   pos_type    Traits::pos_type
   off_type    Traits::off_type

.SH Member functions

.SH State functions
   good          checks if no error has occurred i.e. I/O operations are available
                 \fI(public member function of std::basic_ios<CharT,Traits>)\fP 
   eof           checks if end-of-file has been reached
                 \fI(public member function of std::basic_ios<CharT,Traits>)\fP 
   fail          checks if an error has occurred
                 \fI(public member function of std::basic_ios<CharT,Traits>)\fP 
   bad           checks if a non-recoverable error has occurred
                 \fI(public member function of std::basic_ios<CharT,Traits>)\fP 
   operator!     checks if an error has occurred (synonym of fail())
                 \fI(public member function of std::basic_ios<CharT,Traits>)\fP 
   operator bool checks if no error has occurred (synonym of !fail())
                 \fI(public member function of std::basic_ios<CharT,Traits>)\fP 
   rdstate       returns state flags
                 \fI(public member function of std::basic_ios<CharT,Traits>)\fP 
   setstate      sets state flags
                 \fI(public member function of std::basic_ios<CharT,Traits>)\fP 
   clear         modifies state flags
                 \fI(public member function of std::basic_ios<CharT,Traits>)\fP 
.SH Formatting
   copyfmt       copies formatting information
                 \fI(public member function of std::basic_ios<CharT,Traits>)\fP 
   fill          manages the fill character
                 \fI(public member function of std::basic_ios<CharT,Traits>)\fP 
.SH Miscellaneous
   exceptions    manages exception mask
                 \fI(public member function of std::basic_ios<CharT,Traits>)\fP 
   imbue         sets the locale
                 \fI(public member function of std::basic_ios<CharT,Traits>)\fP 
   rdbuf         manages associated stream buffer
                 \fI(public member function of std::basic_ios<CharT,Traits>)\fP 
   tie           manages tied stream
                 \fI(public member function of std::basic_ios<CharT,Traits>)\fP 
   narrow        narrows characters
                 \fI(public member function of std::basic_ios<CharT,Traits>)\fP 
   widen         widens characters
                 \fI(public member function of std::basic_ios<CharT,Traits>)\fP 

Inherited from std::ios_base

.SH Member functions

.SH Formatting
   flags             manages format flags
                     \fI(public member function of std::ios_base)\fP 
   setf              sets specific format flag
                     \fI(public member function of std::ios_base)\fP 
   unsetf            clears specific format flag
                     \fI(public member function of std::ios_base)\fP 
   precision         manages decimal precision of floating point operations
                     \fI(public member function of std::ios_base)\fP 
   width             manages field width
                     \fI(public member function of std::ios_base)\fP 
.SH Locales
   imbue             sets locale
                     \fI(public member function of std::ios_base)\fP 
   getloc            returns current locale
                     \fI(public member function of std::ios_base)\fP 
.SH Internal extensible array
   xalloc            returns a program-wide unique integer that is safe to use as index
   \fB[static]\fP          to pword() and iword()
                     \fI(public static member function of std::ios_base)\fP 
                     resizes the private storage if necessary and access to the long
   iword             element at the given index
                     \fI(public member function of std::ios_base)\fP 
                     resizes the private storage if necessary and access to the void*
   pword             element at the given index
                     \fI(public member function of std::ios_base)\fP 
.SH Miscellaneous
   register_callback registers event callback function
                     \fI(public member function of std::ios_base)\fP 
   sync_with_stdio   sets whether C++ and C I/O libraries are interoperable
   \fB[static]\fP          \fI(public static member function of std::ios_base)\fP 
.SH Member classes
   failure           stream exception
                     \fI(public member class of std::ios_base)\fP 
   Init              initializes standard stream objects
                     \fI(public member class of std::ios_base)\fP 

.SH Member types and constants
   Type           Explanation
                  stream open mode type

                  The following constants are also defined:

                  Constant          Explanation
                  app               seek to the end of stream before each write
                  binary            open in binary mode
   openmode       in                open for reading
                  out               open for writing
                  trunc             discard the contents of the stream when
                                    opening
                  ate               seek to the end of stream immediately after
                                    open
                  noreplace (C++23) open in exclusive mode

                  \fI(typedef)\fP 
                  formatting flags type

                  The following constants are also defined:

                  Constant    Explanation
                  dec         use decimal base for integer I/O: see std::dec
                  oct         use octal base for integer I/O: see std::oct
                  hex         use hexadecimal base for integer I/O: see std::hex
                  basefield   dec | oct | hex. Useful for masking operations
                  left        left adjustment (adds fill characters to the right): see
                              std::left
                  right       right adjustment (adds fill characters to the left): see
                              std::right
                  internal    internal adjustment (adds fill characters to the internal
                              designated point): see std::internal
                  adjustfield left | right | internal. Useful for masking
                              operations
                              generate floating point types using scientific notation,
                  scientific  or hex notation if combined with fixed: see
                              std::scientific
   fmtflags                   generate floating point types using fixed notation, or
                  fixed       hex notation if combined with scientific: see
                              std::fixed
                  floatfield  scientific | fixed. Useful for masking operations
                  boolalpha   insert and extract bool type in alphanumeric format: see
                              std::boolalpha
                              generate a prefix indicating the numeric base for integer
                  showbase    output, require the currency indicator in monetary I/O:
                              see std::showbase
                  showpoint   generate a decimal-point character unconditionally for
                              floating-point number output: see std::showpoint
                  showpos     generate a + character for non-negative numeric output:
                              see std::showpos
                  skipws      skip leading whitespace before certain input operations:
                              see std::skipws
                  unitbuf     flush the output after each output operation: see
                              std::unitbuf
                              replace certain lowercase letters with their uppercase
                  uppercase   equivalents in certain output operations: see
                              std::uppercase

                  \fI(typedef)\fP 
                  state of the stream type

                  The following constants are also defined:

                  Constant Explanation
   iostate        goodbit  no error
                  badbit   irrecoverable stream error
                  failbit  input/output operation failed (formatting or extraction
                           error)
                  eofbit   associated input sequence has reached end-of-file

                  \fI(typedef)\fP 
                  seeking direction type

                  The following constants are also defined:

   seekdir        Constant Explanation
                  beg      the beginning of a stream
                  end      the ending of a stream
                  cur      the current position of stream position indicator

                  \fI(typedef)\fP 
   event          specifies event type
                  \fI(enum)\fP 
   event_callback callback function type
                  \fI(typedef)\fP 

.SH Notes

    Feature-test macro   Value    Std              Feature
   __cpp_lib_spanstream 202106L (C++23) std::spanbuf, std::spanstream
