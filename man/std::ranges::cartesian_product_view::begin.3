.TH std::ranges::cartesian_product_view::begin 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::cartesian_product_view::begin \- std::ranges::cartesian_product_view::begin

.SH Synopsis
   constexpr iterator<false> begin()                                  \fB(1)\fP (since C++23)
       requires (!__simple_view<First> || ... || !__simple_view<Vs>);
   constexpr iterator<true> begin() const
       requires (ranges::range<const First> && ... &&                 \fB(2)\fP (since C++23)
   ranges::range<const Vs>);

   Returns an iterator to the first element of the cartesian_product_view.

   Let bases_ be the tuple of underlying views.

   1) Equivalent to return /*iterator*/<false>(__tuple_transform(ranges::begin,
   bases_));.
   2) Equivalent to return /*iterator*/<true>(__tuple_transform(ranges::begin,
   bases_));.

.SH Parameters

   \fI(none)\fP

.SH Return value

   An iterator to the first element.

.SH Example

   
// Run this code

 #include <array>
 #include <format>
 #include <iostream>
 #include <ranges>
 #include <string_view>
 #include <tuple>
 using namespace std::literals;
  
 int main()
 {
     constexpr auto a = std::array{"Curiously"sv, "Recurring"sv, "Template"sv, "Pattern"sv};
  
     constexpr auto v = std::ranges::cartesian_product_view(a[0], a[1], a[2], a[3]);
  
     constexpr std::tuple<char const&,
                          char const&,
                          char const&,
                          char const&> first{*v.begin()};
  
     std::cout << std::format("{}{}{}{}{}",
                              std::get<0>(first),
                              std::get<1>(first),
                              std::get<2>(first),
                              std::get<3>(first),
                              '\\n');
 }

.SH Output:

 CRTP

.SH See also

   end           returns an iterator or a sentinel to the end
   (C++23)       \fI(public member function)\fP 
   ranges::begin returns an iterator to the beginning of a range
   (C++20)       (customization point object)
