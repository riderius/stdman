.TH std::filesystem::recursive_directory_iterator::recursive_directory_iterator 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::filesystem::recursive_directory_iterator::recursive_directory_iterator \- std::filesystem::recursive_directory_iterator::recursive_directory_iterator

.SH Synopsis
   recursive_directory_iterator() noexcept;                           \fB(1)\fP \fI(since C++17)\fP
   recursive_directory_iterator( const recursive_directory_iterator&  \fB(2)\fP \fI(since C++17)\fP
   other );
   recursive_directory_iterator( recursive_directory_iterator&& other \fB(3)\fP \fI(since C++17)\fP
   ) noexcept;
   explicit recursive_directory_iterator( const                       \fB(4)\fP \fI(since C++17)\fP
   std::filesystem::path& p );
   recursive_directory_iterator(

       const std::filesystem::path& p,                                \fB(5)\fP \fI(since C++17)\fP

       std::filesystem::directory_options options );
   recursive_directory_iterator(

       const std::filesystem::path& p,                                \fB(6)\fP \fI(since C++17)\fP
       std::filesystem::directory_options options,

       std::error_code& ec );
   recursive_directory_iterator( const std::filesystem::path& p,      \fB(7)\fP \fI(since C++17)\fP
   std::error_code& ec );

   Constructs new recursive directory iterator.

   1) Default constructor. Constructs an end iterator.
   2) Copy constructor.
   3) Move constructor.
   4-7) Constructs an iterator that refers to the first entry in the directory that p
   resolves to.

    This section is incomplete
    Reason: errors

.SH Parameters

   p       - path to the filesystem object to which the directory iterator will refer
   ec      - out-parameter for error reporting in the non-throwing overloads
   options - the set of BitmaskType options that control the behavior of the directory
             iterator
   other   - another directory iterator to use as source to initialize the directory
             iterator with

.SH Exceptions

   Any overload not marked noexcept may throw std::bad_alloc if memory allocation
   fails.

   4,5) Throws std::filesystem::filesystem_error on underlying OS API errors,
   constructed with p as the first path argument and the OS error code as the error
   code argument.
   6,7) Sets a std::error_code& parameter to the OS API error code if an OS API call
   fails, and executes ec.clear() if no errors occur.

.SH Notes

   Recursive directory iterators do not follow directory symlinks by default. To enable
   this behavior, specify directory_options::follow_directory_symlink among the options
   option set.

.SH Example

    This section is incomplete
    Reason: no example

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to              Behavior as published              Correct behavior
   LWG 3013 C++17      error_code overload marked noexcept but can     noexcept removed
                       allocate memory

.SH Categories:
     * Todo with reason
     * Todo no example
