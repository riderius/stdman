.TH std::atomic_ref::operator&=,|=,^= 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::atomic_ref::operator&=,|=,^= \- std::atomic_ref::operator&=,|=,^=

.SH Synopsis
   member only of atomic_ref<Integral> specializations
   T operator&=( T arg ) const noexcept;               \fB(1)\fP \fI(since C++20)\fP
   T operator|=( T arg ) const noexcept;               \fB(2)\fP \fI(since C++20)\fP
   T operator^=( T arg ) const noexcept;               \fB(3)\fP \fI(since C++20)\fP

   Atomically replaces the current value of the referenced object with the result of
   computation involving the previous value and arg. These operations are
   read-modify-write operations.

     * operator&= performs atomic bitwise AND. Equivalent to return fetch_and(arg) &
       arg;.
     * operator!= performs atomic bitwise OR. Equivalent to return fetch_or(arg) |
       arg;.
     * operator^= performs atomic bitwise XOR. Equivalent to return fetch_xor(arg) ^
       arg;.

.SH Parameters

   arg - the argument for the arithmetic operation

.SH Return value

   The resulting value (that is, the result of applying the corresponding binary
   operator to the value immediately preceding the effects of the corresponding member
   function).

.SH Notes

   Unlike most compound assignment operators, the compound assignment operators for
   atomic_ref do not return a reference to their left-hand arguments. They return a
   copy of the stored value instead.

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

                   atomically performs bitwise AND between the argument and the value
   fetch_and       of the referenced object and obtains the value held previously
                   \fI(public member function)\fP 
                   atomically performs bitwise OR between the argument and the value of
   fetch_or        the referenced object and obtains the value held previously
                   \fI(public member function)\fP 
                   atomically performs bitwise XOR between the argument and the value
   fetch_xor       of the referenced object and obtains the value held previously
                   \fI(public member function)\fP 
   operator++
   operator++(int) atomically increments or decrements the referenced object by one
   operator--      \fI(public member function)\fP 
   operator--(int)
   operator+=      atomically adds to or subtracts from the referenced value
   operator-=      \fI(public member function)\fP 

.SH Category:
     * Todo no example
