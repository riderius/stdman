.TH std::ranges::elements_view::iterator::operator[] 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::elements_view::iterator::operator[] \- std::ranges::elements_view::iterator::operator[]

.SH Synopsis
   constexpr decltype(auto) operator[]( difference_type n ) const  \fI(since C++20)\fP
       requires ranges::random_access_range<Base>;

   Returns an element at specified relative location, as if by
   /*get-element*/(this->base() + n), where for an expression e, /*get-element*/(e) is

     * std::get<N>(*e), if ranges::range_reference_t<Base> is a reference type.
       Otherwise,
     * static_cast<E>(std::get<N>(*e)), where E is
       std::remove_cv_t<std::tuple_element_t<N, ranges::range_reference_t<Base>>>.

.SH Parameters

   n - position relative to current location

.SH Return value

   The element at displacement n relative to the current location.

.SH Example

   
// Run this code

 #include <iostream>
 #include <ranges>
 #include <string_view>
 #include <tuple>
  
 int main()
 {
     using T = std::tuple<int, char, std::string_view>;
  
     const auto il =
     {
         T{1, 'A', "α"},
         T{2, 'B', "β"},
         T{3, 'C', "γ"},
     };
  
     std::cout << std::views::elements<0>(il)[1] << ' '   // 2
               << std::views::elements<1>(il)[1] << ' '   // B
               << std::views::elements<2>(il)[1] << '\\n'; // β
 }

.SH Output:

 2 B β

.SH See also

   operator* accesses the N^th tuple element
   (C++20)   \fI(public member function)\fP
