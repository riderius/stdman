.TH std::allocation_result 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::allocation_result \- std::allocation_result

.SH Synopsis
   Defined in header <memory>
   template< class Pointer, class SizeType = std::size_t >  (since C++23)
   struct allocation_result;

   allocation_result specializations are returned from the allocate_at_least member
   function of appropriate Allocator types (e.g. std::allocator::allocate_at_least) and
   std::allocator_traits::allocate_at_least.

   Every specialization of allocation_result has no base classes or declared members
   other than ptr and count, thus it is suitable for aggregate initialization and
   structured binding.

.SH Template parameters

   Pointer  - typically std::allocator_traits<Alloc>::pointer, where Alloc is an
              Allocator type
   SizeType - typically std::allocator_traits<Alloc>::size_type, where Alloc is an
              Allocator type

   Data members

   Member name Definition
               a pointer of type Pointer which is typically used for the address of the
   ptr         first element in the storage allocated by allocate_at_least
               \fI(public member object)\fP
               a value of type SizeType which is typically used for the actual number
   count       of elements in the storage allocated by allocate_at_least
               \fI(public member object)\fP

.SH Notes

   Pointer and SizeType are a pointer to an object type and
   std::make_unsigned_t<std::ptrdiff_t> (which is almost always same as std::size_t) by
   default.

       Feature-test macro       Value    Std                   Feature
   __cpp_lib_allocate_at_least 202302L (C++23) Size-feedback in the Allocator interface

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   allocate_at_least allocates uninitialized storage at least as large as requested
   (C++23)           size
                     \fI(public member function of std::allocator<T>)\fP 
                     allocates storage at least as large as the requested size via an
   allocate_at_least allocator
   \fB[static]\fP (C++23)  \fI(public static member function of std::allocator_traits<Alloc>)\fP
                     

.SH Category:
     * Todo no example
