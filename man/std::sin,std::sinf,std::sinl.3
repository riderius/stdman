.TH std::sin,std::sinf,std::sinl 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::sin,std::sinf,std::sinl \- std::sin,std::sinf,std::sinl

.SH Synopsis
   Defined in header <cmath>
   float       sin ( float num );

   double      sin ( double num );                            (until C++23)

   long double sin ( long double num );
   /* floating-point-type */                                  (since C++23)
               sin ( /* floating-point-type */ num );         (constexpr since C++26)
   float       sinf( float num );                     \fB(1)\fP \fB(2)\fP \fI(since C++11)\fP
                                                              (constexpr since C++26)
   long double sinl( long double num );                   \fB(3)\fP \fI(since C++11)\fP
                                                              (constexpr since C++26)
   Additional overloads \fI(since C++11)\fP
   Defined in header <cmath>
   template< class Integer >                              (A) (constexpr since C++26)
   double      sin ( Integer num );

   1-3) Computes the sine of num (measured in radians).
   The library provides overloads of std::sin for all cv-unqualified floating-point
   types as the type of the parameter.
   (since C++23)

   A) Additional overloads are provided for all integer types, which are  \fI(since C++11)\fP
   treated as double.

.SH Parameters

   num - floating-point or integer value representing angle in radians

.SH Return value

   If no errors occur, the sine of num (sin(num)) in the range [-1, +1], is returned.

   The result may have little or no significance if the magnitude of num  \fI(until C++11)\fP
   is large.

   If a domain error occurs, an implementation-defined value is returned (NaN where
   supported).

   If a range error occurs due to underflow, the correct result (after rounding) is
   returned.

.SH Error handling

   Errors are reported as specified in math_errhandling.

   If the implementation supports IEEE floating-point arithmetic (IEC 60559),

     * if the argument is ±0, it is returned unmodified.
     * if the argument is ±∞, NaN is returned and FE_INVALID is raised.
     * if the argument is NaN, NaN is returned.

.SH Notes

   The case where the argument is infinite is not specified to be a domain error in C
   (to which C++ defers), but it is defined as a domain error in POSIX.

   POSIX also specifies that in case of underflow, num is returned unmodified, and if
   that is not supported, an implementation-defined value no greater than DBL_MIN,
   FLT_MIN, and LDBL_MIN is returned.

   The additional overloads are not required to be provided exactly as (A). They only
   need to be sufficient to ensure that for their argument num of integer type,
   std::sin(num) has the same effect as std::sin(static_cast<double>(num)).

.SH Example

   
// Run this code

 #include <cerrno>
 #include <cfenv>
 #include <cmath>
 #include <iomanip>
 #include <iostream>
  
 // #pragma STDC FENV_ACCESS ON
  
 const double pi = std::acos(-1); // or std::numbers::pi since C++20
  
 constexpr double your_sin(double x)
 {
     double sin{0}, pow{x};
     for (auto fac{1LLU}, n{1ULL}; n != 20; fac *= ++n, pow *= x)
         if (n & 1)
             sin += (n & 2 ? -pow : pow) / fac;
     return sin;
 }
  
 int main()
 {
     std::cout << std::setprecision(10) << std::showpos
               << "Typical usage:\\n"
               << "std::sin(pi/6) = " << std::sin(pi / 6) << '\\n'
               << "your sin(pi/6) = " << your_sin(pi / 6) << '\\n'
               << "std::sin(pi/2) = " << std::sin(pi / 2) << '\\n'
               << "your sin(pi/2) = " << your_sin(pi / 2) << '\\n'
               << "std::sin(-3*pi/4) = " << std::sin(-3 * pi / 4) << '\\n'
               << "your sin(-3*pi/4) = " << your_sin(-3 * pi / 4) << '\\n'
               << "Special values:\\n"
               << "std::sin(+0) = " << std::sin(0.0) << '\\n'
               << "std::sin(-0) = " << std::sin(-0.0) << '\\n';
  
     // error handling
     std::feclearexcept(FE_ALL_EXCEPT);
  
     std::cout << "std::sin(INFINITY) = " << std::sin(INFINITY) << '\\n';
     if (std::fetestexcept(FE_INVALID))
         std::cout << "    FE_INVALID raised\\n";
 }

.SH Possible output:

 Typical usage:
 std::sin(pi/6) = +0.5
 your sin(pi/6) = +0.5
 std::sin(pi/2) = +1
 your sin(pi/2) = +1
 std::sin(-3*pi/4) = -0.7071067812
 your sin(-3*pi/4) = -0.7071067812
 Special values:
 std::sin(+0) = +0
 std::sin(-0) = -0
 std::sin(INFINITY) = -nan
     FE_INVALID raised

.SH See also

   cos
   cosf               computes cosine (\\({\\small\\cos{x}}\\)cos(x))
   cosl               \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   tan
   tanf               computes tangent (\\({\\small\\tan{x}}\\)tan(x))
   tanl               \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   asin
   asinf              computes arc sine (\\({\\small\\arcsin{x}}\\)arcsin(x))
   asinl              \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   sin(std::complex)  computes sine of a complex number (\\({\\small\\sin{z}}\\)sin(z))
                      \fI(function template)\fP 
   sin(std::valarray) applies the function std::sin to each element of valarray
                      \fI(function template)\fP 
   C documentation for
   sin
