.TH std::count,std::count_if 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::count,std::count_if \- std::count,std::count_if

.SH Synopsis
   Defined in header <algorithm>
   template< class InputIt, class T >
                                                                (constexpr
   typename                                                     since C++20)
   std::iterator_traits<InputIt>::difference_type               (until
                                                                C++26)
       count( InputIt first, InputIt last, const T&
   value );
   template< class InputIt, class T = typename
   std::iterator_traits

                                        
    <InputIt>::value_type >                                     (since
   constexpr typename                                           C++26)
   std::iterator_traits<InputIt>::difference_type

       count( InputIt first, InputIt last, const T&
   value );
   template< class ExecutionPolicy, class ForwardIt,
   class T >
                                                                             (since
   typename                                                                  C++17)
   std::iterator_traits<ForwardIt>::difference_type                          (until
       count( ExecutionPolicy&& policy,                                      C++26)

              ForwardIt first, ForwardIt last, const T&
   value );
   template< class ExecutionPolicy,                     \fB(1)\fP

             class ForwardIt, class T = typename
   std::iterator_traits
                                          
    <ForwardIt>::value_type >                                                (since
   typename                                                                  C++26)
   std::iterator_traits<ForwardIt>::difference_type
       count( ExecutionPolicy&& policy,
                                                            \fB(2)\fP
              ForwardIt first, ForwardIt last, const T&
   value );
   template< class InputIt, class UnaryPred >

   typename                                                                  (constexpr
   std::iterator_traits<InputIt>::difference_type               \fB(3)\fP          since
                                                                             C++20)
       count_if( InputIt first, InputIt last, UnaryPred
   p );
   template< class ExecutionPolicy, class ForwardIt,
   class UnaryPred >

   typename                                                                  (since
   std::iterator_traits<ForwardIt>::difference_type             \fB(4)\fP          C++17)
       count_if( ExecutionPolicy&& policy,

                 ForwardIt first, ForwardIt last,
   UnaryPred p );

   Returns the number of elements in the range [first, last) satisfying specific
   criteria.

   1) Counts the elements that are equal to value (using operator==).
   3) Counts elements for which predicate p returns true.
   2,4) Same as (1,3), but executed according to policy.
   These overloads participate in overload resolution only if

   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true.        (until
                                                                             C++20)
   std::is_execution_policy_v<std::remove_cvref_t<ExecutionPolicy>> is true. (since
                                                                             C++20)

.SH Parameters

   first, last - the range of elements to examine
   value       - the value to search for
   policy      - the execution policy to use. See execution policy for details.
                 unary predicate which returns true for the required elements.

                 The expression p(v) must be convertible to bool for every argument v
   p           - of type (possibly const) VT, where VT is the value type of InputIt,
                 regardless of value category, and must not modify v. Thus, a parameter
                 type of VT&is not allowed
                 , nor is VT unless for VT a move is equivalent to a copy
                 \fI(since C++11)\fP.
.SH Type requirements
   -
   InputIt must meet the requirements of LegacyInputIterator.
   -
   ForwardIt must meet the requirements of LegacyForwardIterator.
   -
   UnaryPred must meet the requirements of Predicate.

.SH Return value

   The number of iterators it in the range [first, last) satisfying the following
   condition:

   1,2) *it == value is true.
   3,4) p(*it) != false is true.

.SH Complexity

   Given \\(\\scriptsize N\\)N as std::distance(first, last):

   1,2) Exactly \\(\\scriptsize N\\)N comparisons with value using operator==.
   3,4) Exactly \\(\\scriptsize N\\)N applications of the predicate p.

.SH Exceptions

   The overloads with a template parameter named ExecutionPolicy report errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the standard policies, std::terminate is called.
       For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Notes

   For the number of elements in the range [first, last) without any additional
   criteria, see std::distance.

             Feature-test macro           Value    Std              Feature
   __cpp_lib_algorithm_default_value_type 202403 (C++26) List-initialization for
                                                         algorithms (1,2)

.SH Possible implementation

   See also the implementations of count in libstdc++ and libc++.

   See also the implementations of count_if in libstdc++ and libc++.

                                           count
   template<class InputIt, class T = typename std::iterator_traits<InputIt>::value_type>
   typename std::iterator_traits<InputIt>::difference_type
       count(InputIt first, InputIt last, const T& value)
   {
       typename std::iterator_traits<InputIt>::difference_type ret = 0;
       for (; first != last; ++first)
           if (*first == value)
               ++ret;
       return ret;
   }
                                         count_if
   template<class InputIt, class UnaryPred>
   typename std::iterator_traits<InputIt>::difference_type
       count_if(InputIt first, InputIt last, UnaryPred p)
   {
       typename std::iterator_traits<InputIt>::difference_type ret = 0;
       for (; first != last; ++first)
           if (p(*first))
               ++ret;
       return ret;
   }

.SH Example

   
// Run this code

 #include <algorithm>
 #include <array>
 #include <cassert>
 #include <complex>
 #include <iostream>
 #include <iterator>
  
 int main()
 {
     constexpr std::array v{1, 2, 3, 4, 4, 3, 7, 8, 9, 10};
     std::cout << "v: ";
     std::copy(v.cbegin(), v.cend(), std::ostream_iterator<int>(std::cout, " "));
     std::cout << '\\n';
  
     // Determine how many integers match a target value.
     for (const int target : {3, 4, 5})
     {
         const int num_items = std::count(v.cbegin(), v.cend(), target);
         std::cout << "number: " << target << ", count: " << num_items << '\\n';
     }
  
     // Use a lambda expression to count elements divisible by 4.
     int count_div4 = std::count_if(v.begin(), v.end(), [](int i) { return i % 4 == 0; });
     std::cout << "numbers divisible by four: " << count_div4 << '\\n';
  
     // A simplified version of `distance` with O(N) complexity:
     auto distance = [](auto first, auto last)
     {
         return std::count_if(first, last, [](auto) { return true; });
     };
     static_assert(distance(v.begin(), v.end()) == 10);
  
     std::array<std::complex<double>, 3> nums{{{4, 2}, {1, 3}, {4, 2}}};
     #ifdef __cpp_lib_algorithm_default_value_type
         // T gets deduced making list-initialization possible
         auto c = std::count(nums.cbegin(), nums.cend(), {4, 2});
     #else
         auto c = std::count(nums.cbegin(), nums.cend(), std::complex<double>{4, 2});
     #endif
     assert(c == 2);
 }

.SH Output:

 v: 1 2 3 4 4 3 7 8 9 10
 number: 3, count: 2
 number: 4, count: 2
 number: 5, count: 0
 numbers divisible by four: 3

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

     DR    Applied to           Behavior as published              Correct behavior
                      T was required to be EqualityComparable,
   LWG 283 C++98      but                                       removed the requirement
                      the value type of InputIt is not always T

.SH See also

   distance         returns the distance between two iterators
                    \fI(function template)\fP 
   ranges::count
   ranges::count_if returns the number of elements satisfying specific criteria
   (C++20)          (niebloid)
   (C++20)
