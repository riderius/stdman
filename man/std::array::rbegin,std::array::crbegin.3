.TH std::array::rbegin,std::array::crbegin 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::array::rbegin,std::array::crbegin \- std::array::rbegin,std::array::crbegin

.SH Synopsis
   reverse_iterator rbegin() noexcept;              \fB(1)\fP \fI(since C++11)\fP
                                                        (constexpr since C++17)
   const_reverse_iterator rbegin() const noexcept;  \fB(2)\fP \fI(since C++11)\fP
                                                        (constexpr since C++17)
   const_reverse_iterator crbegin() const noexcept; \fB(3)\fP \fI(since C++11)\fP
                                                        (constexpr since C++17)

   Returns a reverse iterator to the first element of the reversed array. It
   corresponds to the last element of the non-reversed array. If the array is empty,
   the returned iterator is equal to rend().

   range-rbegin-rend.svg

.SH Parameters

   \fI(none)\fP

.SH Return value

   Reverse iterator to the first element.

.SH Complexity

   Constant.

.SH Notes

   The underlying iterator of the returned reverse iterator is the end iterator. Hence
   the returned iterator is invalidated if and when the end iterator is invalidated.

.SH Example

   
// Run this code

 #include <algorithm>
 #include <array>
 #include <iostream>
 #include <string>
 #include <string_view>
  
 int main()
 {
     constexpr std::array<std::string_view, 8> data = {"▁","▂","▃","▄","▅","▆","▇","█"};
  
     std::array<std::string, std::size(data)> arr;
  
     std::copy(data.cbegin(), data.cend(), arr.begin());
     //             ^              ^           ^
  
     auto print = [](const std::string_view s) { std::cout << s << ' '; };
  
     print("Print 'arr' in direct order using [cbegin, cend):\\t");
     std::for_each(arr.cbegin(), arr.cend(), print);
     //                ^             ^
     print("\\n\\nPrint 'arr' in reverse order using [crbegin, crend):\\t");
     std::for_each(arr.crbegin(), arr.crend(), print);
     //                ^^             ^^
     print("\\n");
 }

.SH Output:

 Print 'arr' in direct order using [cbegin, cend):        ▁ ▂ ▃ ▄ ▅ ▆ ▇ █
  
 Print 'arr' in reverse order using [crbegin, crend):     █ ▇ ▆ ▅ ▄ ▃ ▂ ▁

.SH See also

   rend    returns a reverse iterator to the end
   crend   \fI(public member function)\fP 
   rbegin  returns a reverse iterator to the beginning of a container or array
   crbegin \fI(function template)\fP 
   \fI(C++14)\fP
