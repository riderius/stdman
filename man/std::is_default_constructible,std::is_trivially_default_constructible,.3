.TH std::is_default_constructible,std::is_trivially_default_constructible, 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_default_constructible,std::is_trivially_default_constructible, \- std::is_default_constructible,std::is_trivially_default_constructible,

.SH Synopsis

   Defined in header <type_traits>
   template< class T >                        \fB(1)\fP \fI(since C++11)\fP
   struct is_default_constructible;
   template< class T >                        \fB(2)\fP \fI(since C++11)\fP
   struct is_trivially_default_constructible;
   template< class T >                        \fB(3)\fP \fI(since C++11)\fP
   struct is_nothrow_default_constructible;

   1) Provides the member constant value equal to std::is_constructible<T>::value.
   2) Provides the member constant value equal to
   std::is_trivially_constructible<T>::value.
   3) Provides the member constant value equal to
   std::is_nothrow_constructible<T>::value.

   If T is not a complete type, (possibly cv-qualified) void, or an array of unknown
   bound, the behavior is undefined.

   If an instantiation of a template above depends, directly or indirectly, on an
   incomplete type, and that instantiation could yield a different result if that type
   were hypothetically completed, the behavior is undefined.

   If the program adds specializations for any of the templates described on this page,
   the behavior is undefined.

.SH Member constants

   value    true if T is default-constructible, false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Possible implementation

   template<class T>
   struct is_default_constructible : std::is_constructible<T> {};
    
   template<class T>
   struct is_trivially_default_constructible : std::is_trivially_constructible<T> {};
    
   template<class T>
   struct is_nothrow_default_constructible : std::is_nothrow_constructible<T> {};

.SH Notes

   In many implementations, std::is_nothrow_default_constructible also checks if the
   destructor throws because it is effectively noexcept(T()). Same applies to
   std::is_trivially_default_constructible, which, in these implementations, also
   requires that the destructor is trivial: GCC bug 51452, LWG issue 2116.

   std::is_default_constructible<T> does not test that T x; would compile; it attempts
   direct-initialization with an empty argument list (see std::is_constructible). Thus,
   std::is_default_constructible_v<const int> and std::is_default_constructible_v<const
   int[10]> are true.

.SH Example

   
// Run this code

 #include <string>
 #include <type_traits>
  
 struct S1
 {
     std::string str; // member has a non-trivial default constructor
 };
 static_assert(std::is_default_constructible_v<S1> == true);
 static_assert(std::is_trivially_default_constructible_v<S1> == false);
  
 struct S2
 {
     int n;
     S2() = default; // trivial and non-throwing
 };
 static_assert(std::is_trivially_default_constructible_v<S2> == true);
 static_assert(std::is_nothrow_default_constructible_v<S2> == true);
  
 int main() {}

.SH See also

   is_constructible
   is_trivially_constructible      checks if a type has a constructor for specific
   is_nothrow_constructible        arguments
   \fI(C++11)\fP                         \fI(class template)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   is_copy_constructible
   is_trivially_copy_constructible
   is_nothrow_copy_constructible   checks if a type has a copy constructor
   \fI(C++11)\fP                         \fI(class template)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   is_move_constructible
   is_trivially_move_constructible checks if a type can be constructed from an rvalue
   is_nothrow_move_constructible   reference
   \fI(C++11)\fP                         \fI(class template)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   default_initializable           specifies that an object of a type can be default
   (C++20)                         constructed
                                   (concept) 
