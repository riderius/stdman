.TH std::ranges::lazy_split_view::begin 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::lazy_split_view::begin \- std::ranges::lazy_split_view::begin

.SH Synopsis
   constexpr auto begin();                                            \fB(1)\fP \fI(since C++20)\fP
   constexpr auto begin() const
     requires ranges::forward_range<V> && ranges::forward_range<const \fB(2)\fP \fI(since C++20)\fP
   V>;

   Returns an outer_iterator to the first element of the lazy_split_view.

   Let base_ be the underlying view.

   1) Equivalent to

 constexpr auto begin() {
   if constexpr (ranges::forward_range<V>)
     return /*outer_iterator*/</*simple_view*/<V>>{*this, ranges::begin(base_)};
   else {
     current_ = ranges::begin(base_);
     return /*outer_iterator*/<false>{*this};
   }
 }

   2) Equivalent to return /*outer_iterator*/<true>{*this, ranges::begin(base_)};.

.SH Parameters

   \fI(none)\fP

.SH Return value

   outer_iterator to the first element.

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   end           returns an iterator or a sentinel to the end
   (C++20)       \fI(public member function)\fP 
   ranges::begin returns an iterator to the beginning of a range
   (C++20)       (customization point object)

.SH Category:
     * Todo no example
