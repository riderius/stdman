.TH std::ranges::chunk_view::base 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::chunk_view::base \- std::ranges::chunk_view::base

.SH Synopsis
   constexpr V base() const& requires std::copy_constructible<V>; \fB(1)\fP (since C++23)
   constexpr V base() &&;                                         \fB(2)\fP (since C++23)

   Returns a copy of the underlying view.

   Let base_ be the underlying view.

   1) Copy constructs the result from the underlying view. Equivalent to return base_;
   2) Move constructs the result from the underlying view. Equivalent to return
   std::move(base_);

.SH Parameters

   \fI(none)\fP

.SH Return value

   A copy of the underlying view.

.SH Example

   A link to test the example online: Compiler Explorer.

   
// Run this code

 #include <print>
 #include <ranges>
  
 int main()
 {
     static constexpr auto v = {1, 2, 3, 4};
     constexpr auto w{std::ranges::chunk_view(v, 2)};
     std::println("{}", w.base());
 }

.SH Output:

 [1, 2, 3, 4]
