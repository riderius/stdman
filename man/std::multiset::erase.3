.TH std::multiset::erase 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::multiset::erase \- std::multiset::erase

.SH Synopsis
   iterator erase( iterator pos );                          (until C++23)
   iterator erase( iterator pos )
       requires(!std::same_as<iterator,                     (since C++23)
   const_iterator>);
   iterator erase( const_iterator pos );                \fB(2)\fP \fI(since C++11)\fP
   iterator erase( iterator first, iterator last ); \fB(1)\fP                   \fI(until C++11)\fP
   iterator erase( const_iterator first,                                  \fI(since C++11)\fP
   const_iterator last );                               \fB(3)\fP
   size_type erase( const Key& key );                       \fB(4)\fP
   template< class K >                                      \fB(5)\fP           (since C++23)
   size_type erase( K&& x );

   Removes specified elements from the container. The order of the remaining equivalent
   elements is preserved.

   1,2) Removes the element at pos.
   Only one overload is provided if iterator and const_iterator are the same type.
   \fI(since C++11)\fP
   3) Removes the elements in the range [first, last), which must be a valid range in
   *this.
   4) Removes all elements with the key equivalent to key.
   5) Removes all elements with key that compares equivalent to the value x. This
   overload participates in overload resolution only if the qualified-id
   Compare::is_transparent is valid and denotes a type, and neither iterator nor
   const_iterator is implicitly convertible from K. It allows calling this function
   without constructing an instance of Key.

   References and iterators to the erased elements are invalidated. Other references
   and iterators are not affected.

   The iterator pos must be valid and dereferenceable. Thus the end() iterator (which
   is valid, but is not dereferenceable) cannot be used as a value for pos.

.SH Parameters

   pos         - iterator to the element to remove
   first, last - range of elements to remove
   key         - key value of the elements to remove
   x           - a value of any type that can be transparently compared with a key
                 denoting the elements to remove

.SH Return value

   1-3) Iterator following the last removed element.
   4) Number of elements removed.
   5) Number of elements removed.

.SH Exceptions

   1-3) Throws nothing.
   4,5) Any exceptions thrown by the Compare object.

.SH Complexity

   Given an instance c of multiset:

   1,2) Amortized constant
   3) log(c.size()) + std::distance(first, last)
   4) log(c.size()) + c.count(key)
   5) log(c.size()) + c.count(x)

.SH Notes

               Feature-test macro               Value    Std           Feature
                                                               Heterogeneous erasure in
                                                               associative containers
   __cpp_lib_associative_heterogeneous_erasure 202110L (C++23) and unordered
                                                               associative containers;
                                                               overload \fB(5)\fP

.SH Example

   
// Run this code

 #include <set>
 #include <iostream>
  
 int main()
 {
     std::multiset<int> c = {1, 2, 3, 4, 1, 2, 3, 4};
  
     auto print = [&c]
     {
         std::cout << "c = { ";
         for (int n : c)
             std::cout << n << ' ';
         std::cout << "}\\n";
     };
     print();
  
     std::cout << "Erase all odd numbers:\\n";
     for (auto it = c.begin(); it != c.end();)
     {
         if (*it % 2 != 0)
             it = c.erase(it);
         else
             ++it;
     }
     print();
  
     std::cout << "Erase 1, erased count: " << c.erase(1) << '\\n';
     std::cout << "Erase 2, erased count: " << c.erase(2) << '\\n';
     std::cout << "Erase 2, erased count: " << c.erase(2) << '\\n';
     print();
 }

  Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to          Behavior as published              Correct behavior
                       the return type of overloads (1) and (3)
   LWG 130  C++98      was void (it is not                      corrected to iterator
                       consistent with the erase() requirement
                       on sequence containers)
                       the order of equivalent elements that
   LWG 371  C++98      are not                                  required to be
                       erased was not guaranteed to be          preserved
                       preserved
   LWG 2059 C++11      replacing overload (1) with overload (2) added overload (1) back
                       introduced new ambiguity

.SH See also

   clear clears the contents
         \fI(public member function)\fP 
