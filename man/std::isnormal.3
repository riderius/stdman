.TH std::isnormal 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::isnormal \- std::isnormal

.SH Synopsis
   Defined in header <cmath>
   bool isnormal( float num );
                                                                \fI(since C++11)\fP
   bool isnormal( double num );                                 (until C++23)

   bool isnormal( long double num );
   constexpr bool isnormal( /* floating-point-type */   \fB(1)\fP     (since C++23)
   num );
   Additional overloads
   Defined in header <cmath>
   template< class Integer >                                (A) \fI(since C++11)\fP
   bool isnormal( Integer num );                                (constexpr since C++23)

   1) Determines if the given floating point number num is normal, i.e. is neither
   zero, subnormal, infinite, nor NaN.
   The library provides overloads for all cv-unqualified floating-point types as the
   type of the parameter num.
   (since C++23)
   A) Additional overloads are provided for all integer types, which are treated as
   double.

.SH Parameters

   num - floating-point or integer value

.SH Return value

   true if num is normal, false otherwise.

.SH Notes

   The additional overloads are not required to be provided exactly as (A). They only
   need to be sufficient to ensure that for their argument num of integer type,
   std::isnormal(num) has the same effect as std::isnormal(static_cast<double>(num)).

.SH Example

   
// Run this code

 #include <cfloat>
 #include <cmath>
 #include <iostream>
  
 int main()
 {
     std::cout << std::boolalpha
               << "isnormal(NaN) = " << std::isnormal(NAN) << '\\n'
               << "isnormal(Inf) = " << std::isnormal(INFINITY) << '\\n'
               << "isnormal(0.0) = " << std::isnormal(0.0) << '\\n'
               << "isnormal(DBL_MIN/2.0) = " << std::isnormal(DBL_MIN / 2.0) << '\\n'
               << "isnormal(1.0) = " << std::isnormal(1.0) << '\\n';
 }

.SH Output:

 isnormal(NaN) = false
 isnormal(Inf) = false
 isnormal(0.0) = false
 isnormal(DBL_MIN/2.0) = false
 isnormal(1.0) = true

.SH See also

   fpclassify categorizes the given floating-point value
   \fI(C++11)\fP    \fI(function)\fP 
   isfinite   checks if the given number has finite value
   \fI(C++11)\fP    \fI(function)\fP 
   isinf      checks if the given number is infinite
   \fI(C++11)\fP    \fI(function)\fP 
   isnan      checks if the given number is NaN
   \fI(C++11)\fP    \fI(function)\fP 
   C documentation for
   isnormal
