.TH std::filesystem::path::c_str,std::filesystem::path::native, 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::filesystem::path::c_str,std::filesystem::path::native, \- std::filesystem::path::c_str,std::filesystem::path::native,

.SH Synopsis

   const value_type* c_str() const noexcept;   \fB(1)\fP \fI(since C++17)\fP
   const string_type& native() const noexcept; \fB(2)\fP \fI(since C++17)\fP
   operator string_type() const;               \fB(3)\fP \fI(since C++17)\fP

   Accesses the native path name as a character string.

   1) Equivalent to native().c_str().
   2) Returns the native-format representation of the pathname by reference.
   3) Returns the native-format representation of the pathname by value.

.SH Parameters

   \fI(none)\fP

.SH Return value

   The native string representation of the pathname, using native syntax, native
   character type, and native character encoding. This string is suitable for use with
   OS APIs.

.SH Notes

   The conversion function \fB(3)\fP is provided so that APIs that accept std::basic_string
   file names can use pathnames with no changes to code.

.SH Example

   
// Run this code

 #include <cstdio>
 #ifdef _MSC_VER
 #include <fcntl.h>
 #include <io.h>
 #else
 #include <clocale>
 #include <locale>
 #endif
 #include <filesystem>
 #include <fstream>
  
 int main()
 {
 #ifdef _MSC_VER
     _setmode(_fileno(stderr), _O_WTEXT);
 #else
     std::setlocale(LC_ALL, "");
     std::locale::global(std::locale(""));
 #endif
  
     std::filesystem::path p(u8"要らない.txt");
     std::ofstream(p) << "File contents"; // Prior to LWG2676 uses operator string_type()
                                          // on MSVC, where string_type is wstring, only
                                          // works due to non-standard extension.
                                          // Post-LWG2676 uses new fstream constructors
  
     // Native string representation can be used with OS-specific APIs
 #ifdef _MSC_VER
     if (std::FILE* f = _wfopen(p.c_str(), L"r"))
 #else
     if (std::FILE* f = std::fopen(p.c_str(), "r"))
 #endif
     {
         for (int ch; (ch = fgetc(f)) != EOF; std::putchar(ch))
         {}
         std::fclose(f);
     }
  
     std::filesystem::remove(p);
 }

.SH Possible output:

 File contents

.SH See also

   string
   wstring           returns the path in native pathname format converted to a string
   u8string          \fI(public member function)\fP 
   u16string
   u32string
   generic_string
   generic_wstring   returns the path in generic pathname format converted to a string
   generic_u8string  \fI(public member function)\fP 
   generic_u16string
   generic_u32string
