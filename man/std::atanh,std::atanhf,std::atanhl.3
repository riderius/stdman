.TH std::atanh,std::atanhf,std::atanhl 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::atanh,std::atanhf,std::atanhl \- std::atanh,std::atanhf,std::atanhl

.SH Synopsis
   Defined in header <cmath>
   float       atanh ( float num );

   double      atanh ( double num );                            (until C++23)

   long double atanh ( long double num );
   /* floating-point-type */                                    (since C++23)
               atanh ( /* floating-point-type */ num );         (constexpr since C++26)
   float       atanhf( float num );                     \fB(1)\fP \fB(2)\fP \fI(since C++11)\fP
                                                                (constexpr since C++26)
   long double atanhl( long double num );                   \fB(3)\fP \fI(since C++11)\fP
                                                                (constexpr since C++26)
   Additional overloads \fI(since C++11)\fP
   Defined in header <cmath>
   template< class Integer >                                (A) (constexpr since C++26)
   double      atanh ( Integer num );

   1-3) Computes the inverse hyperbolic tangent of num.
   The library provides overloads of std::atanh for all cv-unqualified floating-point
   types as the type of the parameter.
   (since C++23)

   A) Additional overloads are provided for all integer types, which are  \fI(since C++11)\fP
   treated as double.

.SH Parameters

   num - floating-point or integer value

.SH Return value

   If no errors occur, the inverse hyperbolic tangent of num (tanh-1
   (num), or artanh(num)), is returned.

   If a domain error occurs, an implementation-defined value is returned (NaN where
   supported).

   If a pole error occurs, ±HUGE_VAL, ±HUGE_VALF, or ±HUGE_VALL is returned (with the
   correct sign).

   If a range error occurs due to underflow, the correct result (after rounding) is
   returned.

.SH Error handling

   Errors are reported as specified in math_errhandling.

   If the argument is not on the interval [-1, +1], a range error occurs.

   If the argument is ±1, a pole error occurs.

   If the implementation supports IEEE floating-point arithmetic (IEC 60559),

     * if the argument is ±0, it is returned unmodified.
     * if the argument is ±1, ±∞ is returned and FE_DIVBYZERO is raised.
     * if |num|>1, NaN is returned and FE_INVALID is raised.
     * if the argument is NaN, NaN is returned.

.SH Notes

   Although the C standard (to which C++ refers for this function) names this function
   "arc hyperbolic tangent", the inverse functions of the hyperbolic functions are the
   area functions. Their argument is the area of a hyperbolic sector, not an arc. The
   correct name is "inverse hyperbolic tangent" (used by POSIX) or "area hyperbolic
   tangent".

   POSIX specifies that in case of underflow, num is returned unmodified, and if that
   is not supported, an implementation-defined value no greater than DBL_MIN, FLT_MIN,
   and LDBL_MIN is returned.

   The additional overloads are not required to be provided exactly as (A). They only
   need to be sufficient to ensure that for their argument num of integer type,
   std::atanh(num) has the same effect as std::atanh(static_cast<double>(num)).

.SH Example

   
// Run this code

 #include <cerrno>
 #include <cfenv>
 #include <cfloat>
 #include <cmath>
 #include <cstring>
 #include <iostream>
 // #pragma STDC FENV_ACCESS ON
  
 int main()
 {
     std::cout << "atanh(0) = " << std::atanh(0) << '\\n'
               << "atanh(-0) = " << std::atanh(-0.0) << '\\n'
               << "atanh(0.9) = " << std::atanh(0.9) << '\\n';
  
     // error handling
     errno = 0;
     std::feclearexcept(FE_ALL_EXCEPT);
  
     std::cout << "atanh(-1) = " << std::atanh(-1) << '\\n';
  
     if (errno == ERANGE)
         std::cout << "    errno == ERANGE: " << std::strerror(errno) << '\\n';
     if (std::fetestexcept(FE_DIVBYZERO))
         std::cout << "    FE_DIVBYZERO raised\\n";
 }

.SH Possible output:

 atanh\fB(0)\fP = 0
 atanh(-0) = -0
 atanh(0.9) = 1.47222
 atanh(-1) = -inf
     errno == ERANGE: Numerical result out of range
     FE_DIVBYZERO raised

.SH See also

   asinh
   asinhf              computes the inverse hyperbolic sine
   asinhl              (\\({\\small\\operatorname{arsinh}{x}}\\)arsinh(x))
   \fI(C++11)\fP             \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   acosh
   acoshf              computes the inverse hyperbolic cosine
   acoshl              (\\({\\small\\operatorname{arcosh}{x}}\\)arcosh(x))
   \fI(C++11)\fP             \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   tanh
   tanhf               computes hyperbolic tangent (\\({\\small\\tanh{x}}\\)tanh(x))
   tanhl               \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   atanh(std::complex) computes area hyperbolic tangent of a complex number
   \fI(C++11)\fP             (\\({\\small\\operatorname{artanh}{z}}\\)artanh(z))
                       \fI(function template)\fP 
   C documentation for
   atanh

.SH External links

   Weisstein, Eric W. "Inverse Hyperbolic Tangent." From MathWorld — A Wolfram Web
   Resource.
