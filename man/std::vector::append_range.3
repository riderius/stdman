.TH std::vector::append_range 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::vector::append_range \- std::vector::append_range

.SH Synopsis
   template< container-compatible-range<T> R >  (since C++23)
   constexpr void append_range( R&& rg );

   Inserts copies of elements from the range rg before end(), in non-reversing order.

   If after the operation the new size() is greater than old capacity() a reallocation
   takes place, in which case all iterators (including the end() iterator) and all
   references to the elements are invalidated. Otherwise only the end() iterator is
   invalidated.

   Each iterator in rg is dereferenced exactly once.

.SH Parameters

   rg            -           a container compatible range, that is, an input_range
                             whose elements are convertible to T
.SH Type requirements
   -
   T must be EmplaceConstructible into vector from *ranges::begin(rg). Also, T must be
   MoveInsertable into vector. Otherwise, the behavior is undefined.

.SH Return value

   \fI(none)\fP

.SH Complexity

   If reallocation happens, linear in the number of elements of the resulting vector;
   otherwise, linear in the number of elements inserted plus the distance to the end().

.SH Exceptions

   If an exception is thrown other than by the copy constructor, move constructor,
   assignment operator, or move assignment operator of T or by any InputIterator
   operation there are no effects. If an exception is thrown while inserting a single
   element at the end and T is CopyInsertable or
   std::is_nothrow_move_constructible_v<T> is true, there are no effects. Otherwise, if
   an exception is thrown by the move constructor of a non-CopyInsertable T, the
   effects are unspecified.

.SH Notes

       Feature-test macro       Value    Std                   Feature
   __cpp_lib_containers_ranges 202202L (C++23) Ranges-aware construction and insertion

.SH Example

   
// Run this code

 #include <algorithm>
 #include <cassert>
 #include <vector>
 #include <list>
  
 int main()
 {
     auto head = std::vector{1, 2, 3, 4};
     const auto tail = std::list{-5, -6, -7};
 #ifdef __cpp_lib_containers_ranges
     head.append_range(tail);
 #else
     head.insert(head.end(), tail.cbegin(), tail.cend());
 #endif
     assert(std::ranges::equal(head, std::vector{1, 2, 3, 4, -5, -6, -7}));
 }

.SH See also

   insert_range inserts a range of elements
   (C++23)      \fI(public member function)\fP
   push_back    adds an element to the end
                \fI(public member function)\fP
   emplace_back constructs an element in-place at the end
   \fI(C++11)\fP      \fI(public member function)\fP
