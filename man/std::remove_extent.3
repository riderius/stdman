.TH std::remove_extent 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::remove_extent \- std::remove_extent

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct remove_extent;

   If T is an array of some type X, provides the member typedef type equal to X,
   otherwise type is T. Note that if T is a multidimensional array, only the first
   dimension is removed.

   If the program adds specializations for std::remove_extent, the behavior is
   undefined.

.SH Member types

   Name Definition
   type the type of the element of T

.SH Helper types

   template< class T >                                       \fI(since C++14)\fP
   using remove_extent_t = typename remove_extent<T>::type;

.SH Possible implementation

   template<class T>
   struct remove_extent { using type = T; };
    
   template<class T>
   struct remove_extent<T[]> { using type = T; };
    
   template<class T, std::size_t N>
   struct remove_extent<T[N]> { using type = T; };

.SH Example

   
// Run this code

 #include <algorithm>
 #include <iostream>
 #include <iterator>
 #include <type_traits>
  
 template<class A>
     std::enable_if_t<std::rank_v<A> == 1>
 print_1d(const A& a)
 {
     std::copy(a, a + std::extent_v<A>,
         std::ostream_iterator<std::remove_extent_t<A>>(std::cout, " "));
     std::cout << '\\n';
 }
  
 int main()
 {
     int a[][3] = {{1, 2, 3}, {4, 5, 6}};
 //  print_1d(a); // compile-time error
     print_1d(a[1]);
 }

.SH Output:

 4 5 6

.SH See also

   is_array           checks if a type is an array type
   \fI(C++11)\fP            \fI(class template)\fP 
   rank               obtains the number of dimensions of an array type
   \fI(C++11)\fP            \fI(class template)\fP 
   extent             obtains the size of an array type along a specified dimension
   \fI(C++11)\fP            \fI(class template)\fP 
   remove_all_extents removes all extents from the given array type
   \fI(C++11)\fP            \fI(class template)\fP 
