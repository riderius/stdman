.TH std::ranges::adjacent_view::iterator 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::adjacent_view::iterator \- std::ranges::adjacent_view::iterator

.SH Synopsis
   template< bool Const >  (since C++23)
   class /*iterator*/      (exposition only*)

   The return type of adjacent_view::begin, and of adjacent_view::end when the
   underlying view V is a common_range.

   The type /*iterator*/<true> is returned by the const-qualified overloads. The type
   /*iterator*/<false> is returned by the non-const-qualified overloads.

.SH Member types

   Member type       Definition
   Base (private)    const V if Const is true, otherwise V.
                     (exposition-only member type*)
   iterator_category std::input_iterator_tag
                       * std::random_access_iterator_tag, if Base models
                         random_access_range. Otherwise,
   iterator_concept    * std::bidirectional_iterator_tag, if Base models
                         bidirectional_range. Otherwise,
                       * std::forward_iterator_tag.
   value_type        std::tuple</*REPEAT*/(ranges::range_value_t<Base>, N)...>;
   difference_type   ranges::range_difference_t<Base>

   Data members

   Member object      Definition
   current_ (private) std::array<ranges::iterator_t<Base>, N>.
                      (exposition-only member object*)

.SH Member functions

   constructor     constructs an iterator
   (C++23)         \fI(public member function)\fP
   operator*       accesses the element
   (C++23)         \fI(public member function)\fP
   operator[]      accesses an element by index
   (C++23)         \fI(public member function)\fP
   operator++
   operator++(int)
   operator--      advances or decrements the underlying iterators
   operator--(int) \fI(public member function)\fP 
   operator+=
   operator-=
   (C++23)

.SH Non-member functions

   operator==
   operator<
   operator>   compares the underlying iterators
   operator<=  \fI(function)\fP
   operator>=
   operator<=>
   (C++23)
   operator+   performs iterator arithmetic
   operator-   \fI(function)\fP
   (C++23)
   iter_move   casts the result of dereferencing the underlying iterator to its
   (C++23)     associated rvalue reference type
               \fI(function)\fP
   iter_swap   swaps the objects pointed to by two underlying iterators
   (C++23)     \fI(function)\fP

.SH Example

    This section is incomplete
    Reason: no example

.SH References

     * C++23 standard (ISO/IEC 14882:2023):

     * 26.7.25.3 Class template adjacent_view::iterator [range.adjacent.iterator]

.SH See also


.SH Category:
     * Todo no example
