.TH std::chrono::year_month_weekday_last::operatorsys_days, 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::chrono::year_month_weekday_last::operatorsys_days, \- std::chrono::year_month_weekday_last::operatorsys_days,

.SH Synopsis

   constexpr operator std::chrono::sys_days() const noexcept;         \fB(1)\fP \fI(since C++20)\fP
   constexpr explicit operator std::chrono::local_days() const        \fB(2)\fP \fI(since C++20)\fP
   noexcept;

   Converts *this to a std::chrono::time_point representing the same date as this
   year_month_weekday_last.

   1) If ok() is true, returns a sys_days that represents the last weekday() of the
   year() and month(). Otherwise, the returned value is unspecified.
   2) Same as \fB(1)\fP, but returns local_days instead of sys_days. Equivalent to
   local_days(sys_days(*this).time_since_epoch()).

.SH Example

   
// Run this code

 #include <chrono>
 #include <iostream>
 using namespace std::chrono;
  
 int main()
 {
     constexpr auto ymwdl{Tuesday[last]/11/2021};
     static_assert(static_cast<local_days>(ymwdl) ==
                   static_cast<local_days>(November/30/2021));
     // convert from field-based to serial-based to add days
     constexpr auto sd = static_cast<sys_days>(ymwdl);
     constexpr year_month_day ymd{sd + days(42)};
     std::cout << ymd << '\\n';
 }

.SH Output:

 2022-01-11
