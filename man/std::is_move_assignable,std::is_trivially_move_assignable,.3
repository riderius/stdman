.TH std::is_move_assignable,std::is_trivially_move_assignable, 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_move_assignable,std::is_trivially_move_assignable, \- std::is_move_assignable,std::is_trivially_move_assignable,

.SH Synopsis

   Defined in header <type_traits>
   template< class T >                  \fB(1)\fP \fI(since C++11)\fP
   struct is_move_assignable;
   template< class T >                  \fB(2)\fP \fI(since C++11)\fP
   struct is_trivially_move_assignable;
   template< class T >                  \fB(3)\fP \fI(since C++11)\fP
   struct is_nothrow_move_assignable;

                                The value of the member constant value
    Type trait           T is a referenceable type            T is not a referenceable
                                                                       type 
   \fB(1)\fP          std::is_assignable<T, T&&>::value
   \fB(2)\fP          std::is_trivially_assignable<T, T&&>::value false
   \fB(3)\fP          std::is_nothrow_assignable<T, T&&>::value

   If T is not a complete type, (possibly cv-qualified) void, or an array of unknown
   bound, the behavior is undefined.

   If an instantiation of a template above depends, directly or indirectly, on an
   incomplete type, and that instantiation could yield a different result if that type
   were hypothetically completed, the behavior is undefined.

   If the program adds specializations for any of the templates described on this page,
   the behavior is undefined.

.SH Member constants

   value    true if T is move-assignable, false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Possible implementation

   template<class T>
   struct is_move_assignable
       : std::is_assignable<typename std::add_lvalue_reference<T>::type,
                            typename std::add_rvalue_reference<T>::type> {};
    
   template<class T>
   struct is_trivially_move_assignable
       : std::is_trivially_assignable<typename std::add_lvalue_reference<T>::type,
                                      typename std::add_rvalue_reference<T>::type> {};
    
   template<class T>
   struct is_nothrow_move_assignable
       : std::is_nothrow_assignable<typename std::add_lvalue_reference<T>::type,
                                    typename std::add_rvalue_reference<T>::type> {};

.SH Notes

   The trait std::is_move_assignable is less strict than MoveAssignable because it does
   not check the type of the result of the assignment (which, for a MoveAssignable
   type, must be T&), nor the semantic requirement that the target's value after the
   assignment is equivalent to the source's value before the assignment.

   The type does not have to implement a move assignment operator in order to satisfy
   this trait; see MoveAssignable for details.

.SH Example

   
// Run this code

 #include <iostream>
 #include <string>
 #include <type_traits>
  
 struct Foo { int n; };
  
 struct NoMove
 {
     // prevents implicit declaration of default move assignment operator
     // however, the class is still move-assignable because its
     // copy assignment operator can bind to an rvalue argument
     NoMove& operator=(const NoMove&) { return *this; }
 };
  
 int main()
 {
     std::cout << std::boolalpha
               << "std::string is nothrow move-assignable? "
               << std::is_nothrow_move_assignable<std::string>::value << '\\n'
               << "int[2] is move-assignable? "
               << std::is_move_assignable<int[2]>::value << '\\n'
               << "Foo is trivially move-assignable? "
               << std::is_trivially_move_assignable<Foo>::value << '\\n'
               << "NoMove is move-assignable? "
               << std::is_move_assignable<NoMove>::value << '\\n'
               << "NoMove is nothrow move-assignable? "
               << std::is_nothrow_move_assignable<NoMove>::value << '\\n';
 }

.SH Output:

 std::string is nothrow move-assignable? true
 int[2] is move-assignable? false
 Foo is trivially move-assignable? true
 NoMove is move-assignable? true
 NoMove is nothrow move-assignable? false

.SH See also

   is_assignable
   is_trivially_assignable      checks if a type has an assignment operator for a
   is_nothrow_assignable        specific argument
   \fI(C++11)\fP                      \fI(class template)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   is_copy_assignable
   is_trivially_copy_assignable
   is_nothrow_copy_assignable   checks if a type has a copy assignment operator
   \fI(C++11)\fP                      \fI(class template)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
