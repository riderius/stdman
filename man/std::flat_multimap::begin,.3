.TH std::flat_multimap::begin, 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::flat_multimap::begin, \- std::flat_multimap::begin,

.SH Synopsis

   iterator begin() noexcept;              \fB(1)\fP (since C++23)
   const_iterator begin() const noexcept;  \fB(2)\fP (since C++23)
   const_iterator cbegin() const noexcept; \fB(3)\fP (since C++23)

   Returns an iterator to the first element of the flat_multimap.

   If the flat_multimap is empty, the returned iterator will be equal to end().

   range-begin-end.svg

.SH Parameters

   \fI(none)\fP

.SH Return value

   Iterator to the first element.

.SH Complexity

   Constant.

.SH Example

   
// Run this code

 #include <iostream>
 #include <flat_map>
  
 int main()
 {
     std::flat_multimap<int, int> map{{4, 13}, {9, 94}, {1, 19}, {4, 42}};
  
     for (auto it = map.cbegin(); it != map.cend(); ++it)
         std::cout << '[' << it->first << "] = " << it->second << '\\n';
  
     // Unlike std::multimap's bidirectional iterators, the std::flat_multimap
     // iterators are random-access, so they can be used with the operator[]:
     auto it = map.cbegin();
     assert(it[1] == 19);
     assert(it[4] == 13);
     assert(it[4] == 42);
     assert(it[9] == 94);
 }

.SH Output:

 [1] = 19
 [4] = 13
 [4] = 42
 [9] = 94

.SH See also

   end     returns an iterator to the end
   cend    \fI(public member function)\fP 
   begin
   cbegin  returns an iterator to the beginning of a container or array
   \fI(C++11)\fP \fI(function template)\fP 
   \fI(C++14)\fP
