.TH std::optional::or_else 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::optional::or_else \- std::optional::or_else

.SH Synopsis
   template< class F >                         \fB(1)\fP (since C++23)
   constexpr optional or_else( F&& f ) const&;
   template< class F >                         \fB(2)\fP (since C++23)
   constexpr optional or_else( F&& f ) &&;

   Returns *this if it contains a value. Otherwise, returns the result of f.

   The program is ill-formed if std::remove_cvref_t<std::invoke_result_t<F>> is not
   same as std::optional<T>.

   1) Equivalent to return *this ? *this : std::forward<F>(f)();. This overload
   participates in overload resolution only if both std::copy_constructible<T> and
   std::invocable<F> are modeled.
   2) Equivalent to return *this ? std::move(*this) : std::forward<F>(f)();. This
   overload participates in overload resolution only if both std::move_constructible<T>
   and std::invocable<F> are modeled.

.SH Parameters

   f - a function or Callable object that returns an std::optional<T>

.SH Return value

   *this or the result of f, as described above.

.SH Notes

   Feature-test macro  Value    Std                 Feature
   __cpp_lib_optional 202110L (C++23) Monadic operations in std::optional

.SH Example

   
// Run this code

 #include <iostream>
 #include <optional>
 #include <string>
  
 int main()
 {
     using maybe_int = std::optional<int>;
  
     auto valueless = []
     {
         std::cout << "Valueless: ";
         return maybe_int{0};
     };
  
     maybe_int x;
     std::cout << x.or_else(valueless).value() << '\\n';
  
     x = 42;
     std::cout << "Has value: ";
     std::cout << x.or_else(valueless).value() << '\\n';
  
     x.reset();
     std::cout << x.or_else(valueless).value() << '\\n';
 }

.SH Output:

 Valueless: 0
 Has value: 42
 Valueless: 0

.SH See also

   value_or  returns the contained value if available, another value otherwise
             \fI(public member function)\fP 
   and_then  returns the result of the given function on the contained value if it
   (C++23)   exists, or an empty optional otherwise
             \fI(public member function)\fP 
   transform returns an optional containing the transformed contained value if it
   (C++23)   exists, or an empty optional otherwise
             \fI(public member function)\fP 
