.TH std::underflow_error 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::underflow_error \- std::underflow_error

.SH Synopsis
   Defined in header <stdexcept>
   class underflow_error;

   Defines a type of object to be thrown as exception. It may be used to report
   arithmetic underflow errors (that is, situations where the result of a computation
   is a subnormal floating-point value).

   The standard library components do not throw this exception (mathematical functions
   report underflow errors as specified in math_errhandling). Third-party libraries,
   however, use this. For example, boost.math throws std::underflow_error if
   boost::math::policies::throw_on_error is enabled (the default setting).

   std-underflow error-inheritance.svg

                                   Inheritance diagram

.SH Member functions

   constructor   constructs a new underflow_error object with the given message
                 \fI(public member function)\fP
   operator=     replaces the underflow_error object
                 \fI(public member function)\fP

std::underflow_error::underflow_error

   underflow_error( const std::string& what_arg );  \fB(1)\fP
   underflow_error( const char* what_arg );         \fB(2)\fP
   underflow_error( const underflow_error& other ); \fB(3)\fP (noexcept since C++11)

   1) Constructs the exception object with what_arg as explanatory string. After
   construction, std::strcmp(what(), what_arg.c_str()) == 0.
   2) Constructs the exception object with what_arg as explanatory string. After
   construction, std::strcmp(what(), what_arg) == 0.
   3) Copy constructor. If *this and other both have dynamic type std::underflow_error
   then std::strcmp(what(), other.what()) == 0. No exception can be thrown from the
   copy constructor.

.SH Parameters

   what_arg - explanatory string
   other    - another exception object to copy

.SH Exceptions

   1,2) May throw std::bad_alloc.

.SH Notes

   Because copying std::underflow_error is not permitted to throw exceptions, this
   message is typically stored internally as a separately-allocated reference-counted
   string. This is also why there is no constructor taking std::string&&: it would have
   to copy the content anyway.

   Before the resolution of LWG issue 254, the non-copy constructor can only accept
   std::string. It makes dynamic allocation mandatory in order to construct a
   std::string object.

   After the resolution of LWG issue 471, a derived standard exception class must have
   a publicly accessible copy constructor. It can be implicitly defined as long as the
   explanatory strings obtained by what() are the same for the original object and the
   copied object.

std::underflow_error::operator=

   underflow_error& operator=( const underflow_error& other );  (noexcept since C++11)

   Assigns the contents with those of other. If *this and other both have dynamic type
   std::underflow_error then std::strcmp(what(), other.what()) == 0 after assignment.
   No exception can be thrown from the copy assignment operator.

.SH Parameters

   other - another exception object to assign with

.SH Return value

   *this

.SH Notes

   After the resolution of LWG issue 471, a derived standard exception class must have
   a publicly accessible copy assignment operator. It can be implicitly defined as long
   as the explanatory strings obtained by what() are the same for the original object
   and the copied object.

Inherited from std::runtime_error

Inherited from std::exception

.SH Member functions

   destructor   destroys the exception object
   \fB[virtual]\fP    \fI(virtual public member function of std::exception)\fP 
   what         returns an explanatory string
   \fB[virtual]\fP    \fI(virtual public member function of std::exception)\fP 

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

     DR    Applied to        Behavior as published              Correct behavior
   LWG 254 C++98      the constructor accepting const     added
                      char* was missing
                      the explanatory strings of          they are the same as that of
   LWG 471 C++98      std::underflow_error's              the
                      copies were implementation-defined  original std::underflow_error
                                                          object
