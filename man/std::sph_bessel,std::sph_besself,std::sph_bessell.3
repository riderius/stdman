.TH std::sph_bessel,std::sph_besself,std::sph_bessell 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::sph_bessel,std::sph_besself,std::sph_bessell \- std::sph_bessel,std::sph_besself,std::sph_bessell

.SH Synopsis
   Defined in header <cmath>
   float       sph_bessel ( unsigned int n, float x );
                                                                          \fI(since C++17)\fP
   double      sph_bessel ( unsigned int n, double x );                   (until C++23)

   long double sph_bessel ( unsigned int n, long double x );
   /* floating-point-type */ sph_bessel( unsigned int n,
                                         /* floating-point-type   \fB(1)\fP     (since C++23)
   */ x );
   float       sph_besself( unsigned int n, float x );                \fB(2)\fP \fI(since C++17)\fP
   long double sph_bessell( unsigned int n, long double x );          \fB(3)\fP \fI(since C++17)\fP
   Additional overloads
   Defined in header <cmath>
   template< class Integer >                                          (A) \fI(since C++17)\fP
   double      sph_bessel ( unsigned int n, Integer x );

   1-3) Computes the spherical Bessel function of the first kind of n and x.
   The library provides overloads of std::sph_bessel for all cv-unqualified
   floating-point types as the type of the parameter x.
   (since C++23)
   A) Additional overloads are provided for all integer types, which are treated as
   double.

.SH Parameters

   n - the order of the function
   x - the argument of the function

.SH Return value

   If no errors occur, returns the value of the spherical Bessel function of the first
   kind of n and x, that is j
   n(x) = (π/2x)1/2
   J
   n+1/2(x) where J
   n(x) is std::cyl_bessel_j(n, x) and x≥0.

.SH Error handling

   Errors may be reported as specified in math_errhandling.

     * If the argument is NaN, NaN is returned and domain error is not reported.
     * If n≥128, the behavior is implementation-defined.

.SH Notes

   Implementations that do not support C++17, but support ISO 29124:2010, provide this
   function if __STDCPP_MATH_SPEC_FUNCS__ is defined by the implementation to a value
   at least 201003L and if the user defines __STDCPP_WANT_MATH_SPEC_FUNCS__ before
   including any standard library headers.

   Implementations that do not support ISO 29124:2010 but support TR 19768:2007 (TR1),
   provide this function in the header tr1/cmath and namespace std::tr1.

   An implementation of this function is also available in boost.math.

   The additional overloads are not required to be provided exactly as (A). They only
   need to be sufficient to ensure that for their argument num of integer type,
   std::sph_bessel(int_num, num) has the same effect as std::sph_bessel(int_num,
   static_cast<double>(num)).

.SH Example

   
// Run this code

 #include <cmath>
 #include <iostream>
  
 int main()
 {
     // spot check for n == 1
     double x = 1.2345;
     std::cout << "j_1(" << x << ") = " << std::sph_bessel(1, x) << '\\n';
  
     // exact solution for j_1
     std::cout << "sin(x)/x² - cos(x)/x = "
               << std::sin(x) / (x * x) - std::cos(x) / x << '\\n';
 }

.SH Output:

 j_1(1.2345) = 0.352106
 sin(x)/x² - cos(x)/x = 0.352106

.SH See also

   cyl_bessel_j
   cyl_bessel_jf
   cyl_bessel_jl cylindrical Bessel functions (of the first kind)
   \fI(C++17)\fP       \fI(function)\fP 
   \fI(C++17)\fP
   \fI(C++17)\fP
   sph_neumann
   sph_neumannf
   sph_neumannl  spherical Neumann functions
   \fI(C++17)\fP       \fI(function)\fP 
   \fI(C++17)\fP
   \fI(C++17)\fP

.SH External links

   Weisstein, Eric W. "Spherical Bessel Function of the First Kind." From MathWorld — A
   Wolfram Web Resource.
