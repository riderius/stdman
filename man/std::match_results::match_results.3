.TH std::match_results::match_results 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::match_results::match_results \- std::match_results::match_results

.SH Synopsis
   match_results() : match_results(Allocator()) {}                \fB(1)\fP \fI(since C++11)\fP
   explicit match_results( const Allocator& a );                  \fB(2)\fP \fI(since C++11)\fP
   match_results( const match_results& rhs );                     \fB(3)\fP \fI(since C++11)\fP
   match_results( const match_results& rhs, const Allocator& a ); \fB(4)\fP \fI(since C++11)\fP
   match_results( match_results&& rhs ) noexcept;                 \fB(5)\fP \fI(since C++11)\fP
   match_results( match_results&& rhs, const Allocator& a );      \fB(6)\fP \fI(since C++11)\fP

   1) Default constructor. Constructs a match result with no established result state
   (ready() != true).
   2) Constructs a match result with no established result state (ready() != true)
   using a copy of a as the allocator.
   3) Copy constructor. Constructs a match result with a copy of rhs.
   4) Constructs a match result with a copy of rhs, and uses a copy of a as the
   allocator.
   5) Move constructor. Constructs a match result with the contents of rhs using move
   semantics. rhs is in valid, but unspecified state after the call.
   6) Constructs a match result with the contents of rhs using move semantics, and uses
   a copy of a as the allocator. rhs is in valid, but unspecified state after the call.

.SH Parameters

   a   - allocator to use for all memory allocations of this container
   rhs - another match_results to use as source to initialize the match_results with

.SH Exceptions

   1-4) May throw implementation-defined exceptions.
   6) Throws nothing if a == rhs.get_allocator() is true.

.SH Example

    This section is incomplete
    Reason: no example

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to              Behavior as published              Correct behavior
   LWG 2195 C++11      the constructors required by                    added
                       AllocatorAwareContainer were missing
   P0935R0  C++11      default constructor was explicit                made implicit

.SH Category:
     * Todo no example
