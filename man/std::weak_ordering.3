.TH std::weak_ordering 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::weak_ordering \- std::weak_ordering

.SH Synopsis
   Defined in header <compare>
   class weak_ordering;         \fI(since C++20)\fP

   The class type std::weak_ordering is the result type of a three-way comparison that:

     * Admits all six relational operators (==, !=, <, <=, >, >=).
     * Does not imply substitutability: if a is equivalent to b, f(a) may not be
       equivalent to f(b), where f denotes a function that reads only
       comparison-salient state that is accessible via the argument's public const
       members. In other words, equivalent values may be distinguishable.
     * Does not allow incomparable values: exactly one of a < b, a == b, or a > b must
       be true.

.SH Constants

   The type std::weak_ordering has three valid values, implemented as const static data
   members of its type:

   Member constant              Definition
   less(inline constexpr)       a valid value of the type std::weak_ordering indicating
   \fB[static]\fP                     less-than (ordered before) relationship
                                \fI(public static member constant)\fP
   equivalent(inline constexpr) a valid value of the type std::weak_ordering indicating
   \fB[static]\fP                     equivalence (neither ordered before nor ordered after)
                                \fI(public static member constant)\fP
   greater(inline constexpr)    a valid value of the type std::weak_ordering indicating
   \fB[static]\fP                     greater-than (ordered after) relationship
                                \fI(public static member constant)\fP

.SH Conversions

   std::weak_ordering is implicitly-convertible to std::partial_ordering, while
   std::strong_ordering is implicitly-convertible to weak_ordering.

   operator partial_ordering implicit conversion to std::partial_ordering
                             \fI(public member function)\fP

std::weak_ordering::operator partial_ordering

   constexpr operator partial_ordering() const noexcept;

.SH Return value

   std::partial_ordering::less if v is less, std::partial_ordering::greater if v is
   greater, std::partial_ordering::equivalent if v is equivalent.

.SH Comparisons

   Comparison operators are defined between values of this type and literal 0. This
   supports the expressions a <=> b == 0 or a <=> b < 0 that can be used to convert the
   result of a three-way comparison operator to a boolean relationship; see std::is_eq,
   std::is_lt, etc.

   These functions are not visible to ordinary unqualified or qualified lookup, and can
   only be found by argument-dependent lookup when std::weak_ordering is an associated
   class of the arguments.

   The behavior of a program that attempts to compare a weak_ordering with anything
   other than the integer literal 0 is undefined.

   operator==
   operator<
   operator>   compares with zero or a weak_ordering
   operator<=  \fI(function)\fP
   operator>=
   operator<=>

operator==

   friend constexpr bool operator==( weak_ordering v, /*unspecified*/ u )          \fB(1)\fP
   noexcept;
   friend constexpr bool operator==( weak_ordering v, weak_ordering w ) noexcept = \fB(2)\fP
   default;

.SH Parameters

   v, w - std::weak_ordering values to check
   u    - an unused parameter of any type that accepts literal zero argument

.SH Return value

   1) true if v is equivalent, false if v is less or greater
   2) true if both parameters hold the same value, false otherwise

operator<

   friend constexpr bool operator<( weak_ordering v, /*unspecified*/ u ) noexcept; \fB(1)\fP
   friend constexpr bool operator<( /*unspecified*/ u, weak_ordering v ) noexcept; \fB(2)\fP

.SH Parameters

   v - a std::weak_ordering value to check
   u - an unused parameter of any type that accepts literal zero argument

.SH Return value

   1) true if v is less, and false if v is greater or equivalent
   2) true if v is greater, and false if v is less or equivalent

operator<=

   friend constexpr bool operator<=( weak_ordering v, /*unspecified*/ u )          \fB(1)\fP
   noexcept;
   friend constexpr bool operator<=( /*unspecified*/ u, weak_ordering v )          \fB(2)\fP
   noexcept;

.SH Parameters

   v - a std::weak_ordering value to check
   u - an unused parameter of any type that accepts literal zero argument

.SH Return value

   1) true if v is less or equivalent, and false if v is greater
   2) true if v is greater or equivalent, and false if v is less

operator>

   friend constexpr bool operator>( weak_ordering v, /*unspecified*/ u ) noexcept; \fB(1)\fP
   friend constexpr bool operator>( /*unspecified*/ u, weak_ordering v ) noexcept; \fB(2)\fP

.SH Parameters

   v - a std::weak_ordering value to check
   u - an unused parameter of any type that accepts literal zero argument

.SH Return value

   1) true if v is greater, and false if v is less or equivalent
   2) true if v is less, and false if v is greater or equivalent

operator>=

   friend constexpr bool operator>=( weak_ordering v, /*unspecified*/ u )          \fB(1)\fP
   noexcept;
   friend constexpr bool operator>=( /*unspecified*/ u, weak_ordering v )          \fB(2)\fP
   noexcept;

.SH Parameters

   v - a std::weak_ordering value to check
   u - an unused parameter of any type that accepts literal zero argument

.SH Return value

   1) true if v is greater or equivalent, and false if v is less
   2) true if v is less or equivalent, and false if v is greater

operator<=>

   friend constexpr weak_ordering operator<=>( weak_ordering v, /*unspecified*/ u  \fB(1)\fP
   ) noexcept;
   friend constexpr weak_ordering operator<=>( /*unspecified*/ u, weak_ordering v  \fB(2)\fP
   ) noexcept;

.SH Parameters

   v - a std::weak_ordering value to check
   u - an unused parameter of any type that accepts literal zero argument

.SH Return value

   1) v.
   2) greater if v is less, less if v is greater, otherwise v.

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   strong_ordering  the result type of 3-way comparison that supports all 6 operators
   (C++20)          and is substitutable
                    \fI(class)\fP 
   partial_ordering the result type of 3-way comparison that supports all 6 operators,
   (C++20)          is not substitutable, and allows incomparable values
                    \fI(class)\fP 

.SH Category:
     * Todo no example
