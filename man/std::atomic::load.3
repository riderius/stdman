.TH std::atomic::load 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::atomic::load \- std::atomic::load

.SH Synopsis
   T load( std::memory_order order                                    \fB(1)\fP \fI(since C++11)\fP
               = std::memory_order_seq_cst ) const noexcept;
   T load( std::memory_order order                                    \fB(2)\fP \fI(since C++11)\fP
               = std::memory_order_seq_cst ) const volatile noexcept;

   Atomically loads and returns the current value of the atomic variable. Memory is
   affected according to the value of order.

   If order is one of std::memory_order_release and std::memory_order_acq_rel, the
   behavior is undefined.

   It is deprecated if std::atomic<T>::is_always_lock_free is false and   \fI(since C++20)\fP
   overload \fB(2)\fP participates in overload resolution.

.SH Parameters

   order - memory order constraints to enforce

.SH Return value

   The current value of the atomic variable.

.SH See also

   operator T           loads a value from an atomic object
                        \fI(public member function)\fP 
   atomic_load
   atomic_load_explicit atomically obtains the value stored in an atomic object
   \fI(C++11)\fP              \fI(function template)\fP 
   \fI(C++11)\fP
