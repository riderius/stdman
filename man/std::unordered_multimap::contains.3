.TH std::unordered_multimap::contains 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::unordered_multimap::contains \- std::unordered_multimap::contains

.SH Synopsis
   bool contains( const Key& key ) const; \fB(1)\fP \fI(since C++20)\fP
   template< class K >                    \fB(2)\fP \fI(since C++20)\fP
   bool contains( const K& x ) const;

   1) Checks if there is an element with key equivalent to key in the container.
   2) Checks if there is an element with key that compares equivalent to the value x.
   This overload participates in overload resolution only if Hash::is_transparent and
   KeyEqual::is_transparent are valid and each denotes a type. This assumes that such
   Hash is callable with both K and Key type, and that the KeyEqual is transparent,
   which, together, allows calling this function without constructing an instance of
   Key.

.SH Parameters

   key - key value of the element to search for
   x   - a value of any type that can be transparently compared with a key

.SH Return value

   true if there is such an element, otherwise false.

.SH Complexity

   Constant on average, worst case linear in the size of the container.

.SH Example

   
// Run this code

 #include <iostream>
 #include <unordered_map>
  
 int main()
 {
     std::unordered_multimap<int, char> example{{1, 'a'}, {2, 'b'}};
  
     for (int x : {2, 5})
         if (example.contains(x))
             std::cout << x << ": Found\\n";
         else
             std::cout << x << ": Not found\\n";
 }

.SH Output:

 2: Found
 5: Not found

.SH See also

   find        finds element with specific key
               \fI(public member function)\fP 
   count       returns the number of elements matching specific key
               \fI(public member function)\fP 
   equal_range returns range of elements matching a specific key
               \fI(public member function)\fP 
