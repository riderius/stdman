.TH std::sqrt,std::sqrtf,std::sqrtl 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::sqrt,std::sqrtf,std::sqrtl \- std::sqrt,std::sqrtf,std::sqrtl

.SH Synopsis
   Defined in header <cmath>
   float       sqrt ( float num );

   double      sqrt ( double num );                            (until C++23)

   long double sqrt ( long double num );
   /* floating-point-type */                                   (since C++23)
               sqrt ( /* floating-point-type */ num );         (constexpr since C++26)
   float       sqrtf( float num );                     \fB(1)\fP \fB(2)\fP \fI(since C++11)\fP
                                                               (constexpr since C++26)
   long double sqrtl( long double num );                   \fB(3)\fP \fI(since C++11)\fP
                                                               (constexpr since C++26)
   Additional overloads \fI(since C++11)\fP
   Defined in header <cmath>
   template< class Integer >                               (A) (constexpr since C++26)
   double      sqrt ( Integer num );

   1-3) Computes the square root of num.
   The library provides overloads of std::sqrt for all cv-unqualified floating-point
   types as the type of the parameter.
   (since C++23)

   A) Additional overloads are provided for all integer types, which are  \fI(since C++11)\fP
   treated as double.

.SH Parameters

   num - floating-point or integer value

.SH Return value

   If no errors occur, square root of num (\\({\\small \\sqrt{num} }\\)
   √
   num), is returned.

   If a domain error occurs, an implementation-defined value is returned (NaN where
   supported).

   If a range error occurs due to underflow, the correct result (after rounding) is
   returned.

.SH Error handling

   Errors are reported as specified in math_errhandling.

   Domain error occurs if num is less than zero.

   If the implementation supports IEEE floating-point arithmetic (IEC 60559),

     * If the argument is less than -0, FE_INVALID is raised and NaN is returned.
     * If the argument is +∞ or ±0, it is returned, unmodified.
     * If the argument is NaN, NaN is returned.

.SH Notes

   std::sqrt is required by the IEEE standard to be correctly rounded from the
   infinitely precise result. In particular, the exact result is produced if it can be
   represented in the floating-point type. The only other operations which require this
   are the arithmetic operators and the function std::fma. Other functions, including
   std::pow, are not so constrained.

   The additional overloads are not required to be provided exactly as (A). They only
   need to be sufficient to ensure that for their argument num of integer type,
   std::sqrt(num) has the same effect as std::sqrt(static_cast<double>(num)).

.SH Example

   
// Run this code

 #include <cerrno>
 #include <cfenv>
 #include <cmath>
 #include <cstring>
 #include <iostream>
 // #pragma STDC FENV_ACCESS ON
  
 int main()
 {
     // normal use
     std::cout << "sqrt(100) = " << std::sqrt(100) << '\\n'
               << "sqrt(2) = " << std::sqrt(2) << '\\n'
               << "golden ratio = " << (1 + std::sqrt(5)) / 2 << '\\n';
  
     // special values
     std::cout << "sqrt(-0) = " << std::sqrt(-0.0) << '\\n';
  
     // error handling
     errno = 0;
     std::feclearexcept(FE_ALL_EXCEPT);
  
     std::cout << "sqrt(-1.0) = " << std::sqrt(-1) << '\\n';
     if (errno == EDOM)
         std::cout << "    errno = EDOM " << std::strerror(errno) << '\\n';
     if (std::fetestexcept(FE_INVALID))
         std::cout << "    FE_INVALID raised\\n";
 }

.SH Possible output:

 sqrt(100) = 10
 sqrt\fB(2)\fP = 1.41421
 golden ratio = 1.61803
 sqrt(-0) = -0
 sqrt(-1.0) = -nan
     errno = EDOM Numerical argument out of domain
     FE_INVALID raised

.SH See also

   pow
   powf                raises a number to the given power (\\(\\small{x^y}\\)x^y)
   powl                \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   cbrt                computes cube root (\\(\\small{\\sqrt[3]{x}}\\)
   cbrtf               3
   cbrtl               √
   \fI(C++11)\fP             x)
   \fI(C++11)\fP             \fI(function)\fP 
   \fI(C++11)\fP
                       computes square root of the sum of the squares of two
                       or three
                       \fI(since C++17)\fP given numbers (\\(\\scriptsize{\\sqrt{x^2+y^2}}\\)
                       √
   hypot               x2
   hypotf              +y2
   hypotl              )
   \fI(C++11)\fP             , (\\(\\scriptsize{\\sqrt{x^2+y^2+z^2}}\\)
   \fI(C++11)\fP             √
   \fI(C++11)\fP             x2
                       +y2
                       +z2
                       )
                       \fI(since C++17)\fP
                       \fI(function)\fP 
   sqrt(std::complex)  complex square root in the range of the right half-plane
                       \fI(function template)\fP 
   sqrt(std::valarray) applies the function std::sqrt to each element of valarray
                       \fI(function template)\fP 
   C documentation for
   sqrt
