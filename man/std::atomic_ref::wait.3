.TH std::atomic_ref::wait 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::atomic_ref::wait \- std::atomic_ref::wait

.SH Synopsis
   void wait( T old, std::memory_order order =                        \fB(1)\fP \fI(since C++20)\fP
                         std::memory_order::seq_cst ) const noexcept;
   void wait( T old, std::memory_order order =
                         std::memory_order::seq_cst ) const volatile  \fB(2)\fP \fI(since C++20)\fP
   noexcept;

   Performs atomic waiting operations. Behaves as if it repeatedly performs the
   following steps:

     * Compare the value representation of this->load(order) with that of old.
          * If those are equal, then blocks until *this is notified by notify_one() or
            notify_all(), or the thread is unblocked spuriously.
          * Otherwise, returns.

   These functions are guaranteed to return only if value has changed, even if
   underlying implementation unblocks spuriously.

   If order is one of std::memory_order::release and std::memory_order::acq_rel, the
   behavior is undefined.

.SH Parameters

   old   - the value to check the atomic_ref's object no longer contains
   order - memory order constraints to enforce

.SH Return value

   \fI(none)\fP

.SH Notes

   This form of change-detection is often more efficient than simple polling or pure
   spinlocks.

   Due to the ABA problem, transient changes from old to another value and back to old
   might be missed, and not unblock.

   The comparison is bitwise (similar to std::memcmp); no comparison operator is used.
   Padding bits that never participate in an object's value representation are ignored.

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   notify_one        notifies at least one thread waiting on the atomic object
                     \fI(public member function)\fP 
   notify_all        notifies all threads blocked waiting on the atomic object
                     \fI(public member function)\fP 
   atomic_notify_one notifies a thread blocked in atomic_wait
   (C++20)           \fI(function template)\fP 
   atomic_notify_all notifies all threads blocked in atomic_wait
   (C++20)           \fI(function template)\fP 

.SH Category:
     * Todo no example
