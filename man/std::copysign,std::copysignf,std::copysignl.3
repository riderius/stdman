.TH std::copysign,std::copysignf,std::copysignl 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::copysign,std::copysignf,std::copysignl \- std::copysign,std::copysignf,std::copysignl

.SH Synopsis
   Defined in header <cmath>
   float       copysign ( float mag, float sgn );

   double      copysign ( double mag, double sgn );             (until C++23)

   long double copysign ( long double mag, long double
   sgn );
   constexpr /* floating-point-type */

               copysign ( /* floating-point-type */
   mag,                                                         (since C++23)
                                                        \fB(1)\fP
                          /* floating-point-type */ sgn
   );
   float       copysignf( float mag, float sgn );           \fB(2)\fP \fI(since C++11)\fP
                                                                (constexpr since C++23)
   long double copysignl( long double mag, long double      \fB(3)\fP \fI(since C++11)\fP
   sgn );                                                       (constexpr since C++23)
   Additional overloads \fI(since C++11)\fP
   Defined in header <cmath>
   template< class Integer >                                (A) (constexpr since C++23)
   double      copysign ( Integer mag, Integer sgn );

   1-3) Composes a floating point value with the magnitude of mag and the sign of sgn.
   The library provides overloads of std::copysign for all cv-unqualified
   floating-point types as the type of the parameters.
   (since C++23)

   A) Additional overloads are provided for all integer types, which are  \fI(since C++11)\fP
   treated as double.

.SH Parameters

   mag, sgn - floating-point or integer values

.SH Return value

   If no errors occur, the floating point value with the magnitude of mag and the sign
   of sgn is returned.

   If mag is NaN, then NaN with the sign of sgn is returned.

   If sgn is -0, the result is only negative if the implementation supports the signed
   zero consistently in arithmetic operations.

.SH Error handling

   This function is not subject to any errors specified in math_errhandling.

   If the implementation supports IEEE floating-point arithmetic (IEC 60559),

     * The returned value is exact (FE_INEXACT is never raised) and independent of the
       current rounding mode.

.SH Notes

   std::copysign is the only portable way to manipulate the sign of a NaN value (to
   examine the sign of a NaN, std::signbit may also be used).

   The additional overloads are not required to be provided exactly as (A). They only
   need to be sufficient to ensure that for their first argument num1 and second
   argument num2:

     * If num1 or num2 has type long double, then std::copysign(num1,
       num2) has the same effect as std::copysign(static_cast<long
       double>(num1),
                     static_cast<long double>(num2)).
     * Otherwise, if num1 and/or num2 has type double or an integer type,
       then std::copysign(num1, num2) has the same effect as              (until C++23)
       std::copysign(static_cast<double>(num1),
                     static_cast<double>(num2)).
     * Otherwise, if num1 or num2 has type float, then
       std::copysign(num1, num2) has the same effect as
       std::copysign(static_cast<float>(num1),
                     static_cast<float>(num2)).
   If num1 and num2 have arithmetic types, then std::copysign(num1, num2)
   has the same effect as std::copysign(static_cast</*
   common-floating-point-type */>(num1),
                 static_cast</* common-floating-point-type */>(num2)),
   where /* common-floating-point-type */ is the floating-point type with
   the greatest floating-point conversion rank and greatest
   floating-point conversion subrank between the types of num1 and num2,  (since C++23)
   arguments of integer type are considered to have the same
   floating-point conversion rank as double.

   If no such floating-point type with the greatest rank and subrank
   exists, then overload resolution does not result in a usable candidate
   from the overloads provided.

.SH Example

   
// Run this code

 #include <cmath>
 #include <iostream>
  
 int main()
 {
     std::cout << std::showpos
               << "copysign(1.0,+2.0) = " << std::copysign(1.0, +2.0) << '\\n'
               << "copysign(1.0,-2.0) = " << std::copysign(1.0, -2.0) << '\\n'
               << "copysign(inf,-2.0) = " << std::copysign(INFINITY, -2.0) << '\\n'
               << "copysign(NaN,-2.0) = " << std::copysign(NAN, -2.0) << '\\n';
 }

.SH Output:

 copysign(1.0,+2.0) = +1
 copysign(1.0,-2.0) = -1
 copysign(inf,-2.0) = -inf
 copysign(NaN,-2.0) = -nan

.SH See also

   abs(float)
   fabs
   fabsf      absolute value of a floating point value (\\(\\small{|x|}\\)|x|)
   fabsl      \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   signbit    checks if the given number is negative
   \fI(C++11)\fP    \fI(function)\fP 
   C documentation for
   copysign
