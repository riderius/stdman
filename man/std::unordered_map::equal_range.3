.TH std::unordered_map::equal_range 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::unordered_map::equal_range \- std::unordered_map::equal_range

.SH Synopsis
   std::pair<iterator, iterator> equal_range( const Key& key );       \fB(1)\fP \fI(since C++11)\fP
   std::pair<const_iterator, const_iterator> equal_range( const Key&  \fB(2)\fP \fI(since C++11)\fP
   key ) const;
   template< class K >                                                \fB(3)\fP \fI(since C++20)\fP
   std::pair<iterator, iterator> equal_range( const K& x );
   template< class K >
   std::pair<const_iterator, const_iterator> equal_range( const K& x  \fB(4)\fP \fI(since C++20)\fP
   ) const;

   1,2) Returns a range containing all elements with key key in the container. The
   range is defined by two iterators, the first pointing to the first element of the
   wanted range and the second pointing past the last element of the range.
   3,4) Returns a range containing all elements in the container with key equivalent to
   x. This overload participates in overload resolution only if Hash::is_transparent
   and KeyEqual::is_transparent are valid and each denotes a type. This assumes that
   such Hash is callable with both K and Key type, and that the KeyEqual is
   transparent, which, together, allows calling this function without constructing an
   instance of Key.

.SH Parameters

   key - key value to compare the elements to
   x   - a value of any type that can be transparently compared with a key

.SH Return value

   std::pair containing a pair of iterators defining the wanted range. If there are no
   such elements, past-the-end (see end()) iterators are returned as both elements of
   the pair.

.SH Complexity

   Average case linear in the number of elements with the key key, worst case linear in
   the size of the container.

.SH Notes

           Feature-test macro          Value    Std                Feature
                                                      Heterogeneous comparison lookup
   __cpp_lib_generic_unordered_lookup 201811L (C++20) in unordered associative
                                                      containers, overloads (3,4)

.SH Example

   
// Run this code

 #include <iostream>
 #include <unordered_map>
  
 int main()
 {
     std::unordered_map<int,char> map = {{1, 'a'},{2, 'b'}};
     auto range = map.equal_range(1);
     for (auto it = range.first; it != range.second; ++it)
         std::cout << it->first << ' ' << it->second << '\\n';
 }

.SH Output:

 1 a

.SH See also

   find        finds element with specific key
               \fI(public member function)\fP 
   contains    checks if the container contains element with specific key
   (C++20)     \fI(public member function)\fP 
   count       returns the number of elements matching specific key
               \fI(public member function)\fP 
   equal_range returns range of elements matching a specific key
               \fI(function template)\fP 
