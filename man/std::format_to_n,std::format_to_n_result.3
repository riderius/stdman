.TH std::format_to_n,std::format_to_n_result 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::format_to_n,std::format_to_n_result \- std::format_to_n,std::format_to_n_result

.SH Synopsis
   Defined in header <format>
   template< class OutputIt, class... Args >

   std::format_to_n_result<OutputIt>
       format_to_n( OutputIt out, std::iter_difference_t<OutputIt> n, \fB(1)\fP \fI(since C++20)\fP

                    std::format_string<Args...> fmt, Args&&... args
   );
   template< class OutputIt, class... Args >

   std::format_to_n_result<OutputIt>
       format_to_n( OutputIt out, std::iter_difference_t<OutputIt> n, \fB(2)\fP \fI(since C++20)\fP

                    std::wformat_string<Args...> fmt, Args&&... args
   );
   template< class OutputIt, class... Args >

   std::format_to_n_result<OutputIt>
       format_to_n( OutputIt out, std::iter_difference_t<OutputIt> n, \fB(3)\fP \fI(since C++20)\fP
                    const std::locale& loc,

                    std::format_string<Args...> fmt, Args&&... args
   );
   template< class OutputIt, class... Args >

   std::format_to_n_result<OutputIt>
       format_to_n( OutputIt out, std::iter_difference_t<OutputIt> n, \fB(4)\fP \fI(since C++20)\fP
                    const std::locale& loc,

                    std::wformat_string<Args...> fmt, Args&&... args
   );
.SH Helper types
   template< class OutputIt >

   struct format_to_n_result {
       OutputIt out;                                                  \fB(5)\fP \fI(since C++20)\fP
       std::iter_difference_t<OutputIt> size;

   };

   Format args according to the format string fmt, and write the result to the output
   iterator out. At most n characters are written. If present, loc is used for
   locale-specific formatting.

   Let CharT be char for overloads (1,3), wchar_t for overloads (2,4).

   These overloads participate in overload resolution only if OutputIt satisfies the
   concept std::output_iterator<const CharT&>.

   The behavior is undefined if OutputIt does not model (meet the semantic requirements
   of) the concept std::output_iterator<const CharT&>, or if
   std::formatter<std::remove_cvref_t<Ti>, CharT> does not meet the BasicFormatter
   requirements for any Ti in Args.

   5) std::format_to_n_result has no base classes, or members other than out, size and
   implicitly declared special member functions.

.SH Parameters

   out     - iterator to the output buffer
   n       - maximum number of characters to be written to the buffer
             
             an object that represents the format string. The format string consists of
               * ordinary characters (except { and }), which are copied unchanged to
                 the output,
               * escape sequences {{ and }}, which are replaced with { and }
                 respectively in the output, and
               * replacement fields.

             Each replacement field has the following format:

             { arg-id (optional) }               \fB(1)\fP
             { arg-id (optional) : format-spec } \fB(2)\fP

             1) replacement field without a format specification
             2) replacement field with a format specification

                           specifies the index of the argument in args whose value is
                           to be used for formatting; if it is omitted, the arguments
                           are used in order.
             arg-id      -
                           The arg-id s in a format string must all be present or all
                           be omitted. Mixing manual and automatic indexing is an
                           error.
   fmt     -               the format specification defined by the std::formatter
             format-spec - specialization for the corresponding argument. Cannot start
                           with }.

               * For basic types and standard string types, the format specification is
                 interpreted as standard format specification.
               * For chrono types, the format specification is interpreted as chrono
                 format specification.

               * For range types, the format specification is interpreted
                 as range format specification.
               * For std::pair and std::tuple, the format specification
                 is interpreted as tuple format specification.
               * For std::thread::id and std::stacktrace_entry, see       (since C++23)
                 thread id format specification and stacktrace entry
                 format specification.
               * For std::basic_stacktrace, no format specifier is
                 allowed.

               * For std::filesystem::path, see path format               (since C++26)
                 specification.

               * For other formattable types, the format specification is determined by
                 user-defined formatter specializations.
   args... - arguments to be formatted
   loc     - std::locale used for locale-specific formatting

.SH Return value

   A format_to_n_result such that the out member is an iterator past the end of the
   output range, and the size member is the total (not truncated) output size.

.SH Exceptions

   Propagates any exception thrown by formatter or iterator operations.

.SH Example

   At Godbolt's Compiler Explorer: clang (trunk) + libc++, gcc (trunk) + libstdc++.

   
// Run this code

 #include <format>
 #include <iostream>
 #include <string_view>
  
 int main()
 {
     char buffer[64];
  
     for (std::size_t max_chars_to_write : {std::size(buffer) - 1, 23uz})
     {
         const auto result =
             std::format_to_n(
                 buffer, max_chars_to_write,
                 "Hubble's H{2} {3} {0}{4}{1} km/sec/Mpc.", // 24 bytes w/o formatters
                 71,       // {0}, occupies 2 bytes
                 8,        // {1}, occupies 1 byte
                 "\\u2080", // {2}, occupies 3 bytes, '₀' (SUBSCRIPT ZERO)
                 "\\u2245", // {3}, occupies 3 bytes, '≅' (APPROXIMATELY EQUAL TO)
                 "\\u00B1"  // {4}, occupies 2 bytes, '±' (PLUS-MINUS SIGN)
                 ); // 24 + 2 + 1 + 3 + 3 + 2 == 35, no trailing '\\0'
  
         *result.out = '\\0'; // adds terminator to buffer
  
         const std::string_view str{buffer, result.out}; // uses C++20 constructor
  
         std::cout << "Buffer until '\\\\0': \\"" << str << "\\"\\n"
                   << "Max chars to write: " << max_chars_to_write << '\\n'
                   << "result.out offset: " << result.out - buffer << '\\n'
                   << "Untruncated output size: " << result.size << "\\n\\n";
     }
 }

.SH Output:

 Buffer until '\\0': "Hubble's H₀ ≅ 71±8 km/sec/Mpc."
 Max chars to write: 63
 result.out offset: 35
 Untruncated output size: 35
  
 Buffer until '\\0': "Hubble's H₀ ≅ 71±8"
 Max chars to write: 23
 result.out offset: 23
 Untruncated output size: 35

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

     DR    Applied to      Behavior as published               Correct behavior
   P2216R3 C++20      throws std::format_error for     invalid format string results in
                      invalid format string            compile-time error
                      objects that are neither
   P2418R2 C++20      const-usable nor copyable        allow formatting these objects
                      (such as generator-like objects)
                      are not formattable
   P2508R1 C++20      there's no user-visible name for the name basic_format_string is
                      this facility                    exposed

.SH See also

   format         stores formatted representation of the arguments in a new string
   (C++20)        \fI(function template)\fP 
   format_to      writes out formatted representation of its arguments through an
   (C++20)        output iterator
                  \fI(function template)\fP 
   formatted_size determines the number of characters necessary to store the formatted
   (C++20)        representation of its arguments
                  \fI(function template)\fP 
