.TH std::is_trivially_copyable 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_trivially_copyable \- std::is_trivially_copyable

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_trivially_copyable;

   std::is_trivially_copyable is a UnaryTypeTrait.

   If T is a trivially copyable type, provides the member constant value equal to true.
   For any other type, value is false.

   If std::remove_all_extents_t<T> is an incomplete type and not (possibly
   cv-qualified) void, the behavior is undefined.

   If the program adds specializations for std::is_trivially_copyable or
   std::is_trivially_copyable_v, the behavior is undefined.

.SH Template parameters

   T - a type to check

   Helper variable template

   template< class T >
   inline constexpr bool is_trivially_copyable_v =                        \fI(since C++17)\fP
   is_trivially_copyable<T>::value;

   

Inherited from std::integral_constant

.SH Member constants

   value    true if T is a trivially copyable type, false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Notes

   Objects of trivially-copyable types that are not potentially-overlapping subobjects
   are the only C++ objects that may be safely copied with std::memcpy or serialized
   to/from binary files with std::ofstream::write() / std::ifstream::read().

.SH Example

   
// Run this code

 #include <type_traits>
  
 struct A { int m; };
 static_assert(std::is_trivially_copyable_v<A> == true);
  
 struct B { B(B const&) {} };
 static_assert(std::is_trivially_copyable_v<B> == false);
  
 struct C { virtual void foo(); };
 static_assert(std::is_trivially_copyable_v<C> == false);
  
 struct D
 {
     int m;
  
     D(D const&) = default; // -> trivially copyable
     D(int x) : m(x + 1) {}
 };
 static_assert(std::is_trivially_copyable_v<D> == true);
  
 int main() {}

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to       Behavior as published          Correct behavior
   LWG 2015 C++11      T could be an array of incomplete the behavior is
                       class type with unknown bound     undefined in this case

.SH See also

   is_trivial checks if a type is trivial
   \fI(C++11)\fP    \fI(class template)\fP 
