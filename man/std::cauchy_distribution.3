.TH std::cauchy_distribution 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::cauchy_distribution \- std::cauchy_distribution

.SH Synopsis
   Defined in header <random>
   template< class RealType = double >  \fI(since C++11)\fP
   class cauchy_distribution;

   Produces random numbers according to a Cauchy distribution (also called Lorentz
   distribution):

   \\({\\small f(x;a,b)={(b\\pi{[1+{(\\frac{x-a}{b})}^{2}]} })}^{-1}\\)f(x; a,b) = ‚éõ
   ‚éú
   ‚éùbœÄ ‚é°
   ‚é¢
   ‚é£1 + ‚éõ
   ‚éú
   ‚éù

   x - a
   b

   ‚éû
   ‚éü
   ‚é†2
   ‚é§
   ‚é•
   ‚é¶‚éû
   ‚éü
   ‚é†-1

   std::cauchy_distribution satisfies all requirements of RandomNumberDistribution.

.SH Template parameters

   RealType - The result type generated by the generator. The effect is undefined if
              this is not one of float, double, or long double.

.SH Member types

   Member type         Definition
   result_type \fI(C++11)\fP RealType
   param_type \fI(C++11)\fP  the type of the parameter set, see RandomNumberDistribution.

.SH Member functions

   constructor   constructs new distribution
   \fI(C++11)\fP       \fI(public member function)\fP 
   reset         resets the internal state of the distribution
   \fI(C++11)\fP       \fI(public member function)\fP 
.SH Generation
   operator()    generates the next random number in the distribution
   \fI(C++11)\fP       \fI(public member function)\fP 
.SH Characteristics
   a             returns the distribution parameters
   b             \fI(public member function)\fP 
   \fI(C++11)\fP
   param         gets or sets the distribution parameter object
   \fI(C++11)\fP       \fI(public member function)\fP 
   min           returns the minimum potentially generated value
   \fI(C++11)\fP       \fI(public member function)\fP 
   max           returns the maximum potentially generated value
   \fI(C++11)\fP       \fI(public member function)\fP 

.SH Non-member functions

   operator==
   operator!=                compares two distribution objects
   \fI(C++11)\fP                   \fI(function)\fP 
   \fI(C++11)\fP(removed in C++20)
   operator<<                performs stream input and output on pseudo-random number
   operator>>                distribution
   \fI(C++11)\fP                   \fI(function template)\fP 

.SH Example

   
// Run this code

 #include <algorithm>
 #include <cmath>
 #include <iomanip>
 #include <iostream>
 #include <map>
 #include <random>
 #include <vector>
  
 template<int Height = 5, int BarWidth = 1, int Padding = 1, int Offset = 0, class Seq>
 void draw_vbars(Seq&& s, const bool DrawMinMax = true)
 {
     static_assert(0 < Height and 0 < BarWidth and 0 <= Padding and 0 <= Offset);
  
     auto cout_n = [](auto&& v, int n = 1)
     {
         while (n-- > 0)
             std::cout << v;
     };
  
     const auto [min, max] = std::minmax_element(std::cbegin(s), std::cend(s));
  
     std::vector<std::div_t> qr;
     for (typedef decltype(*std::cbegin(s)) V; V e : s)
         qr.push_back(std::div(std::lerp(V(0), 8 * Height,
                                         (e - *min) / (*max - *min)), 8));
  
     for (auto h{Height}; h-- > 0; cout_n('\\n'))
     {
         cout_n(' ', Offset);
  
         for (auto dv : qr)
         {
             const auto q{dv.quot}, r{dv.rem};
             unsigned char d[]{0xe2, 0x96, 0x88, 0}; // Full Block: '‚ñà'
             q < h ? d[0] = ' ', d[1] = 0 : q == h ? d[2] -= (7 - r) : 0;
             cout_n(d, BarWidth), cout_n(' ', Padding);
         }
  
         if (DrawMinMax && Height > 1)
             Height - 1 == h ? std::cout << "‚î¨ " << *max:
                           h ? std::cout << "‚îÇ "
                             : std::cout << "‚î¥ " << *min;
     }
 }
  
 int main()
 {
     std::random_device rd{};
     std::mt19937 gen{rd()};
  
     auto cauchy = [&gen](const float x0, const float ùõæ)
     {
         std::cauchy_distribution<float> d{x0 /* a */, ùõæ /* b */};
  
         const int norm = 1'00'00;
         const float cutoff = 0.005f;
  
         std::map<int, int> hist{};
         for (int n = 0; n != norm; ++n)
             ++hist[std::round(d(gen))];
  
         std::vector<float> bars;
         std::vector<int> indices;
         for (auto const& [n, p] : hist)
             if (float x = p * (1.0 / norm); cutoff < x)
             {
                 bars.push_back(x);
                 indices.push_back(n);
             }
  
         std::cout << "x‚ÇÄ = " << x0 << ", ùõæ = " << ùõæ << ":\\n";
         draw_vbars<4,3>(bars);
         for (int n : indices)
             std::cout << std::setw(2) << n << "  ";
         std::cout << "\\n\\n";
     };
  
     cauchy(/* x‚ÇÄ = */ -2.0f, /* ùõæ = */ 0.50f);
     cauchy(/* x‚ÇÄ = */ +0.0f, /* ùõæ = */ 1.25f);
 }

.SH Possible output:

 x‚ÇÄ = -2, ùõæ = 0.5:
                     ‚ñà‚ñà‚ñà                     ‚î¨ 0.5006
                     ‚ñà‚ñà‚ñà                     ‚îÇ
                 ‚ñÇ‚ñÇ‚ñÇ ‚ñà‚ñà‚ñà ‚ñÅ‚ñÅ‚ñÅ                 ‚îÇ
 ‚ñÅ‚ñÅ‚ñÅ ‚ñÅ‚ñÅ‚ñÅ ‚ñÅ‚ñÅ‚ñÅ ‚ñÉ‚ñÉ‚ñÉ ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà ‚ñÇ‚ñÇ‚ñÇ ‚ñÅ‚ñÅ‚ñÅ ‚ñÅ‚ñÅ‚ñÅ ‚ñÅ‚ñÅ‚ñÅ ‚î¥ 0.0076
 -7  -6  -5  -4  -3  -2  -1   0   1   2   3
  
 x‚ÇÄ = 0, ùõæ = 1.25:
                                 ‚ñà‚ñà‚ñà                                 ‚î¨ 0.2539
                             ‚ñÖ‚ñÖ‚ñÖ ‚ñà‚ñà‚ñà ‚ñÉ‚ñÉ‚ñÉ                             ‚îÇ
                         ‚ñÅ‚ñÅ‚ñÅ ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà ‚ñÅ‚ñÅ‚ñÅ                         ‚îÇ
 ‚ñÅ‚ñÅ‚ñÅ ‚ñÅ‚ñÅ‚ñÅ ‚ñÅ‚ñÅ‚ñÅ ‚ñÅ‚ñÅ‚ñÅ ‚ñÉ‚ñÉ‚ñÉ ‚ñÖ‚ñÖ‚ñÖ ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà ‚ñÖ‚ñÖ‚ñÖ ‚ñÉ‚ñÉ‚ñÉ ‚ñÇ‚ñÇ‚ñÇ ‚ñÅ‚ñÅ‚ñÅ ‚ñÅ‚ñÅ‚ñÅ ‚ñÅ‚ñÅ‚ñÅ ‚î¥ 0.0058
 -8  -7  -6  -5  -4  -3  -2  -1   0   1   2   3   4   5   6   7   9

.SH External links

     Weisstein, Eric W. "Cauchy Distribution." From MathWorld ‚Äî A Wolfram Web Resource.
