.TH std::floor,std::floorf,std::floorl 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::floor,std::floorf,std::floorl \- std::floor,std::floorf,std::floorl

.SH Synopsis
   Defined in header <cmath>
   float       floor ( float num );

   double      floor ( double num );                            (until C++23)

   long double floor ( long double num );
   constexpr /* floating-point-type */                          (since C++23)
               floor ( /* floating-point-type */ num );
   float       floorf( float num );                     \fB(1)\fP \fB(2)\fP \fI(since C++11)\fP
                                                                (constexpr since C++23)
   long double floorl( long double num );                   \fB(3)\fP \fI(since C++11)\fP
                                                                (constexpr since C++23)
   Additional overloads \fI(since C++11)\fP
   Defined in header <cmath>
   template< class Integer >                                (A) (constexpr since C++23)
   double      floor ( Integer num );

   1-3) Computes the largest integer value not greater than num.
   The library provides overloads of std::floor for all cv-unqualified floating-point
   types as the type of the parameter.
   (since C++23)

   A) Additional overloads are provided for all integer types, which are  \fI(since C++11)\fP
   treated as double.

.SH Parameters

   num - floating-point or integer value

.SH Return value

   If no errors occur, the largest integer value not greater than num, that is ⌊num⌋,
   is returned.

.SH Return value
   math-floor.svg
   num

.SH Error handling

   Errors are reported as specified in math_errhandling.

   If the implementation supports IEEE floating-point arithmetic (IEC 60559),

     * The current rounding mode has no effect.
     * If num is ±∞, it is returned, unmodified.
     * If num is ±0, it is returned, unmodified.
     * If num is NaN, NaN is returned.

.SH Notes

   FE_INEXACT may be (but isn't required to be) raised when rounding a non-integer
   finite value.

   The largest representable floating-point values are exact integers in all standard
   floating-point formats, so this function never overflows on its own; however the
   result may overflow any integer type (including std::intmax_t), when stored in an
   integer variable.

   The additional overloads are not required to be provided exactly as (A). They only
   need to be sufficient to ensure that for their argument num of integer type,
   std::floor(num) has the same effect as std::floor(static_cast<double>(num)).

.SH Example

   
// Run this code

 #include <cmath>
 #include <iostream>
  
 int main()
 {
     std::cout << std::fixed
               << "floor(+2.7) = " << std::floor(+2.7) << '\\n'
               << "floor(-2.7) = " << std::floor(-2.7) << '\\n'
               << "floor(-0.0) = " << std::floor(-0.0) << '\\n'
               << "floor(-Inf) = " << std::floor(-INFINITY) << '\\n';
 }

.SH Output:

 floor(+2.7) = 2.000000
 floor(-2.7) = -3.000000
 floor(-0.0) = -0.000000
 floor(-Inf) = -inf

.SH See also

   ceil
   ceilf    nearest integer not less than the given value
   ceill    \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   trunc
   truncf
   truncl   nearest integer not greater in magnitude than the given value
   \fI(C++11)\fP  \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   round
   roundf
   roundl
   lround
   lroundf
   lroundl
   llround
   llroundf
   llroundl nearest integer, rounding away from zero in halfway cases
   \fI(C++11)\fP  \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   \fI(C++11)\fP
   \fI(C++11)\fP
   \fI(C++11)\fP
   \fI(C++11)\fP
   \fI(C++11)\fP
   \fI(C++11)\fP
   C documentation for
   floor
