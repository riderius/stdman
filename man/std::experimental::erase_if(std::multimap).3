.TH std::experimental::erase_if(std::multimap) 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::erase_if(std::multimap) \- std::experimental::erase_if(std::multimap)

.SH Synopsis
   Defined in header <experimental/map>
   template< class Key, class T, class Compare, class
   Alloc, class Pred >                                     (library fundamentals TS v2)
   void erase_if( std::multimap<Key, T, Compare, Alloc>&
   c, Pred pred );

   Erases all elements that satisfy the predicate pred from the container. Equivalent
   to

 for (auto i = c.begin(), last = c.end(); i != last;)
 {
     if (pred(*i))
         i = c.erase(i);
     else
         ++i;
 }

.SH Parameters

   c    - container from which to erase
   pred - predicate that determines which elements should be erased

.SH Complexity

   Linear.

.SH Example

   
// Run this code

 #include <experimental/map>
 #include <iostream>
  
 template<typename Os, typename Container>
 inline Os& operator<<(Os& os, Container const& cont)
 {
     os << '{';
     for (const auto& item : cont)
         os << '{' << item.first << ", " << item.second << '}';
     return os << '}';
 }
  
 int main()
 {
     std::multimap<int, char> data{{1, 'a'},{2, 'b'},{3, 'c'},{4, 'd'},
                                   {5, 'e'},{4, 'f'},{5, 'g'},{5, 'g'}};
     std::cout << "Original:\\n" << data << '\\n';
     std::experimental::erase_if(data, [](const auto& item)
     {
         return (item.first & 1) == 1;
     });
     std::cout << "Erase items with odd keys:\\n" << data << '\\n';
 }

.SH Output:

 Original:
 {{1, a}{2, b}{3, c}{4, d}{4, f}{5, e}{5, g}{5, g}}
 Erase items with odd keys:
 {{2, b}{4, d}{4, f}}

.SH See also

   remove    removes elements satisfying specific criteria
   remove_if \fI(function template)\fP 

.SH Category:
     * Noindexed pages
