.TH std::move_only_function::operatorbool 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::move_only_function::operatorbool \- std::move_only_function::operatorbool

.SH Synopsis
   explicit operator bool() const noexcept;  (since C++23)

   Checks whether *this stores a callable target, i.e. is not empty.

.SH Parameters

   \fI(none)\fP

.SH Return value

   true if *this stores a callable target, false otherwise.

.SH Example

   
// Run this code

 #include <functional>
 #include <iostream>
  
 void sampleFunction()
 {
     std::cout << "This is the sample function!\\n";
 }
  
 void checkFunc(std::move_only_function<void() const> const& func)
 {
     // Use operator bool to determine if callable target is available.
     if (func)
     {
         std::cout << "Function is not empty! Calling function.\\n";
         func();
     }
     else
         std::cout << "Function is empty. Nothing to do.\\n";
 }
  
 int main()
 {
     std::move_only_function<void() const> f1{};
     std::move_only_function<void() const> f2{sampleFunction};
  
     std::cout << "f1: ";
     checkFunc(f1);
  
     std::cout << "f2: ";
     checkFunc(f2);
 }

.SH Output:

 f1: Function is empty. Nothing to do.
 f2: Function is not empty! Calling function.
 This is the sample function!

.SH See also

   operator==    compares a std::move_only_function with nullptr
   (C++23)       \fI(function)\fP 
   operator bool checks if a target is contained
                 \fI(public member function of std::function<R(Args...)>)\fP 
