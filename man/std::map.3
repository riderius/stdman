.TH std::map 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::map \- std::map

.SH Synopsis
   Defined in header <map>
   template<

       class Key,
       class T,                                                       \fB(1)\fP
       class Compare = std::less<Key>,
       class Allocator = std::allocator<std::pair<const Key, T>>

   > class map;
   namespace pmr {

       template<
           class Key,
           class T,
           class Compare = std::less<Key>                             \fB(2)\fP \fI(since C++17)\fP
       > using map = std::map<Key, T, Compare,
                            
    std::pmr::polymorphic_allocator<std::pair<const Key, T>>>;

   }

   std::map is a sorted associative container that contains key-value pairs with unique
   keys. Keys are sorted by using the comparison function Compare. Search, removal, and
   insertion operations have logarithmic complexity. Maps are usually implemented as
   Redâ€“black trees.

   Iterators of std::map iterate in ascending order of keys, where ascending is defined
   by the comparison that was used for construction. That is, given

     * m, a std::map
     * it_l and it_r, dereferenceable iterators to m, with it_l < it_r.

   m.value_comp()(*it_l, *it_r) == true (least to greatest if using the default
   comparison).

   Everywhere the standard library uses the Compare requirements, uniqueness is
   determined by using the equivalence relation. In imprecise terms, two objects a and
   b are considered equivalent (not unique) if neither compares less than the other:
   !comp(a, b) && !comp(b, a).

   std::map meets the requirements of Container, AllocatorAwareContainer,
   AssociativeContainer and ReversibleContainer.

.SH Template parameters

    This section is incomplete
    Reason: Add descriptions of the template parameters.

.SH Member types

   Member type               Definition
   key_type                  Key
   mapped_type               T
   value_type                std::pair<const Key, T>
   size_type                 Unsigned integer type (usually std::size_t)
   difference_type           Signed integer type (usually std::ptrdiff_t)
   key_compare               Compare
   allocator_type            Allocator
   reference                 value_type&
   const_reference           const value_type&
                             Allocator::pointer                        \fI(until C++11)\fP
   pointer                   std::allocator_traits<Allocator>::pointer \fI(since C++11)\fP

                             
                             Allocator::const_pointer                        (until
                                                                             C++11)
   const_pointer             std::allocator_traits<Allocator>::const_pointer (since
                                                                             C++11)

                             
   iterator                  LegacyBidirectionalIterator to value_type
   const_iterator            LegacyBidirectionalIterator to const value_type
   reverse_iterator          std::reverse_iterator<iterator>
   const_reverse_iterator    std::reverse_iterator<const_iterator>
   node_type \fI(since C++17)\fP   a specialization of node handle representing a container
                             node
                             type describing the result of inserting a node_type, a
                             specialization of

                             template<class Iter, class NodeType>
                             struct /*unspecified*/
   insert_return_type (since {
   C++17)                        Iter     position;
                                 bool     inserted;
                                 NodeType node;
                             };
                             instantiated with template arguments iterator and
                             node_type.

.SH Member classes

   value_compare compares objects of type value_type
                 \fI(class)\fP 

.SH Member functions

   constructor      constructs the map
                    \fI(public member function)\fP 
   destructor       destructs the map
                    \fI(public member function)\fP 
   operator=        assigns values to the container
                    \fI(public member function)\fP 
   get_allocator    returns the associated allocator
                    \fI(public member function)\fP 
.SH Element access
   at               access specified element with bounds checking
                    \fI(public member function)\fP 
   operator[]       access or insert specified element
                    \fI(public member function)\fP 
.SH Iterators
   begin            returns an iterator to the beginning
   cbegin           \fI(public member function)\fP 
   \fI(C++11)\fP
   end              returns an iterator to the end
   cend             \fI(public member function)\fP 
   \fI(C++11)\fP
   rbegin           returns a reverse iterator to the beginning
   crbegin          \fI(public member function)\fP 
   \fI(C++11)\fP
   rend             returns a reverse iterator to the end
   crend            \fI(public member function)\fP 
   \fI(C++11)\fP
.SH Capacity
   empty            checks whether the container is empty
                    \fI(public member function)\fP 
   size             returns the number of elements
                    \fI(public member function)\fP 
   max_size         returns the maximum possible number of elements
                    \fI(public member function)\fP 
.SH Modifiers
   clear            clears the contents
                    \fI(public member function)\fP 
                    inserts elements
   insert           or nodes
                    \fI(since C++17)\fP
                    \fI(public member function)\fP 
   insert_range     inserts a range of elements
   (C++23)          \fI(public member function)\fP 
   insert_or_assign inserts an element or assigns to the current element if the key
   \fI(C++17)\fP          already exists
                    \fI(public member function)\fP 
   emplace          constructs element in-place
   \fI(C++11)\fP          \fI(public member function)\fP 
   emplace_hint     constructs elements in-place using a hint
   \fI(C++11)\fP          \fI(public member function)\fP 
   try_emplace      inserts in-place if the key does not exist, does nothing if the key
   \fI(C++17)\fP          exists
                    \fI(public member function)\fP 
   erase            erases elements
                    \fI(public member function)\fP 
   swap             swaps the contents
                    \fI(public member function)\fP 
   extract          extracts nodes from the container
   \fI(C++17)\fP          \fI(public member function)\fP 
   merge            splices nodes from another container
   \fI(C++17)\fP          \fI(public member function)\fP 
.SH Lookup
   count            returns the number of elements matching specific key
                    \fI(public member function)\fP 
   find             finds element with specific key
                    \fI(public member function)\fP 
   contains         checks if the container contains element with specific key
   (C++20)          \fI(public member function)\fP 
   equal_range      returns range of elements matching a specific key
                    \fI(public member function)\fP 
                    returns an iterator to the first element not less than the given
   lower_bound      key
                    \fI(public member function)\fP 
   upper_bound      returns an iterator to the first element greater than the given key
                    \fI(public member function)\fP 
.SH Observers
   key_comp         returns the function that compares keys
                    \fI(public member function)\fP 
                    returns the function that compares keys in objects of type
   value_comp       value_type
                    \fI(public member function)\fP 

.SH Non-member functions

   operator==
   operator!=
   operator<
   operator<=
   operator>
   operator>=          lexicographically compares the values of two maps
   operator<=>         \fI(function template)\fP 
   (removed in C++20)
   (removed in C++20)
   (removed in C++20)
   (removed in C++20)
   (removed in C++20)
   (C++20)
   std::swap(std::map) specializes the std::swap algorithm
                       \fI(function template)\fP 
   erase_if(std::map)  erases all elements satisfying specific criteria
   (C++20)             \fI(function template)\fP 

     Deduction guides \fI(since C++17)\fP

.SH Notes

       Feature-test macro       Value    Std                   Feature
   __cpp_lib_containers_ranges 202202L (C++23) Ranges construction and insertion for
                                               containers

.SH Example

   
// Run this code

 #include <iostream>
 #include <map>
 #include <string>
 #include <string_view>
  
 void print_map(std::string_view comment, const std::map<std::string, int>& m)
 {
     std::cout << comment;
     // Iterate using C++17 facilities
     for (const auto& [key, value] : m)
         std::cout << '[' << key << "] = " << value << "; ";
  
 // C++11 alternative:
 //  for (const auto& n : m)
 //      std::cout << n.first << " = " << n.second << "; ";
 //
 // C++98 alternative:
 //  for (std::map<std::string, int>::const_iterator it = m.begin(); it != m.end(); ++it)
 //      std::cout << it->first << " = " << it->second << "; ";
  
     std::cout << '\\n';
 }
  
 int main()
 {
     // Create a map of three (string, int) pairs
     std::map<std::string, int> m{{"CPU", 10}, {"GPU", 15}, {"RAM", 20}};
  
     print_map("1) Initial map: ", m);
  
     m["CPU"] = 25; // update an existing value
     m["SSD"] = 30; // insert a new value
     print_map("2) Updated map: ", m);
  
     // Using operator[] with non-existent key always performs an insert
     std::cout << "3) m[UPS] = " << m["UPS"] << '\\n';
     print_map("4) Updated map: ", m);
  
     m.erase("GPU");
     print_map("5) After erase: ", m);
  
     std::erase_if(m, [](const auto& pair){ return pair.second > 25; });
     print_map("6) After erase: ", m);
     std::cout << "7) m.size() = " << m.size() << '\\n';
  
     m.clear();
     std::cout << std::boolalpha << "8) Map is empty: " << m.empty() << '\\n';
 }

.SH Output:

 1) Initial map: [CPU] = 10; [GPU] = 15; [RAM] = 20;
 2) Updated map: [CPU] = 25; [GPU] = 15; [RAM] = 20; [SSD] = 30;
 3) m[UPS] = 0
 4) Updated map: [CPU] = 25; [GPU] = 15; [RAM] = 20; [SSD] = 30; [UPS] = 0;
 5) After erase: [CPU] = 25; [RAM] = 20; [SSD] = 30; [UPS] = 0;
 6) After erase: [CPU] = 25; [RAM] = 20; [UPS] = 0;
 7) m.size() = 3
 8) Map is empty: true

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

     DR    Applied to           Behavior as published              Correct behavior
                      Key was not required to be
   LWG 230 C++98      CopyConstructible                         Key is also required to
                      (a key of type Key might not be able to   be CopyConstructible
                      be constructed)
   LWG 464 C++98      accessing a const map by key was          at function provided
                      inconvenient

.SH See also

   unordered_map collection of key-value pairs, hashed by keys, keys are unique
   \fI(C++11)\fP       \fI(class template)\fP 

.SH Category:
     * Todo with reason
