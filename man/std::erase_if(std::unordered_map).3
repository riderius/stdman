.TH std::erase_if(std::unordered_map) 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::erase_if(std::unordered_map) \- std::erase_if(std::unordered_map)

.SH Synopsis
   Defined in header <unordered_map>
   template< class Key, class T, class Hash, class KeyEqual, class
   Alloc,

             class Pred >                                                 \fI(since C++20)\fP
   std::unordered_map<Key, T, Hash, KeyEqual, Alloc>::size_type
       erase_if( std::unordered_map<Key, T, Hash, KeyEqual, Alloc>& c,

                 Pred pred );

   Erases all elements that satisfy the predicate pred from c.

   Equivalent to

 auto old_size = c.size();
 for (auto first = c.begin(), last = c.end(); first != last;)
 {
     if (pred(*first))
         first = c.erase(first);
     else
         ++first;
 }
 return old_size - c.size();

.SH Parameters

   c    - container from which to erase
   pred - predicate that returns true if the element should be erased

.SH Return value

   The number of erased elements.

.SH Complexity

   Linear.

.SH Example

   
// Run this code

 #include <iostream>
 #include <unordered_map>
  
 void println(auto rem, auto const& container)
 {
     std::cout << rem << '{';
     for (char sep[]{0, ' ', 0}; const auto& [key, value] : container)
         std::cout << sep << '{' << key << ", " << value << '}', *sep = ',';
     std::cout << "}\\n";
 }
  
 int main()
 {
     std::unordered_map<int, char> data
     {
         {1, 'a'}, {2, 'b'}, {3, 'c'}, {4, 'd'},
         {5, 'e'}, {4, 'f'}, {5, 'g'}, {5, 'g'},
     };
     println("Original:\\n", data);
  
     const auto count = std::erase_if(data, [](const auto& item)
     {
         auto const& [key, value] = item;
         return (key & 1) == 1;
     });
  
     println("Erase items with odd keys:\\n", data);
     std::cout << count << " items removed.\\n";
 }

.SH Possible output:

 Original:
 {{5, e}, {4, d}, {3, c}, {2, b}, {1, a}}
 Erase items with odd keys:
 {{4, d}, {2, b}}
 3 items removed.

.SH See also

   remove    removes elements satisfying specific criteria
   remove_if \fI(function template)\fP 
