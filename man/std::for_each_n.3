.TH std::for_each_n 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::for_each_n \- std::for_each_n

.SH Synopsis
   Defined in header <algorithm>
   template< class InputIt, class Size, class UnaryFunc >       \fI(since C++17)\fP
   InputIt for_each_n( InputIt first, Size n, UnaryFunc f   \fB(1)\fP (constexpr since C++20)
   );
   template< class ExecutionPolicy,

             class ForwardIt, class Size, class UnaryFunc >
   ForwardIt for_each_n( ExecutionPolicy&& policy,          \fB(2)\fP \fI(since C++17)\fP

                         ForwardIt first, Size n, UnaryFunc
   f );

   Applies the given function object f to the result of dereferencing every iterator in
   the range [first, first + n). If f returns a result, the result is ignored.

   1) f is applied in order starting from first.
   If UnaryFunc is not MoveConstructible, the behavior is undefined.
   2) f might not be applied in order. The algorithm is executed according to policy.
   This overload participates in overload resolution only if

   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true.        (until
                                                                             C++20)
   std::is_execution_policy_v<std::remove_cvref_t<ExecutionPolicy>> is true. (since
                                                                             C++20)

   If UnaryFunc is not CopyConstructible, the behavior is undefined.

   If n >= 0 is not true, the behavior is undefined.

   If the iterator type (InputIt/ForwardIt) is mutable, f may modify the elements of
   the range through the dereferenced iterator.

   Unlike the rest of the parallel algorithms, for_each_n is not allowed to make copies
   of the elements in the sequence even if they are TriviallyCopyable.

.SH Parameters

   first  - the beginning of the range to apply the function to
   n      - the number of elements to apply the function to
   policy - the execution policy to use. See execution policy for details.
            function object, to be applied to the result of dereferencing every
            iterator in the range [first, first + n)

            The signature of the function should be equivalent to the following:

   f      -  void fun(const Type &a);

            The signature does not need to have const &.
            The type  Type must be such that an object of type InputIt can be
            dereferenced and then implicitly converted to  Type.


.SH Type requirements
   -
   InputIt must meet the requirements of LegacyInputIterator.
   -
   ForwardIt must meet the requirements of LegacyForwardIterator.
   -
   Size must be convertible to an integral type.

.SH Return value

   An iterator equal to first + n, or more formally, to std::advance(first, n).

.SH Complexity

   Exactly n applications of f.

.SH Exceptions

   The overload with a template parameter named ExecutionPolicy reports errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the standard policies, std::terminate is called.
       For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Possible implementation

   See also the implementation in libstdc++, libc++ and MSVC stdlib.

   template<class InputIt, class Size, class UnaryFunc>
   InputIt for_each_n(InputIt first, Size n, UnaryFunc f)
   {
       for (Size i = 0; i < n; ++first, (void) ++i)
           f(*first);
    
       return first;
   }

.SH Example

   
// Run this code

 #include <algorithm>
 #include <iostream>
 #include <vector>
  
 void println(auto const& v)
 {
     for (auto count{v.size()}; const auto& e : v)
         std::cout << e << (--count ? ", " : "\\n");
 }
  
 int main()
 {
     std::vector<int> vi{1, 2, 3, 4, 5};
     println(vi);
  
     std::for_each_n(vi.begin(), 3, [](auto& n) { n *= 2; });
     println(vi);
 }

.SH Output:

 1, 2, 3, 4, 5
 2, 4, 6, 4, 5

.SH See also

                         applies a function to a range of elements, storing results in
   transform             a destination range
                         \fI(function template)\fP 
   range-for loop\fI(C++11)\fP executes loop over range
   for_each              applies a function to a range of elements
                         \fI(function template)\fP 
   ranges::for_each_n    applies a function object to the first N elements of a
   (C++20)               sequence
                         (niebloid)
