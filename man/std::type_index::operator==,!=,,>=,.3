.TH std::type_index::operator==,!=,,>=, 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::type_index::operator==,!=,,>=, \- std::type_index::operator==,!=,,>=,

.SH Synopsis
   bool operator==( const type_index& rhs ) const noexcept;           \fB(1)\fP \fI(since C++11)\fP
   bool operator!=( const type_index& rhs ) const noexcept;           \fB(2)\fP \fI(since C++11)\fP
                                                                          \fI(until C++20)\fP
   bool operator<( const type_index& rhs ) const noexcept;            \fB(3)\fP \fI(since C++11)\fP
   bool operator<=( const type_index& rhs ) const noexcept;           \fB(4)\fP \fI(since C++11)\fP
   bool operator>( const type_index& rhs ) const noexcept;            \fB(5)\fP \fI(since C++11)\fP
   bool operator>=( const type_index& rhs ) const noexcept;           \fB(6)\fP \fI(since C++11)\fP
   std::strong_ordering operator<=>( const type_index& rhs ) const    \fB(7)\fP \fI(since C++20)\fP
   noexcept;

   Compares the underlying std::type_info objects.

   1,2) Checks whether the underlying std::type_info objects refer to the same type.
   3-7) Compares the underlying std::type_info objects as defined by an
   implementation-defined ordering. The comparison is done by type_info::before.

   The != operator is synthesized from operator==. \fI(since C++20)\fP

.SH Parameters

   rhs - another type_index object to compare to

.SH Return value

   1) true if the underlying std::type_info objects refer to the same type, false
   otherwise.
   2) true if the underlying std::type_info objects refer not to the same type, false
   otherwise.
   3-6) true if the types referred by the underlying std::type_info objects are ordered
   by corresponding order, false otherwise.
   7) std::strong_ordering::equal if the underlying std::type_info objects refer to the
   same type, otherwise std::strong_ordering::less if *this's underlying std::type_info
   object precedes rhs's in the implementation-defined ordering, otherwise
   std::strong_ordering::greater.
