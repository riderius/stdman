.TH std::valarray::cshift 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::valarray::cshift \- std::valarray::cshift

.SH Synopsis
   valarray<T> cshift( int count ) const;

   Returns a new valarray of the same size with elements whose positions are shifted
   circularly by count elements.

   A non-negative value of count shifts the elements circularly left count places and a
   negative value of count shifts the elements circularly right -count places.

.SH Parameters

   count - number of positions to shift the elements by

.SH Return value

   The resulting valarray with circularly shifted elements.

.SH Notes

   The function can be implemented with the return type different from std::valarray.
   In this case, the replacement type has the following properties:

     * All const member functions of std::valarray are provided.
     * std::valarray, std::slice_array, std::gslice_array, std::mask_array and
       std::indirect_array can be constructed from the replacement type.
     * For every function taking a const std::valarray<T>&
       except begin() and end()
       \fI(since C++11)\fP, identical functions taking the replacement types shall be added;
     * For every function taking two const std::valarray<T>& arguments, identical
       functions taking every combination of const std::valarray<T>& and replacement
       types shall be added.
     * The return type does not add more than two levels of template nesting over the
       most deeply-nested argument type.

.SH Example

   
// Run this code

 #include <iostream>
 #include <valarray>
  
 int main()
 {
     std::valarray<int> v{1, 2, 3, 4, 5, 6, 7, 8};
  
     for (auto const& val : v)
         std::cout << val << ' ';
     std::cout << '\\n';
  
     std::valarray<int> v2 = v.cshift(2);
  
     for (auto const& val : v2)
         std::cout << val << ' ';
     std::cout << '\\n';
 }

.SH Output:

 1 2 3 4 5 6 7 8
 3 4 5 6 7 8 1 2

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

     DR    Applied to         Behavior as published              Correct behavior
                      the expression of the shifted
   LWG 618 C++98      elements                              describes the new positions
                      contains zero-division if size() is 0 without using expressions


.SH See also

   shift zero-filling shift the elements of the valarray
         \fI(public member function)\fP 

.SH Hidden category:
     * Pages with unreviewed LWG DR marker
