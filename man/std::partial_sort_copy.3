.TH std::partial_sort_copy 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::partial_sort_copy \- std::partial_sort_copy

.SH Synopsis
   Defined in header <algorithm>
   template< class InputIt, class RandomIt >

   RandomIt partial_sort_copy( InputIt first, InputIt last, \fB(1)\fP (constexpr since C++20)

                               RandomIt d_first, RandomIt
   d_last );
   template< class ExecutionPolicy,

             class ForwardIt, class RandomIt >
   RandomIt partial_sort_copy( ExecutionPolicy&& policy,
                               ForwardIt first, ForwardIt   \fB(2)\fP \fI(since C++17)\fP
   last,

                               RandomIt d_first, RandomIt
   d_last );
   template< class InputIt, class RandomIt, class Compare >

   RandomIt partial_sort_copy( InputIt first, InputIt last,
                               RandomIt d_first, RandomIt   \fB(3)\fP (constexpr since C++20)
   d_last,

                               Compare comp );
   template< class ExecutionPolicy,

             class ForwardIt, class RandomIt, class Compare
   >
   RandomIt partial_sort_copy( ExecutionPolicy&& policy,
                               ForwardIt first, ForwardIt   \fB(4)\fP \fI(since C++17)\fP
   last,
                               RandomIt d_first, RandomIt
   d_last,

                               Compare comp );

   Sorts some of the elements in the range [first, last) in ascending order, storing
   the result in the range [d_first, d_last).

   At most d_last - d_first of the elements are placed sorted to the range
   [d_first, d_first + n). n is the number of elements to sort
   (std::min(std::distance(first, last), d_last - d_first)). The order of equal
   elements is not guaranteed to be preserved.

   1) Elements are sorted with respect to
   operator<
   \fI(until C++20)\fP
   std::less{}
   \fI(since C++20)\fP.
   3) Elements are sorted with respect to comp.
   2,4) Same as (1,3), but executed according to policy.
   These overloads participate in overload resolution only if

   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true.        (until
                                                                             C++20)
   std::is_execution_policy_v<std::remove_cvref_t<ExecutionPolicy>> is true. (since
                                                                             C++20)

   If *first is not writable to d_first, the program is ill-formed.

   If any of the following conditions is satisfied, the behavior is undefined:

     * The type of *d_first is not Swappable.           \fI(until C++11)\fP
     * RandomIt is not ValueSwappable.
     * The type of *d_first is not MoveConstructible.   \fI(since C++11)\fP
     * The type of *d_first is not MoveAssignable.

.SH Parameters

   first, last     - the range of elements to sort
   d_first, d_last - random access iterators defining the destination range
   policy          - the execution policy to use. See execution policy for details.
                     comparison function object (i.e. an object that satisfies the
                     requirements of Compare) which returns true if the first argument
                     is less than (i.e. is ordered before) the second.

                     The signature of the comparison function should be equivalent to
                     the following:

                     bool cmp(const Type1& a, const Type2& b);
   comp            -
                     While the signature does not need to have const&, the function
                     must not modify the objects passed to it and must be able to
                     accept all values of type (possibly const) Type1 and Type2
                     regardless of value category (thus, Type1& is not allowed
                     , nor is Type1 unless for Type1 a move is equivalent to a copy
                     \fI(since C++11)\fP).
                     The types Type1 and Type2 must be such that an object of type
                     RandomIt can be dereferenced and then implicitly converted to both
                     of them.
.SH Type requirements
   -
   InputIt must meet the requirements of LegacyInputIterator.
   -
   ForwardIt must meet the requirements of LegacyForwardIterator.
   -
   RandomIt must meet the requirements of LegacyRandomAccessIterator.
   -
   Compare must meet the requirements of Compare.

.SH Return value

   An iterator to the element defining the upper boundary of the sorted range, i.e.
   d_first + std::min(std::distance(first, last), d_last - d_first).

.SH Complexity

   Given \\(\\scriptsize N\\)N as std::distance(first, last), \\(\\scriptsize D\\)D as d_last
   - d_first:

   1,2) Approximately \\(\\scriptsize N \\cdot \\log(\\min(N,D))\\)N·log(min(N,D))
   comparisons using
   operator<
   \fI(until C++20)\fP
   std::less{}
   \fI(since C++20)\fP.
   3,4) Approximately \\(\\scriptsize N \\cdot \\log(\\min(N,D))\\)N·log(min(N,D))
   applications of the comparator comp.

.SH Exceptions

   The overloads with a template parameter named ExecutionPolicy report errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the standard policies, std::terminate is called.
       For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Possible implementation

   See also the implementations in libstdc++ and libc++.

.SH Example

   The following code sorts a vector of integers and copies them into a smaller and a
   larger vector.

   
// Run this code

 #include <algorithm>
 #include <functional>
 #include <iostream>
 #include <string_view>
 #include <type_traits>
 #include <vector>
  
 void println(std::string_view rem, const auto& v)
 {
     std::cout << rem;
     if constexpr (std::is_scalar_v<std::decay_t<decltype(v)>>)
         std::cout << v;
     else
         for (int e : v)
             std::cout << e << ' ';
     std::cout << '\\n';
 }
  
 int main()
 {
     const auto v0 = {4, 2, 5, 1, 3};
     std::vector<int> v1{10, 11, 12};
     std::vector<int> v2{10, 11, 12, 13, 14, 15, 16};
     std::vector<int>::iterator it;
  
     it = std::partial_sort_copy(v0.begin(), v0.end(), v1.begin(), v1.end());
     println("Writing to the smaller vector in ascending order gives: ", v1);
  
     if (it == v1.end())
         println("The return value is the end iterator", ' ');
  
     it = std::partial_sort_copy(v0.begin(), v0.end(), v2.begin(), v2.end(),
                                 std::greater<int>());
  
     println("Writing to the larger vector in descending order gives: ", v2);
     println("The return value is the iterator to ", *it);
 }

.SH Output:

 Writing to the smaller vector in ascending order gives: 1 2 3
 The return value is the end iterator
 Writing to the larger vector in descending order gives: 5 4 3 2 1 15 16
 The return value is the iterator to 15

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

     DR    Applied to        Behavior as published               Correct behavior
   P0896R4 C++98      *first was not required to be        the program is ill-formed if
                      writable to d_first                  not writable

.SH See also

   partial_sort              sorts the first N elements of a range
                             \fI(function template)\fP 
   sort                      sorts a range into ascending order
                             \fI(function template)\fP 
                             sorts a range of elements while preserving order between
   stable_sort               equal elements
                             \fI(function template)\fP 
   ranges::partial_sort_copy copies and partially sorts a range of elements
   (C++20)                   (niebloid)
