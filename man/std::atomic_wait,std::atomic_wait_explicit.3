.TH std::atomic_wait,std::atomic_wait_explicit 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::atomic_wait,std::atomic_wait_explicit \- std::atomic_wait,std::atomic_wait_explicit

.SH Synopsis
   template< class T >

   void atomic_wait( const std::atomic<T>* object,                    \fB(1)\fP \fI(since C++20)\fP

                     typename std::atomic<T>::value_type old );
   template< class T >

   void atomic_wait( const volatile std::atomic<T>* object,           \fB(2)\fP \fI(since C++20)\fP

                     typename std::atomic<T>::value_type old );
   template< class T >

   void atomic_wait_explicit( const std::atomic<T>* object,
                              typename std::atomic<T>::value_type     \fB(3)\fP \fI(since C++20)\fP
   old,

                              std::memory_order order );
   template< class T >

   void atomic_wait_explicit( const volatile std::atomic<T>* object,
                              typename std::atomic<T>::value_type     \fB(4)\fP \fI(since C++20)\fP
   old,

                              std::memory_order order );

   Performs atomic waiting operations. Behaves as if it repeatedly performs the
   following steps:

     * Compare the value representation of object->load() (for overloads (1,2)) or
       object->load(order) (for overloads (3,4)) with that of old.
          * If those are bitwise equal, then blocks until *object is notified by
            std::atomic::notify_one() or std::atomic::notify_all(), or the thread is
            unblocked spuriously.
          * Otherwise, returns.

   These functions are guaranteed to return only if value has changed, even if the
   underlying implementation unblocks spuriously.

   1,2) Equivalent to object->wait(old).
   3,4) Equivalent to object->wait(old, order).
   If order is one of std::memory_order::release and std::memory_order::acq_rel, the
   behavior is undefined.

.SH Parameters

   object - pointer to the atomic object to check and wait on
   old    - the value to check the atomic object no longer contains
   order  - the memory synchronization ordering

.SH Return value

   \fI(none)\fP

.SH Notes

   This form of change-detection is often more efficient than simple polling or pure
   spinlocks.

   Due to the ABA problem, transient changes from old to another value and back to old
   might be missed, and not unblock.

   The comparison is bitwise (similar to std::memcmp); no comparison operator is used.
   Padding bits that never participate in an object's value representation are ignored.

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   wait              blocks the thread until notified and the atomic value changes
   (C++20)           \fI(public member function of std::atomic<T>)\fP 
   notify_one        notifies at least one thread waiting on the atomic object
   (C++20)           \fI(public member function of std::atomic<T>)\fP 
   notify_all        notifies all threads blocked waiting on the atomic object
   (C++20)           \fI(public member function of std::atomic<T>)\fP 
   atomic_notify_one notifies a thread blocked in atomic_wait
   (C++20)           \fI(function template)\fP 
   atomic_notify_all notifies all threads blocked in atomic_wait
   (C++20)           \fI(function template)\fP 

.SH Category:
     * Todo no example
