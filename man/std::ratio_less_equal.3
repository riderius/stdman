.TH std::ratio_less_equal 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ratio_less_equal \- std::ratio_less_equal

.SH Synopsis
   Defined in header <ratio>
   template< class R1, class R2 >
   struct ratio_less_equal : std::integral_constant<bool, /* see below    \fI(since C++11)\fP
   */> { };

   If the ratio R1 is less than or equal to the ratio R2, provides the member constant
   value equal true. Otherwise, value is false.

.SH Member constants

   value    true if R1::num * R2::den <= R2::num * R1::den, or equivalent expression
   \fB[static]\fP that avoids overflow, false otherwise
            \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Example

   
// Run this code

 #include <iostream>
 #include <ratio>
  
 int main()
 {
     static_assert(std::ratio_less_equal<std::ratio<1, 2>, std::ratio<3, 4>>::value,
                   "1/2 <= 3/4");
  
     if (std::ratio_less_equal<std::ratio<10,11>, std::ratio<11,12>>::value)
         std::cout << "10/11 <= 11/12" "\\n";
  
     static_assert(std::ratio_less_equal_v<std::ratio<10, 11>, std::ratio<11, 12>>);
  
     if constexpr (std::ratio_less_equal_v<std::ratio<10, 11>, std::ratio<11, 12>>)
         std::cout << "11/12 <= 12/13" "\\n";
 }

.SH Output:

 10/11 <= 11/12
 11/12 <= 12/13

.SH See also

   ratio_equal     compares two ratio objects for equality at compile-time
   \fI(C++11)\fP         \fI(class template)\fP 
   ratio_not_equal compares two ratio objects for inequality at compile-time
   \fI(C++11)\fP         \fI(class template)\fP 
