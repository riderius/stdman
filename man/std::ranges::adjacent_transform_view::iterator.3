.TH std::ranges::adjacent_transform_view::iterator 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::adjacent_transform_view::iterator \- std::ranges::adjacent_transform_view::iterator

.SH Synopsis
   template< bool Const >  (since C++23)
   class /*iterator*/      (exposition only*)

   The return type of adjacent_transform_view::begin, and of
   adjacent_transform_view::end when the underlying view V is a common_range.

   The type /*iterator*/<true> is returned by the const-qualified overloads. The type
   /*iterator*/<false> is returned by the non-const-qualified overloads.

.SH Member types

   Member type       Definition
                     const ranges::adjacent_transform_view, if Const is true.
   Parent (private)  Otherwise, ranges::adjacent_transform_view.
                     (exposition-only member type*)
   Base (private)    const V, if Const is true. Otherwise, V.
                     (exposition-only member type*)
                       * std::input_iterator_tag, if

                     std::invoke_result_t</*maybe-const*/<Const, F>&,
                                          /*REPEAT*/(ranges::range_reference_t<Base>,
                     N)...>
                     is not a reference. Otherwise,
                       * let C denote the type
                         std::iterator_traits<iterator_t<Base>>::iterator_category.
   iterator_category        * std::random_access_iterator_tag, if
                              std::derived_from<C, std::random_access_iterator_tag> is
                              true. Otherwise,
                            * std::bidirectional_iterator_tag, if
                              std::derived_from<C, std::bidirectional_iterator_tag> is
                              true. Otherwise,
                            * std::forward_iterator_tag, if
                              std::derived_from<C, std::forward_iterator_tag> is true.
                              Otherwise,
                            * std::input_iterator_tag.
   iterator_concept  typename /*inner-iterator*/<Const>::iterator_concept;.
                     std::remove_cvref_t<std::invoke_result_t</*maybe-const*/<Const,
   value_type        F>&,
                                         /*REPEAT*/(ranges::range_reference_t<Base>,
                     N)...>>;
   difference_type   ranges::range_difference_t<Base>

   Data members

   Member object     Definition
   parent_ (private) A pointer of type Parent*.
                     (exposition-only member object*)
   inner_ (private)  An iterator of type inner_iterator.
                     (exposition-only member object*)

.SH Member functions

   constructor     constructs an iterator
   (C++23)         \fI(public member function)\fP
   operator*       accesses the element
   (C++23)         \fI(public member function)\fP
   operator[]      accesses an element by index
   (C++23)         \fI(public member function)\fP
   operator++
   operator++(int)
   operator--      advances or decrements the underlying iterators
   operator--(int) \fI(public member function)\fP 
   operator+=
   operator-=
   (C++23)

.SH Non-member functions

   operator==
   operator<
   operator>   compares the underlying iterators
   operator<=  \fI(function)\fP
   operator>=
   operator<=>
   (C++23)
   operator+   performs iterator arithmetic
   operator-   \fI(function)\fP
   (C++23)

.SH Example

    This section is incomplete
    Reason: no example

.SH References

     * C++23 standard (ISO/IEC 14882:2023):

     * 26.7.27.3 Class template adjacent_transform_view::iterator
       [range.adjacent_transform.iterator]

.SH See also


.SH Category:
     * Todo no example
