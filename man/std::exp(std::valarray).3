.TH std::exp(std::valarray) 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::exp(std::valarray) \- std::exp(std::valarray)

.SH Synopsis
   Defined in header <valarray>
   template< class T >
   valarray<T> exp( const valarray<T>& va );

   For each element in va computes e raised to the power equal to the value of the
   element.

.SH Parameters

   va - value array to apply the operation to

.SH Return value

   Value array containing e raised by the values in va.

.SH Notes

   Unqualified function (exp) is used to perform the computation. If such function is
   not available, std::exp is used due to argument-dependent lookup.

   The function can be implemented with the return type different from std::valarray.
   In this case, the replacement type has the following properties:

     * All const member functions of std::valarray are provided.
     * std::valarray, std::slice_array, std::gslice_array, std::mask_array and
       std::indirect_array can be constructed from the replacement type.
     * For every function taking a const std::valarray<T>&
       except begin() and end()
       \fI(since C++11)\fP, identical functions taking the replacement types shall be added;
     * For every function taking two const std::valarray<T>& arguments, identical
       functions taking every combination of const std::valarray<T>& and replacement
       types shall be added.
     * The return type does not add more than two levels of template nesting over the
       most deeply-nested argument type.

.SH Possible implementation

   template<class T>
   valarray<T> exp(const valarray<T>& va)
   {
       valarray<T> other = va;
       for (T& i : other)
           i = exp(i);
    
       return other; // proxy object may be returned
   }

.SH Example

   This example demonstrates the Euler's identity eiÏ€
   = -1 and the related exponents.

   
// Run this code

 #include <complex>
 #include <iostream>
 #include <numbers>
 #include <valarray>
  
 int main()
 {
     const double pi = std::numbers::pi;
     std::valarray<std::complex<double>> v =
     {
         {0, 0}, {0, pi / 2}, {0, pi}, {0, 3 * pi / 2}, {0, 2 * pi}
     };
     std::valarray<std::complex<double>> v2 = std::exp(v);
     for (std::cout << std::showpos << std::fixed; auto n : v2)
         std::cout << n << '\\n';
 }

.SH Output:

 (+1.000000,+0.000000)
 (+0.000000,+1.000000)
 (-1.000000,+0.000000)
 (-0.000000,-1.000000)
 (+1.000000,-0.000000)

.SH See also

   log(std::valarray) applies the function std::log to each element of valarray
                      \fI(function template)\fP 
   exp
   expf               returns e raised to the given power (\\({\\small e^x}\\)e^x)
   expl               \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   exp(std::complex)  complex base e exponential
                      \fI(function template)\fP 

.SH Hidden category:
     * Pages with unreviewed LWG DR marker
