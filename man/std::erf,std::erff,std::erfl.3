.TH std::erf,std::erff,std::erfl 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::erf,std::erff,std::erfl \- std::erf,std::erff,std::erfl

.SH Synopsis
   Defined in header <cmath>
   float       erf ( float num );

   double      erf ( double num );                            (until C++23)

   long double erf ( long double num );
   /* floating-point-type */                                  (since C++23)
               erf ( /* floating-point-type */ num );         (constexpr since C++26)
   float       erff( float num );                     \fB(1)\fP \fB(2)\fP \fI(since C++11)\fP
                                                              (constexpr since C++26)
   long double erfl( long double num );                   \fB(3)\fP \fI(since C++11)\fP
                                                              (constexpr since C++26)
   Additional overloads \fI(since C++11)\fP
   Defined in header <cmath>
   template< class Integer >                              (A) (constexpr since C++26)
   double      erf ( Integer num );

   1-3) Computes the error function of num.
   The library provides overloads of std::erf for all cv-unqualified floating-point
   types as the type of the parameter.
   (since C++23)

   A) Additional overloads are provided for all integer types, which are  \fI(since C++11)\fP
   treated as double.

.SH Parameters

   num - floating-point or integer value

.SH Return value

   If no errors occur, value of the error function of num, that is
   \\(\\frac{2}{\\sqrt{\\pi} }\\int_{0}^{num}{e^{-{t^2} }\\mathsf{d}t}\\)

   2
   √
   π

   ∫num
   0e^-t2
   dt, is returned.
   If a range error occurs due to underflow, the correct result (after rounding), that
   is \\(\\frac{2\\cdot num}{\\sqrt{\\pi} }\\)

   2*num
   √
   π

   is returned.

.SH Error handling

   Errors are reported as specified in math_errhandling.

   If the implementation supports IEEE floating-point arithmetic (IEC 60559),

     * If the argument is ±0, ±0 is returned.
     * If the argument is ±∞, ±1 is returned.
     * If the argument is NaN, NaN is returned.

.SH Notes

   Underflow is guaranteed if |num| < DBL_MIN * (std::sqrt(π) / 2).

   \\(\\operatorname{erf}(\\frac{x}{\\sigma \\sqrt{2} })\\)erf(

   x
   σ
   √
   2

   ) is the probability that a measurement whose errors are subject to a normal
   distribution with standard deviation \\(\\sigma\\)σ is less than \\(x\\)x away from the
   mean value.

   The additional overloads are not required to be provided exactly as (A). They only
   need to be sufficient to ensure that for their argument num of integer type,
   std::erf(num) has the same effect as std::erf(static_cast<double>(num)).

.SH Example

   The following example calculates the probability that a normal variate is on the
   interval (x1, x2):

   
// Run this code

 #include <cmath>
 #include <iomanip>
 #include <iostream>
  
 double phi(double x1, double x2)
 {
     return (std::erf(x2 / std::sqrt(2)) - std::erf(x1 / std::sqrt(2))) / 2;
 }
  
 int main()
 {
     std::cout << "Normal variate probabilities:\\n"
               << std::fixed << std::setprecision(2);
     for (int n = -4; n < 4; ++n)
         std::cout << '[' << std::setw(2) << n
                   << ':' << std::setw(2) << n + 1 << "]: "
                   << std::setw(5) << 100 * phi(n, n + 1) << "%\\n";
  
     std::cout << "Special values:\\n"
               << "erf(-0) = " << std::erf(-0.0) << '\\n'
               << "erf(Inf) = " << std::erf(INFINITY) << '\\n';
 }

.SH Output:

 Normal variate probabilities:
 [-4:-3]:  0.13%
 [-3:-2]:  2.14%
 [-2:-1]: 13.59%
 [-1: 0]: 34.13%
 [ 0: 1]: 34.13%
 [ 1: 2]: 13.59%
 [ 2: 3]:  2.14%
 [ 3: 4]:  0.13%
 Special values:
 erf(-0) = -0.00
 erf(Inf) = 1.00

.SH See also

   erfc
   erfcf
   erfcl   complementary error function
   \fI(C++11)\fP \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   C documentation for
   erf

.SH External links

   Weisstein, Eric W. "Erf." From MathWorld — A Wolfram Web Resource.
