.TH std::ellint_3,std::ellint_3f,std::ellint_3l 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ellint_3,std::ellint_3f,std::ellint_3l \- std::ellint_3,std::ellint_3f,std::ellint_3l

.SH Synopsis
   Defined in header <cmath>
   float       ellint_3 ( float k, float nu, float phi );

   double      ellint_3 ( double k, double nu, double phi );              \fI(since C++17)\fP
                                                                          (until C++23)
   long double ellint_3 ( long double k, long double nu, long
   double phi );
   /* floating-point-type */ ellint_3( /* floating-point-type */
   k,

                                       /* floating-point-type */          (since C++23)
   nu,

                                       /* floating-point-type */  \fB(1)\fP
   phi );
   float       ellint_3f( float k, float nu, float phi );             \fB(2)\fP \fI(since C++17)\fP
   long double ellint_3l( long double k, long double nu, long         \fB(3)\fP \fI(since C++17)\fP
   double phi );
   Additional overloads
   Defined in header <cmath>
   template< class Arithmetic1, class Arithmetic2, class
   Arithmetic3 >

   /* common-floating-point-type */                                   (A) \fI(since C++17)\fP

       ellint_3( Arithmetic1 k, Arithmetic2 nu, Arithmetic3 phi
   );

   1-3) Computes the incomplete elliptic integral of the third kind of k, nu, and phi.
   The library provides overloads of std::ellint_3 for all cv-unqualified
   floating-point types as the type of the parameters k, nu and phi.
   (since C++23)
   A) Additional overloads are provided for all other combinations of arithmetic types.

.SH Parameters

   k   - elliptic modulus or eccentricity (a floating-point or integer value)
   nu  - elliptic characteristic (a floating-point or integer value)
   phi - Jacobi amplitude (a floating-point or integer value, measured in radians)

.SH Return value

   If no errors occur, value of the incomplete elliptic integral of the third kind of
   k, nu, and phi, that is ∫phi
   0

   dθ
   (1-nusin2
   θ)
   √
   1-k2
   sin2
   θ

   , is returned.

.SH Error handling

   Errors may be reported as specified in math_errhandling:

     * If the argument is NaN, NaN is returned and domain error is not reported.
     * If |k|>1, a domain error may occur.

.SH Notes

   Implementations that do not support C++17, but support ISO 29124:2010, provide this
   function if __STDCPP_MATH_SPEC_FUNCS__ is defined by the implementation to a value
   at least 201003L and if the user defines __STDCPP_WANT_MATH_SPEC_FUNCS__ before
   including any standard library headers.

   Implementations that do not support ISO 29124:2010 but support TR 19768:2007 (TR1),
   provide this function in the header tr1/cmath and namespace std::tr1.

   An implementation of this function is also available in boost.math.

   The additional overloads are not required to be provided exactly as (A). They only
   need to be sufficient to ensure that for their first argument num1, second argument
   num2 and third argument num3:

     * If num1, num2 or num3 has type long double, then
       std::ellint_3(num1, num2, num3) has the same effect as
       std::ellint_3(static_cast<long double>(num1),
                     static_cast<long double>(num2),
                     static_cast<long double>(num3)).
     * Otherwise, if num1, num2 and/or num3 has type double or an integer
       type, then std::ellint_3(num1, num2, num3) has the same effect as
       std::ellint_3(static_cast<double>(num1),                           (until C++23)
                     static_cast<double>(num2),
                     static_cast<double>(num3)).
     * Otherwise, if num1, num2 or num3 has type float, then
       std::ellint_3(num1, num2, num3) has the same effect as
       std::ellint_3(static_cast<float>(num1),
                     static_cast<float>(num2),
                     static_cast<float>(num3)).
   If num1, num2 and num3 have arithmetic types, then std::ellint_3(num1,
   num2, num3) has the same effect as std::ellint_3(static_cast</*
   common-floating-point-type */>(num1),
                 static_cast</* common-floating-point-type */>(num2),
                 static_cast</* common-floating-point-type */>(num3)),
   where /* common-floating-point-type */ is the floating-point type with
   the greatest floating-point conversion rank and greatest               (since C++23)
   floating-point conversion subrank among the types of num1, num2 and
   num3, arguments of integer type are considered to have the same
   floating-point conversion rank as double.

   If no such floating-point type with the greatest rank and subrank
   exists, then overload resolution does not result in a usable candidate
   from the overloads provided.

.SH Example

   
// Run this code

 #include <cmath>
 #include <iostream>
 #include <numbers>
  
 int main()
 {
     const double hpi = std::numbers::pi / 2;
  
     std::cout << "Π(0,0,π/2) = " << std::ellint_3(0, 0, hpi) << '\\n'
               << "π/2 = " << hpi << '\\n';
 }

.SH Output:

 Π(0,0,π/2) = 1.5708
 π/2 = 1.5708

    This section is incomplete
    Reason: this and other elliptic integrals deserve better examples.. perhaps
    calculate elliptic arc length?

.SH See also

   comp_ellint_3
   comp_ellint_3f
   comp_ellint_3l (complete) elliptic integral of the third kind
   \fI(C++17)\fP        \fI(function)\fP 
   \fI(C++17)\fP
   \fI(C++17)\fP

.SH External links

   Weisstein, Eric W. "Elliptic Integral of the Third Kind." From MathWorld — A Wolfram
   Web Resource.

.SH Category:
     * Todo with reason
