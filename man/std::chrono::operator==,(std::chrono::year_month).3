.TH std::chrono::operator==,(std::chrono::year_month) 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::chrono::operator==,(std::chrono::year_month) \- std::chrono::operator==,(std::chrono::year_month)

.SH Synopsis
   Defined in header <chrono>
   constexpr bool operator==( const std::chrono::year_month& x,
                              const std::chrono::year_month& y )      \fB(1)\fP \fI(since C++20)\fP
   noexcept;
   constexpr std::strong_ordering operator<=>( const
   std::chrono::year_month& x,                                        \fB(2)\fP \fI(since C++20)\fP
                                               const
   std::chrono::year_month& y ) noexcept;

   Compares the two year_month values x and y.

   The <, <=, >, >=, and != operators are synthesized from operator<=> and operator==
   respectively.

.SH Return value

   1) x.year() == y.year() && x.month() == y.month()
   2) x.year() <=> y.year() != 0 ? x.year() <=> y.year() : x.month() <=> y.month()

.SH Example

   
// Run this code

 #include <chrono>
 #include <iostream>
  
 int main()
 {
     using namespace std::chrono;
  
     constexpr year_month ym1{year(2021), month(7)};
     constexpr year_month ym2{year(2021)/7};
     static_assert(ym1 == ym2);
     std::cout << ym1 << '\\n';
  
     static_assert((2020y/1 < 2020y/2) && (2020y/2 == 2020y/2) && (2020y/3 <= 2021y/3) &&
                   (2023y/1 > 2020y/2) && (3020y/2 != 2020y/2) && (2020y/3 >= 2020y/3));
 }

.SH Output:

 2021/Jul
