.TH std::filesystem::create_directory,std::filesystem::create_directories 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::filesystem::create_directory,std::filesystem::create_directories \- std::filesystem::create_directory,std::filesystem::create_directories

.SH Synopsis
   Defined in header <filesystem>
   bool create_directory( const std::filesystem::path& p );           \fB(1)\fP \fI(since C++17)\fP
   bool create_directory( const std::filesystem::path& p,             \fB(2)\fP \fI(since C++17)\fP
   std::error_code& ec ) noexcept;
   bool create_directory( const std::filesystem::path& p,             \fB(3)\fP \fI(since C++17)\fP
                          const std::filesystem::path& existing_p );
   bool create_directory( const std::filesystem::path& p,

                          const std::filesystem::path& existing_p,    \fB(4)\fP \fI(since C++17)\fP

                          std::error_code& ec ) noexcept;
   bool create_directories( const std::filesystem::path& p );         \fB(5)\fP \fI(since C++17)\fP
   bool create_directories( const std::filesystem::path& p,           \fB(6)\fP \fI(since C++17)\fP
   std::error_code& ec );

   1,2) Creates the directory p as if by POSIX mkdir() with a second argument of
   static_cast<int>(std::filesystem::perms::all) (the parent directory must already
   exist). If the function fails because p resolves to an existing directory, no error
   is reported. Otherwise on failure an error is reported.
   3,4) Same as (1,2), except that the attributes of the new directory are copied from
   existing_p (which must be a directory that exists). It is OS-dependent which
   attributes are copied: on POSIX systems, the attributes are copied as if by

 stat(existing_p.c_str(), &attributes_stat)
 mkdir(p.c_str(), attributes_stat.st_mode)

   On Windows OS, no attributes of existing_p are copied.
   5,6) Executes (1,2) for every element of p that does not already exist. If p already
   exists, the function does nothing (this condition is not treated as an error).

.SH Parameters

   p          - the path to the new directory to create
   existing_p - the path to a directory to copy the attributes from
   ec         - out-parameter for error reporting in the non-throwing overload

.SH Return value

   true if a directory was newly created for the directory p resolves to, false
   otherwise.

.SH Exceptions

   Any overload not marked noexcept may throw std::bad_alloc if memory allocation
   fails.

   1,5) Throws std::filesystem::filesystem_error on underlying OS API errors,
   constructed with p as the first path argument and the OS error code as the error
   code argument.
   2,6) Sets a std::error_code& parameter to the OS API error code if an OS API call
   fails, and executes ec.clear() if no errors occur.
   3) Throws std::filesystem::filesystem_error on underlying OS API errors, constructed
   with p as the first path argument, existing_p as the second path argument, and the
   OS error code as the error code argument.
   4) Sets a std::error_code& parameter to the OS API error code if an OS API call
   fails, and executes ec.clear() if no errors occur.

.SH Notes

   The attribute-preserving overload (3,4) is implicitly invoked by copy() when
   recursively copying directories. Its equivalent in boost.filesystem is
   copy_directory (with argument order reversed).

.SH Example

   
// Run this code

 #include <cassert>
 #include <cstdlib>
 #include <filesystem>
  
 int main()
 {
     std::filesystem::current_path(std::filesystem::temp_directory_path());
  
     // Basic usage
     std::filesystem::create_directories("sandbox/1/2/a");
     std::filesystem::create_directory("sandbox/1/2/b");
  
     // Directory already exists (false returned, no error)
     assert(!std::filesystem::create_directory("sandbox/1/2/b"));
  
     // Permissions copying usage
     std::filesystem::permissions(
         "sandbox/1/2/b",
         std::filesystem::perms::others_all,
         std::filesystem::perm_options::remove
     );
     std::filesystem::create_directory("sandbox/1/2/c", "sandbox/1/2/b");
  
     std::system("ls -l sandbox/1/2");
     std::system("tree sandbox");
     std::filesystem::remove_all("sandbox");
 }

.SH Possible output:

 drwxr-xr-x 2 user group 4096 Apr 15 09:33 a
 drwxr-x--- 2 user group 4096 Apr 15 09:33 b
 drwxr-x--- 2 user group 4096 Apr 15 09:33 c
 sandbox
 └── 1
     └── 2
         ├── a
         ├── b
         └── c

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to              Behavior as published              Correct behavior
   LWG 2935 C++17      error if target already exists but is not a     not error
                       directory
   LWG 3014 C++17      error_code overload of create_directories       noexcept removed
                       marked noexcept but can allocate memory
   P1164R1  C++17      creation failure caused by an existing          made error
                       non-directory file is not an error

.SH See also

   create_symlink
   create_directory_symlink creates a symbolic link
   \fI(C++17)\fP                  \fI(function)\fP 
   \fI(C++17)\fP
   copy                     copies files or directories
   \fI(C++17)\fP                  \fI(function)\fP 
   perms                    identifies file system permissions
   \fI(C++17)\fP                  \fI(enum)\fP 
