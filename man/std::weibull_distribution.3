.TH std::weibull_distribution 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::weibull_distribution \- std::weibull_distribution

.SH Synopsis
   Defined in header <random>
   template< class RealType = double >  \fI(since C++11)\fP
   class weibull_distribution;

   The weibull_distribution meets the requirements of a RandomNumberDistribution and
   produces random numbers according to the Weibull distribution:

   \\(\\small{f(x;a,b)=\\frac{a}{b}{(\\frac{x}{b})}^{a-1}\\exp{(-{(\\frac{x}{b})}^{a})}
   }\\)f(x;a,b) =

   a
   b

   ⎛
   ⎜
   ⎝

   x
   b

   ⎞
   ⎟
   ⎠a-1
   exp⎛
   ⎜
   ⎝-⎛
   ⎜
   ⎝

   x
   b

   ⎞
   ⎟
   ⎠a
   ⎞
   ⎟
   ⎠

   a is the shape parameter and b the scale parameter.

   std::weibull_distribution satisfies RandomNumberDistribution.

.SH Template parameters

   RealType - The result type generated by the generator. The effect is undefined if
              this is not one of float, double, or long double.

.SH Member types

   Member type         Definition
   result_type \fI(C++11)\fP RealType
   param_type \fI(C++11)\fP  the type of the parameter set, see RandomNumberDistribution.

.SH Member functions

   constructor   constructs new distribution
   \fI(C++11)\fP       \fI(public member function)\fP 
   reset         resets the internal state of the distribution
   \fI(C++11)\fP       \fI(public member function)\fP 
.SH Generation
   operator()    generates the next random number in the distribution
   \fI(C++11)\fP       \fI(public member function)\fP 
.SH Characteristics
   a             returns the distribution parameters
   b             \fI(public member function)\fP 
   \fI(C++11)\fP
   param         gets or sets the distribution parameter object
   \fI(C++11)\fP       \fI(public member function)\fP 
   min           returns the minimum potentially generated value
   \fI(C++11)\fP       \fI(public member function)\fP 
   max           returns the maximum potentially generated value
   \fI(C++11)\fP       \fI(public member function)\fP 

.SH Non-member functions

   operator==
   operator!=                compares two distribution objects
   \fI(C++11)\fP                   \fI(function)\fP 
   \fI(C++11)\fP(removed in C++20)
   operator<<                performs stream input and output on pseudo-random number
   operator>>                distribution
   \fI(C++11)\fP                   \fI(function template)\fP 

.SH Example

   
// Run this code

 #include <cmath>
 #include <iomanip>
 #include <iostream>
 #include <map>
 #include <random>
 #include <string>
  
 int main()
 {
     std::random_device rd;
     std::mt19937 gen(rd());
  
     std::weibull_distribution<> d;
  
     std::map<int, int> hist;
     for (int n = 0; n != 10000; ++n)
         ++hist[std::round(d(gen))];
  
     std::cout << std::fixed << std::setprecision(1) << std::hex;
     for (auto [x, y] : hist)
         std::cout << x << ' ' << std::string(y / 200, '*') << '\\n';
 }

.SH Possible output:

 0 *******************
 1 *******************
 2 ******
 3 **
 4
 5
 6
 7
 8

.SH External links

   1.  Weisstein, Eric W. "Weibull Distribution." From MathWorld — A Wolfram Web
       Resource.
   2.  Weibull distribution — From Wikipedia.
