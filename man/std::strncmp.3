.TH std::strncmp 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::strncmp \- std::strncmp

.SH Synopsis
   Defined in header <cstring>
   int strncmp( const char* lhs, const char* rhs, std::size_t count );

   Compares at most count characters of two possibly null-terminated arrays. The
   comparison is done lexicographically. Characters following the null character are
   not compared.

   The sign of the result is the sign of the difference between the values of the first
   pair of characters (both interpreted as unsigned char) that differ in the arrays
   being compared.

   The behavior is undefined when access occurs past the end of either array lhs or
   rhs. The behavior is undefined when either lhs or rhs is the null pointer.

.SH Parameters

   lhs, rhs - pointers to the possibly null-terminated arrays to compare
   count    - maximum number of characters to compare

.SH Return value

   Negative value if lhs appears before rhs in lexicographical order.

   Zero if lhs and rhs compare equal, or if count is zero.

   Positive value if lhs appears after rhs in lexicographical order.

.SH Notes

   This function is not locale-sensitive, unlike std::strcoll and std::strxfrm.

.SH Example

   
// Run this code

 #include <cstring>
 #include <iostream>
  
 void demo(const char* lhs, const char* rhs, int sz)
 {
     const int rc = std::strncmp(lhs, rhs, sz);
     if (rc < 0)
         std::cout << "First " << sz << " chars of ["
                   << lhs << "] precede [" << rhs << "]\\n";
     else if (rc > 0)
         std::cout << "First " << sz << " chars of ["
                   << lhs << "] follow [" << rhs << "]\\n";
     else
         std::cout << "First " << sz << " chars of ["
                   << lhs << "] equal [" << rhs << "]\\n";
 }
  
 int main()
 {
     demo("Hello, world!", "Hello, everybody!", 13);
     demo("Hello, everybody!", "Hello, world!", 13);
     demo("Hello, everybody!", "Hello, world!", 7);
     demo("Hello, everybody!" + 12, "Hello, somebody!" + 11, 5);
 }

.SH Output:

 First 13 chars of [Hello, world!] follow [Hello, everybody!]
 First 13 chars of [Hello, everybody!] precede [Hello, world!]
 First 7 chars of [Hello, everybody!] equal [Hello, world!]
 First 5 chars of [body!] equal [body!]

.SH See also

   strcmp  compares two strings
           \fI(function)\fP 
   wcsncmp compares a certain amount of characters from two wide strings
           \fI(function)\fP 
   memcmp  compares two buffers
           \fI(function)\fP 
   strcoll compares two strings in accordance to the current locale
           \fI(function)\fP 
   C documentation for
   strncmp
