.TH std::atomic::fetch_max 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::atomic::fetch_max \- std::atomic::fetch_max

.SH Synopsis
   member only of atomic<Integralâ€Š> specializations
   T fetch_max( T arg, std::memory_order order =                      \fB(1)\fP (since C++26)
                           std::memory_order_seq_cst ) noexcept;
   T fetch_max( T arg, std::memory_order order =
                           std::memory_order_seq_cst ) volatile       \fB(2)\fP (since C++26)
   noexcept;
   member only of atomic<T*> partial specialization
   T* fetch_max( T* arg, std::memory_order order =                    \fB(3)\fP (since C++26)
                             std::memory_order_seq_cst ) noexcept;
   T* fetch_max( T* arg, std::memory_order order =
                             std::memory_order_seq_cst ) volatile     \fB(4)\fP (since C++26)
   noexcept;

   Atomically replaces the current value with the result of std::max of the value and
   arg. That is, it performs atomic maximum operation. The operation is a
   read-modify-write operation. Memory is affected according to the value of order.

   3,4) If the pointers point to different complete objects (or subobjects thereof),
   pointer comparison does not establish a strict weak ordering.

   It is deprecated if std::atomic<T>::is_always_lock_free is false and overload \fB(2)\fP or
   \fB(4)\fP participates in overload resolution.

.SH Parameters

   arg   - the other argument of std::max
   order - memory order constraints to enforce

.SH Return value

   The value immediately preceding the effects of this function in the modification
   order of *this.

.SH Notes

      Feature-test macro     Value    Std          Feature
   __cpp_lib_atomic_min_max 202403L (C++26) Atomic minimum/maximum

.SH Example

    This section is incomplete
    Reason: no example

.SH Category:
     * Todo no example
