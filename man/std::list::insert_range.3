.TH std::list::insert_range 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::list::insert_range \- std::list::insert_range

.SH Synopsis
   template< container-compatible-range<T> R >           (since C++23)
   iterator insert_range( const_iterator pos, R&& rg );

   Inserts, in non-reversing order, copies of elements in rg before pos.

   No iterators or references are invalidated.

   Each iterator in the range rg is dereferenced exactly once.

   The behavior is undefined if rg overlaps with the container.

.SH Parameters

   pos  -  iterator before which the content will be inserted (pos may be the end()
           iterator)
   rg   -  a container compatible range, that is, an input_range whose elements are
           convertible to T
.SH Type requirements
   -
   T must be EmplaceConstructible into list from *ranges::begin(rg). Otherwise, the
   behavior is undefined.

.SH Return value

   An iterator that points at the copy of the first element inserted into list or at
   pos if rg is empty.

.SH Notes

       Feature-test macro       Value    Std                   Feature
   __cpp_lib_containers_ranges 202202L (C++23) Ranges-aware construction and insertion

.SH Example

   
// Run this code

 #include <algorithm>
 #include <cassert>
 #include <iterator>
 #include <list>
 #include <vector>
  
 int main()
 {
     auto container = std::list{1, 2, 3, 4};
     auto pos = std::next(container.begin(), 2);
     assert(*pos == 3);
     const auto rg = std::vector{-1, -2, -3};
  
 #ifdef __cpp_lib_containers_ranges
     container.insert_range(pos, rg);
 #else
     container.insert(pos, rg.cbegin(), rg.cend());
 #endif
     assert(std::ranges::equal(container, std::list{1, 2, -1, -2, -3, 3, 4}));
 }

.SH See also

   insert        inserts elements
                 \fI(public member function)\fP
   prepend_range adds a range of elements to the beginning
   (C++23)       \fI(public member function)\fP
   append_range  adds a range of elements to the end
   (C++23)       \fI(public member function)\fP
