.TH std::not1 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::not1 \- std::not1

.SH Synopsis
   Defined in header <functional>
   template< class Predicate >                                    \fI(until C++14)\fP
   std::unary_negate<Predicate> not1( const Predicate& pred );
   template< class Predicate >                                    \fI(since C++14)\fP
   constexpr std::unary_negate<Predicate> not1( const Predicate&  (deprecated in C++17)
   pred );                                                        (removed in C++20)

   std::not1 is a helper function to create a function object that returns the
   complement of the unary predicate function passed. The function object created is of
   type std::unary_negate<Predicate>.

   The unary predicate type must define a member type, argument_type, that is
   convertible to the predicate's parameter type. The unary function objects obtained
   from std::ref, std::cref, std::negate, std::logical_not, std::mem_fn, std::function,
   std::hash, or from another call to std::not1 have this type defined, as are function
   objects derived from the deprecated std::unary_function.

.SH Parameters

   pred - unary predicate

.SH Return value

   std::not1 returns an object of type std::unary_negate<Predicate>, constructed with
   pred.

.SH Exceptions

   \fI(none)\fP

.SH Example

   
// Run this code

 #include <algorithm>
 #include <functional>
 #include <iostream>
 #include <iterator>
 #include <numeric>
 #include <vector>
  
 struct LessThan7 : std::unary_function<int, bool>
 {
     bool operator()(int i) const { return i < 7; }
 };
  
 int main()
 {
     std::vector<int> v(10);
     std::iota(std::begin(v), std::end(v), 0);
  
     std::cout << std::count_if(begin(v), end(v), std::not1(LessThan7())) << '\\n';
  
     // the same as above using std::function
     std::function<bool(int)> less_than_9 = [](int x) { return x < 9; };
     std::cout << std::count_if(begin(v), end(v), std::not1(less_than_9)) << '\\n';
 }

.SH Output:

 3
 1

.SH See also

   not_fn                creates a function object that returns the complement of the
   \fI(C++17)\fP               result of the function object it holds
                         \fI(function template)\fP 
   unary_negate          wrapper function object returning the complement of the unary
   (deprecated in C++17) predicate it holds
   (removed in C++20)    \fI(class template)\fP 
   function              wraps callable object of any copy constructible type with
   \fI(C++11)\fP               specified function call signature
                         \fI(class template)\fP 
   move_only_function    wraps callable object of any type with specified function call
   (C++23)               signature
                         \fI(class template)\fP 
   not2                  constructs custom std::binary_negate object
   (deprecated in C++17) \fI(function template)\fP 
   (removed in C++20)
   ptr_fun               creates an adaptor-compatible function object wrapper from a
   (deprecated in C++11) pointer to function
   (removed in C++17)    \fI(function template)\fP 
   unary_function        adaptor-compatible unary function base class
   (deprecated in C++11) \fI(class template)\fP 
   (removed in C++17)
