.TH std::ranges::count,std::ranges::count_if 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::count,std::ranges::count_if \- std::ranges::count,std::ranges::count_if

.SH Synopsis
   Defined in header <algorithm>
   Call signature
   template< std::input_iterator I, std::sentinel_for<I> S,

             class T, class Proj = std::identity >
   requires std::indirect_binary_predicate                              (since
                <ranges::equal_to, std::projected<I, Proj>,             C++20)
   const T*>                                                            (until
   constexpr std::iter_difference_t<I>                                  C++26)

       count( I first, S last, const T& value, Proj proj = {}
   );
   template< std::input_iterator I, std::sentinel_for<I> S,

             class Proj = std::identity,
             class T = std::projected_value_t<I, Proj> >
   requires std::indirect_binary_predicate                              (since
                <ranges::equal_to, std::projected<I, Proj>,             C++26)
   const T*>
   constexpr std::iter_difference_t<I>

       count( I first, S last, const T& value, Proj proj = {}
   );
   template< ranges::input_range R, class T, class Proj =
   std::identity >

   requires std::indirect_binary_predicate                                      (since
                <ranges::equal_to,                                              C++20)
                 std::projected<ranges::iterator_t<R>, Proj>,                   (until
   const T*>                                                                    C++26)
   constexpr ranges::range_difference_t<R>                      \fB(1)\fP

       count( R&& r, const T& value, Proj proj = {} );
   template< ranges::input_range R, class Proj = std::identity,

             class T =
   std::projected_value_t<ranges::iterator_t<R>, Proj> >
   requires std::indirect_binary_predicate                                      (since
                <ranges::equal_to,                                              C++26)
                 std::projected<ranges::iterator_t<R>, Proj>,
   const T*>
   constexpr ranges::range_difference_t<R>                          \fB(2)\fP

       count( R&& r, const T& value, Proj proj = {} );
   template< std::input_iterator I, std::sentinel_for<I> S,

             class Proj = std::identity,
             std::indirect_unary_predicate<std::projected<I,            \fB(3)\fP     (since
   Proj>> Pred >                                                                C++20)
   constexpr std::iter_difference_t<I>

       count_if( I first, S last, Pred pred, Proj proj = {} );
   template< ranges::input_range R, class Proj = std::identity,

             std::indirect_unary_predicate<
                 std::projected<ranges::iterator_t<R>, Proj>>           \fB(4)\fP     (since
   Pred >                                                                       C++20)
   constexpr ranges::range_difference_t<R>

       count_if( R&& r, Pred pred, Proj proj = {} );

   Returns the number of elements in the range [first, last) satisfying specific
   criteria.

   1) Counts the elements that are equal to value.
   3) Counts elements for which predicate p returns true.
   2,4) Same as (1,3), but uses r as the source range, as if using ranges::begin(r) as
   first and ranges::end(r) as last.

   The function-like entities described on this page are niebloids, that is:

     * Explicit template argument lists cannot be specified when calling any of them.
     * None of them are visible to argument-dependent lookup.
     * When any of them are found by normal unqualified lookup as the name to the left
       of the function-call operator, argument-dependent lookup is inhibited.

   In practice, they may be implemented as function objects, or with special compiler
   extensions.

.SH Parameters

   first, last - the range of elements to examine
   r           - the range of the elements to examine
   value       - the value to search for
   pred        - predicate to apply to the projected elements
   proj        - projection to apply to the elements

.SH Return value

   Number of elements satisfying the condition.

.SH Complexity

   Exactly last - first comparisons and projection.

.SH Notes

   For the number of elements in the range without any additional criteria, see
   std::ranges::distance.

             Feature-test macro           Value    Std              Feature
   __cpp_lib_algorithm_default_value_type 202403 (C++26) List-initialization for
                                                         algorithms (1,2)

.SH Possible implementation

                                         count \fB(1)\fP
  struct count_fn
  {
      template<std::input_iterator I, std::sentinel_for<I> S,
               class Proj = std::identity, class T = std::projected_value_t<I, Proj>>
      requires std::indirect_binary_predicate<ranges::equal_to,
                                              std::projected<I, Proj>, const T*>
      constexpr std::iter_difference_t<I>
          operator()(I first, S last, const T& value, Proj proj = {}) const
      {
          std::iter_difference_t<I> counter = 0;
          for (; first != last; ++first)
              if (std::invoke(proj, *first) == value)
                  ++counter;
          return counter;
      }
   
      template<ranges::input_range R, class Proj = std::identity
               class T = std::projected_value_t<ranges::iterator_t<R>, Proj>>
      requires std::indirect_binary_predicate<ranges::equal_to,
                                              std::projected<ranges::iterator_t<R>, Proj>,
                                              const T*>
      constexpr ranges::range_difference_t<R>
          operator()(R&& r, const T& value, Proj proj = {}) const
      {
          return (*this)(ranges::begin(r), ranges::end(r), value, std::ref(proj));
      }
  };
   
  inline constexpr count_fn count;
                                        count_if \fB(3)\fP
  struct count_if_fn
  {
      template<std::input_iterator I, std::sentinel_for<I> S,
               class Proj = std::identity,
               std::indirect_unary_predicate<std::projected<I, Proj>> Pred>
      constexpr std::iter_difference_t<I>
          operator()(I first, S last, Pred pred, Proj proj = {}) const
      {
          std::iter_difference_t<I> counter = 0;
          for (; first != last; ++first)
              if (std::invoke(pred, std::invoke(proj, *first)))
                  ++counter;
          return counter;
      }
   
      template<ranges::input_range R, class Proj = std::identity,
               std::indirect_unary_predicate<
                   std::projected<ranges::iterator_t<R>, Proj>> Pred>
      constexpr ranges::range_difference_t<R>
          operator()(R&& r, Pred pred, Proj proj = {}) const
      {
          return (*this)(ranges::begin(r), ranges::end(r),
                         std::ref(pred), std::ref(proj));
      }
  };
   
  inline constexpr count_if_fn count_if;

.SH Example

   
// Run this code

 #include <algorithm>
 #include <cassert>
 #include <complex>
 #include <iostream>
 #include <vector>
  
 int main()
 {
     std::vector<int> v{1, 2, 3, 4, 4, 3, 7, 8, 9, 10};
  
     namespace ranges = std::ranges;
  
     // determine how many integers in a std::vector match a target value.
     int target1 = 3;
     int target2 = 5;
     int num_items1 = ranges::count(v.begin(), v.end(), target1);
     int num_items2 = ranges::count(v, target2);
     std::cout << "number: " << target1 << " count: " << num_items1 << '\\n';
     std::cout << "number: " << target2 << " count: " << num_items2 << '\\n';
  
     // use a lambda expression to count elements divisible by 3.
     int num_items3 = ranges::count_if(v.begin(), v.end(), [](int i){ return i % 3 == 0; });
     std::cout << "number divisible by three: " << num_items3 << '\\n';
  
     // use a lambda expression to count elements divisible by 11.
     int num_items11 = ranges::count_if(v, [](int i){ return i % 11 == 0; });
     std::cout << "number divisible by eleven: " << num_items11 << '\\n';
  
     std::vector<std::complex<double>> nums{{4, 2}, {1, 3}, {4, 2}};
     #ifdef __cpp_lib_algorithm_default_value_type
         auto c = ranges::count(nums, {4, 2});
     #else
         auto c = ranges::count(nums, std::complex<double>{4, 2});
     #endif
     assert(c == 2);
 }

.SH Output:

 number: 3 count: 2
 number: 5 count: 0
 number divisible by three: 3
 number divisible by eleven: 0

.SH See also

   ranges::distance    returns the distance between an iterator and a sentinel, or
   (C++20)             between the beginning and end of a range
                       (niebloid)
   views::counted      creates a subrange from an iterator and a count
   (C++20)             (customization point object)
   ranges::filter_view a view that consists of the elements of a range that satisfies a
   views::filter       predicate
   (C++20)             \fI(class template)\fP (range adaptor object)
   count               returns the number of elements satisfying specific criteria
   count_if            \fI(function template)\fP 
