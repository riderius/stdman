.TH std::erase,std::erase_if(std::basic_string) 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::erase,std::erase_if(std::basic_string) \- std::erase,std::erase_if(std::basic_string)

.SH Synopsis
   Defined in header <string>
   template< class CharT, class Traits, class Alloc, class U >

   constexpr std::basic_string<CharT, Traits, Alloc>::size_type           \fI(since C++20)\fP
                                                                          (until C++26)
       erase( std::basic_string<CharT, Traits, Alloc>& c, const
   U& value );
   template< class CharT, class Traits, class Alloc, class U =
   CharT >

   constexpr std::basic_string<CharT, Traits, Alloc>::size_type   \fB(1)\fP     (since C++26)

       erase( std::basic_string<CharT, Traits, Alloc>& c, const
   U& value );
   template< class CharT, class Traits, class Alloc, class Pred >

   constexpr std::basic_string<CharT, Traits, Alloc>::size_type       \fB(2)\fP \fI(since C++20)\fP

       erase_if( std::basic_string<CharT, Traits, Alloc>& c, Pred
   pred );

   1) Erases all elements that compare equal to value from the container. Equivalent to

 auto it = std::remove(c.begin(), c.end(), value);
 auto r = c.end() - it;
 c.erase(it, c.end());
 return r;

   2) Erases all elements that satisfy the predicate pred from the container.
   Equivalent to

 auto it = std::remove_if(c.begin(), c.end(), pred);
 auto r = c.end() - it;
 c.erase(it, c.end());
 return r;

.SH Parameters

   c     - container from which to erase
   value - value to be removed
           unary predicate which returns true if the element should be erased.

           The expression pred(v) must be convertible to bool for every argument v of
   pred  - type (possibly const) CharT, regardless of value category, and must not
           modify v. Thus, a parameter type of CharT&is not allowed
           , nor is CharT unless for CharT a move is equivalent to a copy
           \fI(since C++11)\fP.

.SH Return value

   The number of erased elements.

.SH Complexity

   Linear.

.SH Notes

             Feature-test macro           Value    Std              Feature
   __cpp_lib_algorithm_default_value_type 202403 (C++26) List-initialization for
                                                         algorithm \fB(1)\fP

.SH Example

   
// Run this code

 #include <iomanip>
 #include <iostream>
 #include <string>
  
 int main()
 {
     std::string word{"startling"};
     std::cout << "Initially, word = " << std::quoted(word) << '\\n';
  
     std::erase(word, 'l');
     std::cout << "After erase 'l': " << std::quoted(word) << '\\n';
  
     auto erased = std::erase_if(word, [](char x)
     {
         return x == 'a' or x == 'r' or x == 't';
     });
  
     std::cout << "After erase all 'a', 'r', and 't': " << std::quoted(word) << '\\n';
     std::cout << "Erased symbols count: " << erased << '\\n';
 }

.SH Output:

 Initially, word = "startling"
 After erase 'l', word = "starting"
 After erase all 'a', 'r', and 't': "sing"
 Erased symbols count: 4

.SH See also

   remove    removes elements satisfying specific criteria
   remove_if \fI(function template)\fP 
