.TH std::ranges::end 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::end \- std::ranges::end

.SH Synopsis
   Defined in header <ranges>
   Defined in header <iterator>
   inline namespace /* unspecified */ {
                                                                   \fI(since C++20)\fP
       inline constexpr /* unspecified */ end = /* unspecified     (customization point
   */;                                                             object)

   }
   Call signature
   template< class T >

       requires /* see below */                                    \fI(since C++20)\fP

   constexpr std::sentinel_for<ranges::iterator_t<T>> auto end(
   T&& t );

   Returns a sentinel indicating the end of a range.

   range-begin-end.svg

   If the argument is an lvalue or ranges::enable_borrowed_range<std::remove_cv_t<T>>
   is true, then a call to ranges::end is expression-equivalent to:

    1. t + std::extent_v<T> if t has an array type of known bound.
          * If std::remove_all_extents_t<std::remove_reference_t<T>> is incomplete,
            then the call to ranges::end is ill-formed, no diagnostic required.
    2. Otherwise,
       decay-copy(t.end())
       (until C++23)
       auto(t.end())
       (since C++23), if that expression is valid, and its type models
       std::sentinel_for<ranges::iterator_t<T>>.
    3. Otherwise,
       decay-copy(end(t))
       (until C++23)
       auto(end(t))
       (since C++23), if T is a class or enumeration type, that expression is valid and
       its converted type models std::sentinel_for<ranges::iterator_t<T>>, where the
       meaning of end is established as if by performing argument-dependent lookup
       only.

   In all other cases, a call to ranges::end is ill-formed, which can result in
   substitution failure when the call to ranges::end appears in the immediate context
   of a template instantiation.

.SH Notes

   If the argument is an rvalue (i.e. T is an object type) and
   ranges::enable_borrowed_range<std::remove_cv_t<T>> is false, or if it is of an array
   type of unknown bound, the call to ranges::end is ill-formed, which also results in
   substitution failure.

   If ranges::end(std::forward<T>(t)) is valid, then
   decltype(ranges::end(std::forward<T>(t))) and
   decltype(ranges::begin(std::forward<T>(t))) model std::sentinel_for in all cases,
   while T models std::ranges::range.

   The C++20 standard requires that if the underlying end function call returns a
   prvalue, the return value is move-constructed from the materialized temporary
   object. All implementations directly return the prvalue instead. The requirement is
   corrected by the post-C++20 proposal P0849R8 to match the implementations.

.SH Example

   
// Run this code

 #include <algorithm>
 #include <iostream>
 #include <ranges>
 #include <vector>
  
 int main()
 {
     std::vector<int> vec{3, 1, 4};
     if (std::ranges::find(vec, 5) != std::ranges::end(vec))
         std::cout << "found a 5 in vector vec!\\n";
  
     int arr[]{5, 10, 15};
     if (std::ranges::find(arr, 5) != std::ranges::end(arr))
         std::cout << "found a 5 in array arr!\\n";
 }

.SH Output:

 found a 5 in array arr!

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

     DR    Applied to           Behavior as published               Correct behavior
   P2602R2 C++20      there's machinery to prohibit certain      removed such machinery
                      non-member end found by ADL

.SH See also

   ranges::cend  returns a sentinel indicating the end of a read-only range
   (C++20)       (customization point object)
   ranges::begin returns an iterator to the beginning of a range
   (C++20)       (customization point object)
   end
   cend          returns an iterator to the end of a container or array
   \fI(C++11)\fP       \fI(function template)\fP 
   \fI(C++14)\fP
