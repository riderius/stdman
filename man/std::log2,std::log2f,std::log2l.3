.TH std::log2,std::log2f,std::log2l 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::log2,std::log2f,std::log2l \- std::log2,std::log2f,std::log2l

.SH Synopsis
   Defined in header <cmath>
   float       log2 ( float num );

   double      log2 ( double num );                            (until C++23)

   long double log2 ( long double num );
   /* floating-point-type */                                   (since C++23)
               log2 ( /* floating-point-type */ num );         (constexpr since C++26)
   float       log2f( float num );                     \fB(1)\fP \fB(2)\fP \fI(since C++11)\fP
                                                               (constexpr since C++26)
   long double log2l( long double num );                   \fB(3)\fP \fI(since C++11)\fP
                                                               (constexpr since C++26)
   Additional overloads \fI(since C++11)\fP
   Defined in header <cmath>
   template< class Integer >                               (A) (constexpr since C++26)
   double      log2 ( Integer num );

   1-3) Computes the binary (base-2) logarithm of num.
   The library provides overloads of std::log2 for all cv-unqualified floating-point
   types as the type of the parameter.
   (since C++23)

   A) Additional overloads are provided for all integer types, which are  \fI(since C++11)\fP
   treated as double.

.SH Parameters

   num - floating-point or integer value

.SH Return value

   If no errors occur, the base-2 logarithm of num (log
   2(num) or lb(num)) is returned.

   If a domain error occurs, an implementation-defined value is returned (NaN where
   supported).

   If a pole error occurs, -HUGE_VAL, -HUGE_VALF, or -HUGE_VALL is returned.

.SH Error handling

   Errors are reported as specified in math_errhandling.

   Domain error occurs if num is less than zero.

   Pole error may occur if num is zero.

   If the implementation supports IEEE floating-point arithmetic (IEC 60559),

     * If the argument is ±0, -∞ is returned and FE_DIVBYZERO is raised.
     * If the argument is 1, +0 is returned.
     * If the argument is negative, NaN is returned and FE_INVALID is raised.
     * If the argument is +∞, +∞ is returned.
     * If the argument is NaN, NaN is returned.

.SH Notes

   For integer num, the binary logarithm can be interpreted as the zero-based index of
   the most significant 1 bit in the input.

   The additional overloads are not required to be provided exactly as (A). They only
   need to be sufficient to ensure that for their argument num of integer type,
   std::log2(num) has the same effect as std::log2(static_cast<double>(num)).

.SH Example

   
// Run this code

 #include <cerrno>
 #include <cfenv>
 #include <cmath>
 #include <cstring>
 #include <iostream>
 // #pragma STDC FENV_ACCESS ON
  
 int main()
 {
     std::cout << "log2(65536) = " << std::log2(65536) << '\\n'
               << "log2(0.125) = " << std::log2(0.125) << '\\n'
               << "log2(0x020f) = " << std::log2(0x020f)
               << " (highest set bit is in position 9)\\n"
               << "base-5 logarithm of 125 = "
               << std::log2(125) / std::log2(5) << '\\n';
  
     // special values
     std::cout << "log2(1) = " << std::log2(1) << '\\n'
               << "log2(+Inf) = " << std::log2(INFINITY) << '\\n';
  
     // error handling
     errno = 0;
     std::feclearexcept(FE_ALL_EXCEPT);
  
     std::cout << "log2(0) = " << std::log2(0) << '\\n';
  
     if (errno == ERANGE)
         std::cout << "    errno == ERANGE: " << std::strerror(errno) << '\\n';
     if (std::fetestexcept(FE_DIVBYZERO))
         std::cout << "    FE_DIVBYZERO raised\\n";
 }

.SH Possible output:

 log2(65536) = 16
 log2(0.125) = -3
 log2(0x020f) = 9.04166 (highest set bit is in position 9)
 base-5 logarithm of 125 = 3
 log2\fB(1)\fP = 0
 log2(+Inf) = inf
 log2\fB(0)\fP = -inf
     errno == ERANGE: Numerical result out of range
     FE_DIVBYZERO raised

.SH See also

   log
   logf    computes natural (base e) logarithm (\\({\\small\\ln{x}}\\)ln(x))
   logl    \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   log10
   log10f  computes common (base 10) logarithm (\\({\\small\\log_{10}{x}}\\)log[10](x))
   log10l  \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   log1p
   log1pf  natural logarithm (to base e) of 1 plus the given number
   log1pl  (\\({\\small\\ln{(1+x)}}\\)ln(1+x))
   \fI(C++11)\fP \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   exp2
   exp2f
   exp2l   returns 2 raised to the given power (\\({\\small 2^x}\\)2^x)
   \fI(C++11)\fP \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   C documentation for
   log2
