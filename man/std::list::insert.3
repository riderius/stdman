.TH std::list::insert 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::list::insert \- std::list::insert

.SH Synopsis
   iterator insert( const_iterator pos, const T& value );             \fB(1)\fP
   iterator insert( const_iterator pos, T&& value );                  \fB(2)\fP \fI(since C++11)\fP
   iterator insert( const_iterator pos,                               \fB(3)\fP
                    size_type count, const T& value );
   template< class InputIt >
   iterator insert( const_iterator pos, InputIt first, InputIt last   \fB(4)\fP
   );
   iterator insert( const_iterator pos, std::initializer_list<T>      \fB(5)\fP \fI(since C++11)\fP
   ilist );

   Inserts elements at the specified location in the container.

   1,2) Inserts value before pos.
   3) Inserts count copies of the value before pos.
   4) Inserts elements from range [first, last) before pos.

   This overload has the same effect as overload \fB(3)\fP if InputIt is an     \fI(until C++11)\fP
   integral type.
   This overload participates in overload resolution only if InputIt
   qualifies as LegacyInputIterator, to avoid ambiguity with the overload \fI(since C++11)\fP
   \fB(3)\fP.

   If first and last are iterators into *this, the behavior is undefined.
   5) Inserts elements from initializer list ilist before pos.

   No iterators or references are invalidated.

.SH Parameters

   pos         - iterator before which the content will be inserted (pos may be the
                 end() iterator)
   value       - element value to insert
   count       - number of elements to insert
   first, last - the range of elements to insert, cannot be iterators into container
                 for which insert is called
   ilist       - initializer list to insert the values from
.SH Type requirements
   -
   T must meet the requirements of CopyInsertable in order to use overload \fB(1)\fP.
   -
   T must meet the requirements of MoveInsertable in order to use overload \fB(2)\fP.
   -
   T must meet the requirements of CopyAssignable and CopyInsertable in order to use
   overload \fB(3)\fP.
   -
   T must meet the requirements of EmplaceConstructible in order to use overloads
   (4,5).

.SH Return value

   1,2) Iterator pointing to the inserted value.
   3) Iterator pointing to the first element inserted, or pos if count == 0.
   4) Iterator pointing to the first element inserted, or pos if first == last.
   5) Iterator pointing to the first element inserted, or pos if ilist is empty.

.SH Complexity

   1,2) Constant.
   3) Linear in count.
   4) Linear in std::distance(first, last).
   5) Linear in ilist.size().

.SH Exceptions

   If an exception is thrown for any reason, these functions have no effect (strong
   exception safety guarantee).

.SH Example

   
// Run this code

 #include <iostream>
 #include <iterator>
 #include <list>
  
 void print(int id, const std::list<int>& container)
 {
     std::cout << id << ". ";
     for (const int x : container)
         std::cout << x << ' ';
     std::cout << '\\n';
 }
  
 int main ()
 {
     std::list<int> c1(3, 100);
     print(1, c1);
  
     auto it = c1.begin();
     it = c1.insert(it, 200);
     print(2, c1);
  
     c1.insert(it, 2, 300);
     print(3, c1);
  
     // reset `it` to the begin:
     it = c1.begin();
  
     std::list<int> c2(2, 400);
     c1.insert(std::next(it, 2), c2.begin(), c2.end());
     print(4, c1);
  
     int arr[] = {501, 502, 503};
     c1.insert(c1.begin(), arr, arr + std::size(arr));
     print(5, c1);
  
     c1.insert(c1.end(), {601, 602, 603});
     print(6, c1);
 }

.SH Output:

 1. 100 100 100
 2. 200 100 100 100
 3. 300 300 200 100 100 100
 4. 300 300 400 400 200 100 100 100
 5. 501 502 503 300 300 400 400 200 100 100 100
 6. 501 502 503 300 300 400 400 200 100 100 100 601 602 603

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

     DR    Applied to         Behavior as published           Correct behavior
   LWG 149 C++98      overloads \fB(3)\fP and \fB(4)\fP returned nothing returns an iterator

.SH See also

   emplace    constructs element in-place
   \fI(C++11)\fP    \fI(public member function)\fP 
   push_front inserts an element to the beginning
              \fI(public member function)\fP 
   push_back  adds an element to the end
              \fI(public member function)\fP 
   inserter   creates a std::insert_iterator of type inferred from the argument
              \fI(function template)\fP 
