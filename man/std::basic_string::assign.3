.TH std::basic_string::assign 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_string::assign \- std::basic_string::assign

.SH Synopsis
   basic_string& assign( size_type count, CharT   \fB(1)\fP (constexpr since
   ch );                                              C++20)
   basic_string& assign( const basic_string& str  \fB(2)\fP (constexpr since
   );                                                 C++20)
   basic_string& assign( const basic_string& str,
                         size_type pos, size_type                      \fI(until C++14)\fP
   count );
   basic_string& assign( const basic_string& str,                      \fI(since C++14)\fP
                         size_type pos, size_type                      (constexpr since
   count = npos);                                                      C++20)
   basic_string& assign( basic_string&& str )                          \fI(since C++11)\fP
   noexcept(/* see below */);                         \fB(4)\fP              (constexpr since
                                                                       C++20)
   basic_string& assign( const CharT* s,              \fB(5)\fP              (constexpr since
   size_type count );                                                  C++20)
   basic_string& assign( const CharT* s );            \fB(6)\fP              (constexpr since
                                                                       C++20)
   template< class InputIt >                      \fB(3)\fP                  (constexpr since
   basic_string& assign( InputIt first, InputIt       \fB(7)\fP              C++20)
   last );
   basic_string& assign(                                               \fI(since C++11)\fP
   std::initializer_list<CharT> ilist );              \fB(8)\fP              (constexpr since
                                                                       C++20)
   template< class StringViewLike >                                    \fI(since C++17)\fP
   basic_string& assign( const StringViewLike& t      \fB(9)\fP              (constexpr since
   );                                                                  C++20)
   template< class StringViewLike >
                                                                       \fI(since C++17)\fP
   basic_string& assign( const StringViewLike& t,     \fB(10)\fP             (constexpr since
                                                                       C++20)
                         size_type pos, size_type
   count = npos);

   Replaces the contents of the string.

   1) Replaces the contents with count copies of character ch.
   2) Replaces the contents with a copy of str. Equivalent to *this = str;.
   In particular, allocator propagation may take place.
   \fI(since C++11)\fP
   3) Replaces the contents with a substring [pos, pos + count) of str. If the
   requested substring lasts past the end of the string, or if count == npos, the
   resulting substring is [pos, str.size()). If pos > str.size(), std::out_of_range is
   thrown.
   4) Replaces the contents with those of str using move semantics. Equivalent to *this
   = std::move(str). In particular, allocator propagation may take place.
   5) Replaces the contents with copies of the characters in the range [s, s + count).
   This range can contain null characters.
   6) Replaces the contents with those of null-terminated character string pointed to
   by s. The length of the string is determined by the first null character using
   Traits::length(s).
   7) Replaces the contents with copies of the characters in the range [first, last).
   This overload does not participate in overload resolution if InputIt does not
   satisfy LegacyInputIterator.
   \fI(since C++11)\fP
   8) Replaces the contents with those of the initializer list ilist.
   9) Implicitly converts t to a string view sv as if by std::basic_string_view<CharT,
   Traits> sv = t;, then replaces the contents with those of sv, as if by
   assign(sv.data(), sv.size()).
   This overload participates in overload resolution only if
   std::is_convertible_v<const StringViewLike&,
                         std::basic_string_view<CharT, Traits>> is true and
   std::is_convertible_v<const StringViewLike&, const CharT*> is false.
   10) Implicitly converts t to a string view sv as if by std::basic_string_view<CharT,
   Traits> sv = t;, then replaces the contents with the characters from the subview
   [pos, pos + count) of sv. If the requested subview lasts past the end of sv, or if
   count == npos, the resulting subview is [pos, sv.size()). If pos > sv.size(),
   std::out_of_range is thrown.
   This overload participates in overload resolution only if
   std::is_convertible_v<const StringViewLike&,
                         std::basic_string_view<CharT, Traits>> is true and
   std::is_convertible_v<const StringViewLike&, const CharT*> is false.

.SH Parameters

   count       - size of the resulting string
   pos         - index of the first character to take
   ch          - value to initialize characters of the string with
   first, last - range to copy the characters from
   str         - string to be used as source to initialize the characters with
   s           - pointer to a character string to use as source to initialize the
                 string with
   ilist       - std::initializer_list to initialize the characters of the string with
   t           - object (convertible to std::basic_string_view) to initialize the
                 characters of the string with
.SH Type requirements
   -
   InputIt must meet the requirements of LegacyInputIterator.

.SH Return value

   *this

.SH Complexity

   1) Linear in count.
   2) Linear in size of str.
   3) Linear in count.
   4) Constant. If alloc is given and alloc != other.get_allocator(), then linear.
   5) Linear in count.
   6) Linear in size of s.
   7) Linear in distance between first and last.
   8) Linear in size of ilist.
   9) Linear in size of t.

.SH Exceptions

   4)
   noexcept specification:  
   noexcept(std::allocator_traits<Allocator>::

                propagate_on_container_move_assignment::value ||

            std::allocator_traits<Allocator>::is_always_equal::value)

   If the operation would result in size() > max_size(), throws std::length_error.

   If an exception is thrown for any reason, this function has no effect (strong
   exception safety guarantee).

.SH Example

   
// Run this code

 #include <iostream>
 #include <iterator>
 #include <string>
  
 int main()
 {
     std::string s;
     // assign(size_type count, CharT ch)
     s.assign(4, '=');
     std::cout << s << '\\n'; // "===="
  
     std::string const c("Exemplary");
     // assign(const basic_string& str)
     s.assign(c);
     std::cout << c << " == " << s << '\\n'; // "Exemplary == Exemplary"
  
     // assign(const basic_string& str, size_type pos, size_type count)
     s.assign(c, 0, c.length() - 1);
     std::cout << s << '\\n'; // "Exemplar";
  
     // assign(basic_string&& str)
     s.assign(std::string("C++ by ") + "example");
     std::cout << s << '\\n'; // "C++ by example"
  
     // assign(const CharT* s, size_type count)
     s.assign("C-style string", 7);
     std::cout << s << '\\n'; // "C-style"
  
     // assign(const CharT* s)
     s.assign("C-style\\0string");
     std::cout << s << '\\n'; // "C-style"
  
     char mutable_c_str[] = "C-style string";
     // assign(InputIt first, InputIt last)
     s.assign(std::begin(mutable_c_str), std::end(mutable_c_str) - 1);
     std::cout << s << '\\n'; // "C-style string"
  
     // assign(std::initializer_list<CharT> ilist)
     s.assign({'C', '-', 's', 't', 'y', 'l', 'e'});
     std::cout << s << '\\n'; // "C-style"
 }

.SH Output:

 ====
 Exemplary == Exemplary
 Exemplar
 C++ by example
.SH C-style
.SH C-style
 C-style string
.SH C-style

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to        Behavior as published              Correct behavior
   LWG 847  C++98      there was no exception safety       added strong exception
                       guarantee                           safety guarantee
                       non-normative note stated that swap
   LWG 2063 C++11      is                                  corrected to require move
                       a valid implementation of           assignment
                       move-assign
   LWG 2579 C++11      assign(const basic_string&)         made to propagate allocators
                       did not propagate allocators        if needed
   LWG 2946 C++17      overload \fB(9)\fP caused ambiguity in    avoided by making it a
                       some cases                          template

.SH See also

   assign_range  assign a range of characters to a string
   (C++23)       \fI(public member function)\fP 
   constructor   constructs a basic_string
                 \fI(public member function)\fP 
   operator=     assigns values to the string
                 \fI(public member function)\fP 

.SH Category:
     * conditionally noexcept
