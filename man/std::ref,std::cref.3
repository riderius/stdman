.TH std::ref,std::cref 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ref,std::cref \- std::ref,std::cref

.SH Synopsis
   Defined in header <functional>
   template< class T >                                  (since
   std::reference_wrapper<T> ref( T& t )                C++11)
   noexcept;                                            (until
                                                        C++20)
   template< class T >                                  (since
   constexpr std::reference_wrapper<T> ref( T&          C++20)
   t ) noexcept;
   template< class T >
                                                                (since
   std::reference_wrapper<T>                                    C++11)
                                                                (until
       ref( std::reference_wrapper<T> t )                       C++20)
   noexcept;
   template< class T >

   constexpr std::reference_wrapper<T>                          (since
                                                                C++20)
       ref( std::reference_wrapper<T> t )
   noexcept;
   template< class T >                                  \fB(3)\fP     (since
   void ref( const T&& ) = delete;              \fB(1)\fP             C++11)
   template< class T >                                                  (since
   std::reference_wrapper<const T> cref( const                          C++11)
   T& t ) noexcept;                                                     (until
                                                    \fB(2)\fP                 C++20)
   template< class T >                                                  (since
   constexpr std::reference_wrapper<const T>                            C++20)
   cref( const T& t ) noexcept;
   template< class T >
                                                                                (since
   std::reference_wrapper<const T>                                              C++11)
                                                        \fB(4)\fP                     (until
       cref( std::reference_wrapper<T> t )                                      C++20)
   noexcept;
   template< class T >                                          \fB(5)\fP

   constexpr std::reference_wrapper<const T>                                    (since
                                                                                C++20)
       cref( std::reference_wrapper<T> t )
   noexcept;
   template< class T >                                                  \fB(6)\fP     (since
   void cref( const T&& ) = delete;                                             C++11)

   Function templates ref and cref are helper functions that generate an object of type
   std::reference_wrapper, using template argument deduction to determine the template
   argument of the result.

   T may be an incomplete type. \fI(since C++20)\fP

.SH Parameters

   t - lvalue reference to object that needs to be wrapped or an instance of
       std::reference_wrapper

.SH Return value

   1) std::reference_wrapper<T>(t)
   2) t
   4) std::reference_wrapper<const T>(t)
   5) t
   3,6) rvalue reference wrapper is deleted.

.SH Example

   
// Run this code

 #include <functional>
 #include <iostream>
  
 void f(int& n1, int& n2, const int& n3)
 {
     std::cout << "In function: " << n1 << ' ' << n2 << ' ' << n3 << '\\n';
     ++n1; // increments the copy of n1 stored in the function object
     ++n2; // increments the main()'s n2
     // ++n3; // compile error
 }
  
 int main()
 {
     int n1 = 1, n2 = 2, n3 = 3;
     std::function<void()> bound_f = std::bind(f, n1, std::ref(n2), std::cref(n3));
     n1 = 10;
     n2 = 11;
     n3 = 12;
     std::cout << "Before function: " << n1 << ' ' << n2 << ' ' << n3 << '\\n';
     bound_f();
     std::cout << "After function: " << n1 << ' ' << n2 << ' ' << n3 << '\\n';
 }

.SH Output:

 Before function: 10 11 12
 In function: 1 11 12
 After function: 10 12 12

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to            Behavior as published            Correct behavior
   LWG 3146 C++11      unwrapping overloads sometimes led to error made always valid

.SH See also

   reference_wrapper CopyConstructible and CopyAssignable reference wrapper
   \fI(C++11)\fP           \fI(class template)\fP 
