.TH std::stacktrace_entry 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::stacktrace_entry \- std::stacktrace_entry

.SH Synopsis
   Defined in header <stacktrace>
   class stacktrace_entry;         (since C++23)

   The stacktrace_entry class provides operations for querying information about an
   evaluation in a stacktrace. Each stacktrace_entry object is either empty, or
   represents an evaluation in a stacktrace.

   stacktrace_entry models std::regular and
   std::three_way_comparable<std::strong_ordering>.

.SH Member types

   native_handle_type(C++23) implementation-defined native handle type

.SH Member functions

   constructor   constructs a new stacktrace_entry
   (C++23)       \fI(public member function)\fP 
   destructor    destroys the stacktrace_entry
   (C++23)       \fI(public member function)\fP
   operator=     assigns the contents of one stacktrace_entry to another
   (C++23)       \fI(public member function)\fP
.SH Observers
   native_handle gets the implementation-defined native handle of the stacktrace_entry
   (C++23)       \fI(public member function)\fP
   operator bool checks whether the stacktrace_entry is empty
   (C++23)       \fI(public member function)\fP
         Query
   description   gets the description of the evaluation represented by the
   (C++23)       stacktrace_entry
                 \fI(public member function)\fP
                 gets the name of the source file that lexically contains the
   source_file   expression or statement whose evaluation is represented by the
   (C++23)       stacktrace_entry
                 \fI(public member function)\fP 
   source_line   gets the line number that lexically relates the evaluation represented
   (C++23)       by the stacktrace_entry
                 \fI(public member function)\fP 

.SH Non-member functions

   operator==  compares two stacktrace_entry values
   operator<=> \fI(function)\fP
   (C++23)
   to_string   returns a string with a description of the stacktrace_entry
   (C++23)     \fI(function)\fP 
   operator<<  performs stream output of stacktrace_entry
   (C++23)     \fI(function template)\fP 

.SH Helper classes

   std::hash<std::stacktrace_entry>      hash support for std::stacktrace_entry
   (C++23)                               \fI(class template specialization)\fP 
   std::formatter<std::stacktrace_entry> formatting support for stacktrace_entry
   (C++23)                               \fI(class template specialization)\fP 

.SH Notes

   boost::stacktrace::frame (available in Boost.Stacktrace) can be used instead when
   std::stacktrace_entry is not available.

    Feature-test macro   Value    Std        Feature
   __cpp_lib_stacktrace 202011L (C++23) Stacktrace library

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   basic_stacktrace approximate representation of an invocation sequence consists of
   (C++23)          stacktrace entries
                    \fI(class template)\fP 
   source_location  a class representing information about the source code, such as
   (C++20)          file names, line numbers, and function names
                    \fI(class)\fP 

.SH Category:
     * Todo no example
