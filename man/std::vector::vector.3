.TH std::vector::vector 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::vector::vector \- std::vector::vector

.SH Synopsis
   vector();                                (until
                                            C++17)
                                            (since
   vector()                                 C++17)
   noexcept(noexcept(Allocator()));         (constexpr
                                            since
                                            C++20)
   explicit vector( const                              (until
   Allocator& alloc );                                 C++17)
                                                       (since
   explicit vector( const                              C++17)
   Allocator& alloc ) noexcept;                        (constexpr
                                                       since
                                                       C++20)
   explicit vector( size_type
   count,

                    const T& value                                (until
   = T(),                                                         C++11)

                    const
   Allocator& alloc = Allocator()
   );
   vector( size_type count,                                       (since
                                                                  C++11)
           const T& value,                                        (constexpr
                                                                  since
           const Allocator& alloc =                               C++20)
   Allocator() );
                                                                             (since
   explicit vector( size_type count                                          C++11)
   );                                                                        (until
                                                                             C++14)
   explicit vector( size_type
   count,                                                                    (since
                    const                                                    C++14)
   Allocator& alloc = Allocator()
   );
   template< class InputIt >

   vector( InputIt first, InputIt   \fB(1)\fP                                      (constexpr
   last,                                                          \fB(5)\fP        since
                                                                             C++20)
           const Allocator& alloc =     \fB(2)\fP
   Allocator() );
                                                                             (constexpr
   vector( const vector& other );                                 \fB(6)\fP        since
                                            \fB(3)\fP                              C++20)
                                                                             (since
   vector( const vector& other,                                              C++11)
   const Allocator& alloc );                                      \fB(7)\fP        (constexpr
                                                                             since
                                                                             C++20)
                                                                             (since
                                                       \fB(4)\fP                   C++11)
                                                                             (noexcept
   vector( vector&& other );                                      \fB(8)\fP        since
                                                                             C++17)
                                                                             (constexpr
                                                                             since
                                                                             C++20)
                                                                             (since
   vector( vector&& other, const                                             C++11)
   Allocator& alloc );                                            \fB(9)\fP        (constexpr
                                                                             since
                                                                             C++20)
   vector( std::initializer_list<T>                                          (since
   init,                                                                     C++11)
           const Allocator& alloc =                               \fB(10)\fP       (constexpr
   Allocator() );                                                            since
                                                                             C++20)
   template<
   container-compatible-range<T> R
   >

   constexpr vector(                                              \fB(11)\fP       (since
   std::from_range_t, R&& rg,                                                C++23)

                     const
   Allocator& alloc = Allocator()
   );

   Constructs a new container from a variety of data sources, optionally using a user
   supplied allocator alloc.

   1) Default constructor. Constructs an empty container with a default-constructed
   allocator.
   2) Constructs an empty container with the given allocator alloc.
   3) Constructs the container with count copies of elements with value value.
   4) Constructs the container with count default-inserted instances of T. No copies
   are made.
   5) Constructs the container with the contents of the range [first, last).

   This constructor has the same effect as
   vector(static_cast<size_type>(first), static_cast<value_type>(last),   \fI(until C++11)\fP
   a) if InputIt is an integral type.
   This overload participates in overload resolution only if InputIt
   satisfies LegacyInputIterator, to avoid ambiguity with the overload    \fI(since C++11)\fP
   \fB(3)\fP.

   6) Copy constructor. Constructs the container with the copy of the contents of
   other.

   The allocator is obtained as if by calling                                    (since
   std::allocator_traits<allocator_type>::select_on_container_copy_construction( C++11)
       other.get_allocator()).

   7) Constructs the container with the copy of the contents of other, using alloc as
   the allocator.

   During class template argument deduction, only the first argument
   contributes to the deduction of the container's Allocator template     (since C++23)
   parameter.

   8) Move constructor. Constructs the container with the contents of other using move
   semantics. Allocator is obtained by move-construction from the allocator belonging
   to other. After the move, other is guaranteed to be empty().
   9) Allocator-extended move constructor. Using alloc as the allocator for the new
   container, moving the contents from other; if alloc != other.get_allocator(), this
   results in an element-wise move. (In that case, other is not guaranteed to be empty
   after the move.)

   During class template argument deduction, only the first argument
   contributes to the deduction of the container's Allocator template     (since C++23)
   parameter.

   10) Constructs the container with the contents of the initializer list init.
   11) Constructs the container with the contents of the range rg.

.SH Parameters

   alloc       - allocator to use for all memory allocations of this container
   count       - the size of the container
   value       - the value to initialize elements of the container with
   first, last - the range [first, last) to copy the elements from
   other       - another container to be used as source to initialize the elements of
                 the container with
   init        - initializer list to initialize the elements of the container with
   rg          - a container compatible range, that is, an input_range whose elements
                 are convertible to T

.SH Complexity

   1,2) Constant.
   3,4) Linear in count.
   5) Given the distance between first and last as N,
     * If first and last are both forward, bidirectional or random-access iterators,

     * The copy constructor of T is only called N  times, and
     * No reallocation occurs.
     * Otherwise (first and last are just input iterators),

     * The copy constructor of T is called O(N) times, and
     * Reallocation occurs O(log N) times.
   6,7) Linear in size of other.
   8) Constant.
   9) Linear if alloc != other.get_allocator(), otherwise constant.
   10) Linear in size of init.
   11) Given ranges::distance(rg) as N,
     * If R models ranges::forward_range or ranges::sized_range,

     * Initializes exactly N elements from the result of dereferencing successive
       iterators of rg, and
     * No reallocation occurs.
     * Otherwise (R models input range),

     * The copy or move constructor of T is called O(N) times, and
     * Reallocation occurs O(log N) times.

.SH Exceptions

   Calls to Allocator::allocate may throw.

.SH Notes

   After container move construction (overload \fB(8)\fP), references, pointers, and
   iterators (other than the end iterator) to other remain valid, but refer to elements
   that are now in *this. The current standard makes this guarantee via the blanket
   statement in [container.reqmts]/67, and a more direct guarantee is under
   consideration via LWG issue 2321.

   The overload \fB(4)\fP zeroes out elements of non-class types such as int, which is
   different from the behavior of new[], which leaves them uninitialized. To match the
   behavior of new[], a custom Allocator::construct can be provided which leaves such
   elements uninitialized.

   Note that the presence of list-initializing constructor \fB(10)\fP means list
   initialization and direct initialization do different things:

 std::vector<int> b{3}; // creates a 1-element vector holding {3}
 std::vector<int> d\fB(3)\fP; // creates a 3-element vector holding {0, 0, 0}
  
 std::vector<int> p{1, 2}; // creates a 2-element vector holding {1, 2}
 std::vector<int> q(1, 2); // creates a 1-element vector holding {2}

       Feature-test macro       Value    Std                   Feature
   __cpp_lib_containers_ranges 202202L (C++23) Ranges-aware construction and insertion;
                                               overload \fB(11)\fP

.SH Example

   
// Run this code

 #include <iostream>
 #include <string>
 #include <vector>
  
 template<typename T>
 std::ostream& operator<<(std::ostream& s, const std::vector<T>& v)
 {
     s.put('{');
     for (char comma[]{'\\0', ' ', '\\0'}; const auto& e : v)
         s << comma << e, comma[0] = ',';
     return s << "}\\n";
 }
  
 int main()
 {
     // C++11 initializer list syntax:
     std::vector<std::string> words1{"the", "frogurt", "is", "also", "cursed"};
     std::cout << "1: " << words1;
  
     // words2 == words1
     std::vector<std::string> words2(words1.begin(), words1.end());
     std::cout << "2: " << words2;
  
     // words3 == words1
     std::vector<std::string> words3(words1);
     std::cout << "3: " << words3;
  
     // words4 is {"Mo", "Mo", "Mo", "Mo", "Mo"}
     std::vector<std::string> words4(5, "Mo");
     std::cout << "4: " << words4;
  
     auto const rg = {"cat", "cow", "crow"};
 #ifdef __cpp_lib_containers_ranges
     std::vector<std::string> words5(std::from_range, rg); // overload (11)
 #else
     std::vector<std::string> words5(rg.begin(), rg.end()); // overload (5)
 #endif
     std::cout << "5: " << words5;
 }

.SH Output:

 1: {the, frogurt, is, also, cursed}
 2: {the, frogurt, is, also, cursed}
 3: {the, frogurt, is, also, cursed}
 4: {Mo, Mo, Mo, Mo, Mo}
 5: {cat, cow, crow}

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to         Behavior as published              Correct behavior
                       overload \fB(5)\fP allowed up to 2N  copy
   LWG 134  C++98      constructor calls in the input        changed to O(N) calls
                       iterator case
   LWG 868  C++98      for overload \fB(4)\fP, the elements in the they are value-initialized
                       container were default constructed
   LWG 2193 C++11      the default constructor is explicit   made non-explicit

.SH See also

   assign    assigns values to the container
             \fI(public member function)\fP 
   operator= assigns values to the container
             \fI(public member function)\fP 
