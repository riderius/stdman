.TH std::hermite,std::hermitef,std::hermitel 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::hermite,std::hermitef,std::hermitel \- std::hermite,std::hermitef,std::hermitel

.SH Synopsis
   double      hermite( unsigned int n, double x );

   double      hermite( unsigned int n, float x );
   double      hermite( unsigned int n, long double x );  \fB(1)\fP
   float       hermitef( unsigned int n, float x );

   long double hermitel( unsigned int n, long double x );
   double      hermite( unsigned int n, IntegralType x ); \fB(2)\fP

   1) Computes the (physicist's) Hermite polynomials of the degree n and argument x.
   2) A set of overloads or a function template accepting an argument of any integral
   type. Equivalent to \fB(1)\fP after casting the argument to double.

   As all special functions, hermite is only guaranteed to be available in <cmath> if
   __STDCPP_MATH_SPEC_FUNCS__ is defined by the implementation to a value at least
   201003L and if the user defines __STDCPP_WANT_MATH_SPEC_FUNCS__ before including any
   standard library headers.

.SH Parameters

   n - the degree of the polynomial
   x - the argument, a value of a floating-point or integral type

.SH Return value

   If no errors occur, value of the order-nHermite polynomial of x, that is (-1)n
   e^x2

   dn
   dxn

   e^-x2
   , is returned.

.SH Error handling

   Errors may be reported as specified in math_errhandling.

     * If the argument is NaN, NaN is returned and domain error is not reported.
     * If n is greater or equal than 128, the behavior is implementation-defined.

.SH Notes

   Implementations that do not support TR 29124 but support TR 19768, provide this
   function in the header tr1/cmath and namespace std::tr1.

   An implementation of this function is also available in boost.math.

   The Hermite polynomials are the polynomial solutions of the equation u,,
   - 2xu,
   = -2nu.

   The first few are:

     * hermite(0, x) = 1.
     * hermite(1, x) = 2x.
     * hermite(2, x) = 4x2
       - 2.
     * hermite(3, x) = 8x3
       - 12x.
     * hermite(4, x) = 16x4
       - 48x2
       + 12.

.SH Example

   (works as shown with gcc 6.0)

   
// Run this code

 #define __STDCPP_WANT_MATH_SPEC_FUNCS__ 1
 #include <cmath>
 #include <iostream>
  
 double H3(double x)
 {
     return 8 * std::pow(x, 3) - 12 * x;
 }
  
 double H4(double x)
 {
     return 16 * std::pow(x, 4) - 48 * x * x + 12;
 }
  
 int main()
 {
     // spot-checks
     std::cout << std::hermite(3, 10) << '=' << H3(10) << '\\n'
               << std::hermite(4, 10) << '=' << H4(10) << '\\n';
 }

.SH Output:

 7880=7880
 155212=155212

.SH See also

   laguerre  Laguerre polynomials
   laguerref \fI(function)\fP 
   laguerrel
   legendre  Legendre polynomials
   legendref \fI(function)\fP 
   legendrel

.SH External links

   Weisstein, Eric W. ""Hermite Polynomial." From MathWorld--A Wolfram Web Resource.
