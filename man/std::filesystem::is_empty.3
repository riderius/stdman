.TH std::filesystem::is_empty 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::filesystem::is_empty \- std::filesystem::is_empty

.SH Synopsis
   Defined in header <filesystem>
   bool is_empty( const std::filesystem::path& p );                   \fB(1)\fP \fI(since C++17)\fP
   bool is_empty( const std::filesystem::path& p, std::error_code& ec \fB(2)\fP \fI(since C++17)\fP
   );

   Checks whether the given path refers to an empty file or directory.

.SH Parameters

   p  - path to examine
   ec - error code to modify in case of error

.SH Return value

   true if the path indicated by p refers to an empty file or directory, false
   otherwise. The non-throwing overload returns false if an error occurs.

.SH Exceptions

   Any overload not marked noexcept may throw std::bad_alloc if memory allocation
   fails.

   1) Throws std::filesystem::filesystem_error on underlying OS API errors, constructed
   with p as the first path argument and the OS error code as the error code argument.
   2) Sets a std::error_code& parameter to the OS API error code if an OS API call
   fails, and executes ec.clear() if no errors occur.

.SH Example

   
// Run this code

 #include <cstdio>
 #include <filesystem>
 #include <fstream>
 #include <iostream>
  
 int main()
 {
     namespace fs = std::filesystem;
  
     const fs::path tmp_dir{fs::temp_directory_path()};
     std::cout << std::boolalpha
               << "Temp dir: " << tmp_dir << '\\n'
               << "is_empty(): " << fs::is_empty(tmp_dir) << '\\n';
  
     const fs::path tmp_name{tmp_dir / std::tmpnam(nullptr)};
     std::cout << "Temp file: " << tmp_name << '\\n';
  
     std::ofstream file{tmp_name.string()};
     std::cout << "is_empty(): " << fs::is_empty(tmp_name) << '\\n';
     file << "cppreference.com";
     file.flush();
     std::cout << "is_empty(): " << fs::is_empty(tmp_name) << '\\n'
               << "file_size(): " << fs::file_size(tmp_name) << '\\n';
     file.close();
     fs::remove(tmp_name);
 }

.SH Possible output:

 Temp dir: "/tmp"
 is_empty(): false
 Temp file: "/tmp/fileCqd9DM"
 is_empty(): true
 is_empty(): false
 file_size(): 16

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to              Behavior as published              Correct behavior
   LWG 3013 C++17      error_code overload marked noexcept but can     noexcept removed
                       allocate memory

.SH See also

   status         determines file attributes
   symlink_status determines file attributes, checking the symlink target
   \fI(C++17)\fP        \fI(function)\fP 
   \fI(C++17)\fP
   exists         checks whether path refers to existing file system object
   \fI(C++17)\fP        \fI(function)\fP 
