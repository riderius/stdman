.TH std::generate_n 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::generate_n \- std::generate_n

.SH Synopsis
   Defined in header <algorithm>
   template< class OutputIt, class Size, class Generator >
   OutputIt generate_n( OutputIt first, Size count,         \fB(1)\fP (constexpr since C++20)
   Generator g );
   template< class ExecutionPolicy,

             class ForwardIt, class Size, class Generator >
   ForwardIt generate_n( ExecutionPolicy&& policy,          \fB(2)\fP \fI(since C++17)\fP

                         ForwardIt first, Size count,
   Generator g );

   1) Assigns values, generated by given function object g, to the first count elements
   in the range beginning at first, if count > 0. Does nothing otherwise.
   2) Same as \fB(1)\fP, but executed according to policy.
   This overload participates in overload resolution only if

   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true.        (until
                                                                             C++20)
   std::is_execution_policy_v<std::remove_cvref_t<ExecutionPolicy>> is true. (since
                                                                             C++20)

   If Size is not convertible to an integral type, the program is ill-formed.

.SH Parameters

   first   - the beginning of the range of elements to generate
   count   - number of the elements to generate
   policy  - the execution policy to use. See execution policy for details.
             generator function object that will be called.

             The signature of the function should be equivalent to the following:
   g       -
             Ret fun();

             The type Ret must be such that an object of type OutputIt can be
             dereferenced and assigned a value of type Ret.
.SH Type requirements
   -
   OutputIt must meet the requirements of LegacyOutputIterator.
   -
   ForwardIt must meet the requirements of LegacyForwardIterator.

.SH Return value

   Iterator one past the last element assigned if count > 0, first otherwise.

.SH Complexity

   Exactly std::max(0, count) invocations of g() and assignments.

.SH Exceptions

   The overload with a template parameter named ExecutionPolicy reports errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the standard policies, std::terminate is called.
       For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Possible implementation

   template<class OutputIt, class Size, class Generator>
   constexpr // since C++20
   OutputIt generate_n(OutputIt first, Size count, Generator g)
   {
       for (Size i = 0; i < count; ++i, ++first)
           *first = g();
    
       return first;
   }

.SH Example

   
// Run this code

 #include <algorithm>
 #include <functional>
 #include <iostream>
 #include <iterator>
 #include <random>
  
 int main()
 {
     std::mt19937 rng; // default constructed, seeded with fixed seed
     std::generate_n(std::ostream_iterator<std::mt19937::result_type>(std::cout, " "),
                     5, std::ref(rng));
     std::cout << '\\n';
 }

.SH Output:

 3499211612 581869302 3890346734 3586334585 545404204

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

     DR    Applied to          Behavior as published              Correct behavior
                      the complexity requirement was “exactly no invocation or
   LWG 426 C++98      count invocations                       assignment
                      or assignments”, which is broken if     if count is non-positive
                      count is negative
                      the location of the first element
   LWG 865 C++98      following                               returned
                      the generation range was not returned

.SH See also

   fill_n             copy-assigns the given value to N elements in a range
                      \fI(function template)\fP 
                      assigns the results of successive function calls to every element
   generate           in a range
                      \fI(function template)\fP 
   ranges::generate_n saves the result of N applications of a function
   (C++20)            (niebloid)
