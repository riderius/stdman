.TH std::unordered_map::unordered_map 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::unordered_map::unordered_map \- std::unordered_map::unordered_map

.SH Synopsis
   unordered_map()                                                        \fI(since C++11)\fP
       : unordered_map(size_type(/* implementation-defined */))           \fI(until C++20)\fP
   {}
   unordered_map();                                                       \fI(since C++20)\fP
   explicit unordered_map( size_type bucket_count,

                           const Hash& hash = Hash(),
                           const key_equal& equal = key_equal(),     \fB(2)\fP  \fI(since C++11)\fP

                           const Allocator& alloc = Allocator()
   );
   unordered_map( size_type bucket_count,

                  const Allocator& alloc )                           \fB(3)\fP  \fI(since C++14)\fP

       : unordered_map(bucket_count, Hash(), key_equal(), alloc)
   {}
   unordered_map( size_type bucket_count,

                  const Hash& hash,
                  const Allocator& alloc )                           \fB(4)\fP  \fI(since C++14)\fP

       : unordered_map(bucket_count, hash, key_equal(), alloc)
   {}
   explicit unordered_map( const Allocator& alloc );                 \fB(5)\fP  \fI(since C++11)\fP
   template< class InputIt >

   unordered_map( InputIt first, InputIt last,
                  size_type bucket_count = /*
   implementation-defined */,                                        \fB(6)\fP  \fI(since C++11)\fP
                  const Hash& hash = Hash(),
                  const key_equal& equal = key_equal(),

                  const Allocator& alloc = Allocator() );
   template< class InputIt >

   unordered_map( InputIt first, InputIt last,
                  size_type bucket_count,
                  const Allocator& alloc )                           \fB(7)\fP  \fI(since C++14)\fP
       : unordered_map(first, last,

                       bucket_count, Hash(), key_equal(), alloc)
   {}
   template< class InputIt >

   unordered_map( InputIt first, InputIt last,
                  size_type bucket_count,
                  const Hash& hash,                                  \fB(8)\fP  \fI(since C++14)\fP
                  const Allocator& alloc )
       : unordered_map(first, last,

                       bucket_count, hash, key_equal(), alloc)
   {}
   unordered_map( const unordered_map& other );                      \fB(9)\fP  \fI(since C++11)\fP
   unordered_map( const unordered_map& other, const Allocator&   \fB(1)\fP \fB(10)\fP \fI(since C++11)\fP
   alloc );
   unordered_map( unordered_map&& other );                           \fB(11)\fP \fI(since C++11)\fP
   unordered_map( unordered_map&& other, const Allocator& alloc      \fB(12)\fP \fI(since C++11)\fP
   );
   unordered_map( std::initializer_list<value_type> init,

                  size_type bucket_count = /*
   implementation-defined */,                                        \fB(13)\fP \fI(since C++11)\fP
                  const Hash& hash = Hash(),
                  const key_equal& equal = key_equal(),

                  const Allocator& alloc = Allocator() );
   unordered_map( std::initializer_list<value_type> init,

                  size_type bucket_count,
                  const Allocator& alloc )                           \fB(14)\fP \fI(since C++14)\fP
       : unordered_map(init, bucket_count,

                       Hash(), key_equal(), alloc) {}
   unordered_map( std::initializer_list<value_type> init,

                  size_type bucket_count,
                  const Hash& hash,                                  \fB(15)\fP \fI(since C++14)\fP
                  const Allocator& alloc )
       : unordered_map(init, bucket_count,

                       hash, key_equal(), alloc) {}
   template< container-compatible-range<value_type> R >

   unordered_map( std::from_range_t, R&& rg,
                  size_type bucket_count = /* see description
   */,                                                               \fB(16)\fP (since C++23)
                  const Hash& hash = Hash(),
                  const key_equal& equal = key_equal(),

                  const Allocator& alloc = Allocator() );
   template< container-compatible-range<value_type> R >

   unordered_map( std::from_range_t, R&& rg,
                  size_type bucket_count,
                  const Allocator& alloc )                           \fB(17)\fP (since C++23)
       : unordered_map(std::from_range, std::forward<R>(rg),

                       bucket_count, Hash(), key_equal(), alloc)
   {}
   template< container-compatible-range<value_type> R >

   unordered_map( std::from_range_t, R&& rg,
                  size_type bucket_count,
                  const Hash& hash,                                  \fB(18)\fP (since C++23)
                  const Alloc& alloc )
       : unordered_map(std::from_range, std::forward<R>(rg),

                       bucket_count, hash, key_equal(), alloc)
   {}

   Constructs new container from a variety of data sources. Optionally uses user
   supplied bucket_count as a minimal number of buckets to create, hash as the hash
   function, equal as the function to compare keys and alloc as the allocator.

   1-5) Constructs empty container. Sets max_load_factor() to 1.0. For the default
   constructor, the number of buckets is implementation-defined.
   6-8) Constructs the container with the contents of the range [first, last). Sets
   max_load_factor() to 1.0. If multiple elements in the range have keys that compare
   equivalent, it is unspecified which element is inserted (pending LWG2844).
   9,10) Copy constructor. Constructs the container with the copy of the contents of
   other, copies the load factor, the predicate, and the hash function as well. If
   alloc is not provided, allocator is obtained by calling
   std::allocator_traits<allocator_type>::select_on_container_copy_construction(other.get_allocator()).

   The template parameter Allocator is only deduced from the first        (since C++23)
   argument while used in class template argument deduction.

   11,12) Move constructor. Constructs the container with the contents of other using
   move semantics. If alloc is not provided, allocator is obtained by move-construction
   from the allocator belonging to other.

   The template parameter Allocator is only deduced from the first        (since C++23)
   argument while used in class template argument deduction.

   13-15) Initializer-list constructor. Constructs the container with the contents of
   the initializer list init, same as unordered_map(init.begin(), init.end()).
   16-18) Constructs the container with the contents of rg. If multiple elements in the
   range have keys that compare equivalent, it is unspecified which element is inserted
   (pending LWG2844).

.SH Parameters

   alloc        - allocator to use for all memory allocations of this container
   bucket_count - minimal number of buckets to use on initialization. If it is not
                  specified, implementation-defined default value is used
   hash         - hash function to use
   equal        - comparison function to use for all key comparisons of this container
   first, last  - the range [first, last) to copy the elements from
   rg           - a container compatible range, that is, an input_range whose elements
                  are convertible to value_type
   other        - another container to be used as source to initialize the elements of
                  the container with
   init         - initializer list to initialize the elements of the container with
.SH Type requirements
   -
   InputIt must meet the requirements of LegacyInputIterator.

.SH Complexity

   1-5) Constant.
   6-8) Average case linear (i.e. O(N), where N is std::distance(first, last)), worst
   case quadratic, i.e. O(N^2).
   9,10) Linear in size of other.
   11,12) Constant. If alloc is given and alloc != other.get_allocator(), then linear.
   13-15) Average case O(N) (N is std::size(init)), worst case O(N^2).
   16-18) Average case O(N) (N is ranges::distance(rg)), worst case O(N^2).

.SH Exceptions

   Calls to Allocator::allocate may throw.

.SH Notes

   
   After container move construction (overload \fB(4)\fP), references, pointers, and
   iterators (other than the end iterator) to other remain valid, but refer to elements
   that are now in *this. The current standard makes this guarantee via the blanket
   statement in [container.reqmts]/67, and a more direct guarantee is under
   consideration via LWG issue 2321.

   Although not formally required until C++23, some implementations have already put
   the template parameter Allocator into non-deduced contexts in earlier modes.

       Feature-test macro       Value    Std                   Feature
   __cpp_lib_containers_ranges 202202L (C++23) Ranges-aware construction and insertion;
                                               overloads (16-18)

.SH Example

   
// Run this code

 #include <bitset>
 #include <string>
 #include <unordered_map>
 #include <utility>
 #include <vector>
  
 struct Key
 {
     std::string first;
     std::string second;
 };
  
 struct KeyHash
 {
     std::size_t operator()(const Key& k) const
     {
         return std::hash<std::string>()(k.first) ^
             (std::hash<std::string>()(k.second) << 1);
     }
 };
  
 struct KeyEqual
 {
     bool operator()(const Key& lhs, const Key& rhs) const
     {
         return lhs.first == rhs.first && lhs.second == rhs.second;
     }
 };
  
 struct Foo
 {
     Foo(int val_) : val(val_) {}
     int val;
     bool operator==(const Foo &rhs) const { return val == rhs.val; }
 };
  
 template<> struct std::hash<Foo>
 {
     std::size_t operator()(const Foo &f) const
     {
         return std::hash<int>{}(f.val);
     }
 };
  
 int main()
 {
     // default constructor: empty map
     std::unordered_map<std::string, std::string> m1;
  
     // list constructor
     std::unordered_map<int, std::string> m2 =
     {
         {1, "foo"},
         {3, "bar"},
         {2, "baz"}
     };
  
     // copy constructor
     std::unordered_map<int, std::string> m3 = m2;
  
     // move constructor
     std::unordered_map<int, std::string> m4 = std::move(m2);
  
     // range constructor
     std::vector<std::pair<std::bitset<8>, int>> v = {{0x12, 1}, {0x01,-1}};
     std::unordered_map<std::bitset<8>, double> m5(v.begin(), v.end());
  
     // Option 1 for a constructor with a custom Key type
     // Define the KeyHash and KeyEqual structs and use them in the template
     std::unordered_map<Key, std::string, KeyHash, KeyEqual> m6 =
     {
         {{"John", "Doe"}, "example"},
         {{"Mary", "Sue"}, "another"}
     };
  
     // Option 2 for a constructor with a custom Key type.
     // Define a const == operator for the class/struct and specialize std::hash
     // structure in the std namespace
     std::unordered_map<Foo, std::string> m7 =
     {
         {Foo(1), "One"}, {2, "Two"}, {3, "Three"}
     };
  
     // Option 3: Use lambdas
     // Note that the initial bucket count has to be passed to the constructor
     struct Goo { int val; };
     auto hash = [](const Goo &g){ return std::hash<int>{}(g.val); };
     auto comp = [](const Goo &l, const Goo &r){ return l.val == r.val; };
     std::unordered_map<Goo, double, decltype(hash), decltype(comp)> m8(10, hash, comp);
 }

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to          Behavior as published           Correct behavior
   LWG 2193 C++11      the default constructor (1) was explicit made non-explicit

.SH See also

   operator= assigns values to the container
             \fI(public member function)\fP 
