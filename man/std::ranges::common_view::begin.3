.TH std::ranges::common_view::begin 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::common_view::begin \- std::ranges::common_view::begin

.SH Synopsis
   constexpr auto begin() requires (!__simple_view<V>);  \fB(1)\fP \fI(since C++20)\fP
   constexpr auto begin() const requires range<const V>; \fB(2)\fP \fI(since C++20)\fP

   1) Returns an iterator to the first element of the common_view, that is:
     * ranges::begin(base_), if both ranges::random_access_range<V> and
       ranges::sized_range<V> are satisfied,
     * std::common_iterator<ranges::iterator_t<V>,
       ranges::sentinel_t<V>>(ranges::begin(base_)) otherwise.
   Here base_ (the name is for exposition only purposes) is the underlying view.
   2) Same as \fB(1)\fP, but V is const-qualified.

.SH Parameters

   \fI(none)\fP

.SH Return value

   An iterator to the beginning of the underlying view.

.SH Example

   
// Run this code

 #include <iostream>
 #include <numeric>
 #include <ranges>
 #include <string_view>
  
 int main()
 {
     constexpr auto common = std::views::iota(1)
                           | std::views::take(3)
                           | std::views::common
                           ;
  
     for (int i{}; int e : common)
         std::cout << (i++ ? " + " : "") << e;
  
     std::cout << " = " << std::accumulate(common.begin(), common.end(), 0) << '\\n';
 }

.SH Output:

 1 + 2 + 3 = 6

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to            Behavior as published            Correct behavior
   LWG 4012 C++20      non-const overload missed simple-view check added

.SH See also

   end           returns an iterator to the end
   (C++20)       \fI(public member function)\fP 
   ranges::begin returns an iterator to the beginning of a range
   (C++20)       (customization point object)
   ranges::end   returns a sentinel indicating the end of a range
   (C++20)       (customization point object)
