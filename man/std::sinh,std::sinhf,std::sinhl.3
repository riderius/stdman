.TH std::sinh,std::sinhf,std::sinhl 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::sinh,std::sinhf,std::sinhl \- std::sinh,std::sinhf,std::sinhl

.SH Synopsis
   Defined in header <cmath>
   float       sinh ( float num );

   double      sinh ( double num );                            (until C++23)

   long double sinh ( long double num );
   /* floating-point-type */                                   (since C++23)
               sinh ( /* floating-point-type */ num );         (constexpr since C++26)
   float       sinhf( float num );                     \fB(1)\fP \fB(2)\fP \fI(since C++11)\fP
                                                               (constexpr since C++26)
   long double sinhl( long double num );                   \fB(3)\fP \fI(since C++11)\fP
                                                               (constexpr since C++26)
   Additional overloads \fI(since C++11)\fP
   Defined in header <cmath>
   template< class Integer >                               (A) (constexpr since C++26)
   double      sinh ( Integer num );

   1-3) Computes the hyperbolic sine of num.
   The library provides overloads of std::sinh for all cv-unqualified floating-point
   types as the type of the parameter.
   (since C++23)

   A) Additional overloads are provided for all integer types, which are  \fI(since C++11)\fP
   treated as double.

.SH Parameters

   num - floating-point or integer value

.SH Return value

   If no errors occur, the hyperbolic sine of num (sinh(num), or

   enum
   -e-num
   2

   ) is returned.

   If a range error due to overflow occurs, ±HUGE_VAL, ±HUGE_VALF, or ±HUGE_VALL is
   returned.

   If a range error occurs due to underflow, the correct result (after rounding) is
   returned.

.SH Error handling

   Errors are reported as specified in math_errhandling.

   If the implementation supports IEEE floating-point arithmetic (IEC 60559),

     * if the argument is ±0 or ±∞, it is returned unmodified.
     * if the argument is NaN, NaN is returned.

.SH Notes

   POSIX specifies that in case of underflow, num is returned unmodified, and if that
   is not supported, and implementation-defined value no greater than DBL_MIN, FLT_MIN,
   and LDBL_MIN is returned.

   The additional overloads are not required to be provided exactly as (A). They only
   need to be sufficient to ensure that for their argument num of integer type,
   std::sinh(num) has the same effect as std::sinh(static_cast<double>(num)).

.SH Example

   
// Run this code

 #include <cerrno>
 #include <cfenv>
 #include <cmath>
 #include <cstring>
 #include <iostream>
 // #pragma STDC FENV_ACCESS ON
  
 int main()
 {
     const double x = 42;
  
     std::cout << "sinh(1) = " << std::sinh(1) << '\\n'
               << "sinh(-1) = " << std::sinh(-1) << '\\n'
               << "log(sinh(" << x << ")+cosh(" << x << ")) = "
               << std::log(std::sinh(x) + std::cosh(x)) << '\\n';
  
     // special values
     std::cout << "sinh(+0) = " << std::sinh(0.0) << '\\n'
               << "sinh(-0) = " << std::sinh(-0.0) << '\\n';
  
     // error handling
     errno = 0;
     std::feclearexcept(FE_ALL_EXCEPT);
  
     std::cout << "sinh(710.5) = " << std::sinh(710.5) << '\\n';
  
     if (errno == ERANGE)
         std::cout << "    errno == ERANGE: " << std::strerror(errno) << '\\n';
     if (std::fetestexcept(FE_OVERFLOW))
         std::cout << "    FE_OVERFLOW raised\\n";
 }

.SH Output:

 sinh\fB(1)\fP = 1.1752
 sinh(-1) = -1.1752
 log(sinh\fB(42)\fP+cosh(42)) = 42
 sinh(+0) = 0
 sinh(-0) = -0
 sinh(710.5) = inf
     errno == ERANGE: Numerical result out of range
     FE_OVERFLOW raised

.SH See also

   cosh
   coshf               computes hyperbolic cosine (\\({\\small\\cosh{x}}\\)cosh(x))
   coshl               \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   tanh
   tanhf               computes hyperbolic tangent (\\({\\small\\tanh{x}}\\)tanh(x))
   tanhl               \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   asinh
   asinhf              computes the inverse hyperbolic sine
   asinhl              (\\({\\small\\operatorname{arsinh}{x}}\\)arsinh(x))
   \fI(C++11)\fP             \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
                       computes hyperbolic sine of a complex number
   sinh(std::complex)  (\\({\\small\\sinh{z}}\\)sinh(z))
                       \fI(function template)\fP 
   sinh(std::valarray) applies the function std::sinh to each element of valarray
                       \fI(function template)\fP 
   C documentation for
   sinh
