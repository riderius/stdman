.TH std::tanh,std::tanhf,std::tanhl 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::tanh,std::tanhf,std::tanhl \- std::tanh,std::tanhf,std::tanhl

.SH Synopsis
   Defined in header <cmath>
   float       tanh ( float num );

   double      tanh ( double num );                            (until C++23)

   long double tanh ( long double num );
   /* floating-point-type */                                   (since C++23)
               tanh ( /* floating-point-type */ num );         (constexpr since C++26)
   float       tanhf( float num );                     \fB(1)\fP \fB(2)\fP \fI(since C++11)\fP
                                                               (constexpr since C++26)
   long double tanhl( long double num );                   \fB(3)\fP \fI(since C++11)\fP
                                                               (constexpr since C++26)
   Additional overloads \fI(since C++11)\fP
   Defined in header <cmath>
   template< class Integer >                               (A) (constexpr since C++26)
   double      tanh ( Integer num );

   1-3) Computes the hyperbolic tangent of num.
   The library provides overloads of std::tanh for all cv-unqualified floating-point
   types as the type of the parameter.
   (since C++23)

   A) Additional overloads are provided for all integer types, which are  \fI(since C++11)\fP
   treated as double.

.SH Parameters

   num - floating-point or integer value

.SH Return value

   If no errors occur, the hyperbolic tangent of num (tanh(num), or

   enum
   -e-num
   enum
   +e-num

   ) is returned.

   If a range error occurs due to underflow, the correct result (after rounding) is
   returned.

.SH Error handling

   Errors are reported as specified in math_errhandling.

   If the implementation supports IEEE floating-point arithmetic (IEC 60559),

     * if the argument is ±0, ±0 is returned.
     * if the argument is ±∞, ±1 is returned.
     * if the argument is NaN, NaN is returned.

.SH Notes

   POSIX specifies that in case of underflow, num is returned unmodified, and if that
   is not supported, and implementation-defined value no greater than DBL_MIN, FLT_MIN,
   and LDBL_MIN is returned.

   The additional overloads are not required to be provided exactly as (A). They only
   need to be sufficient to ensure that for their argument num of integer type,
   std::tanh(num) has the same effect as std::tanh(static_cast<double>(num)).

.SH Example

   
// Run this code

 #include <cmath>
 #include <iostream>
 #include <random>
  
 double get_random_between(double min, double max)
 {
     std::random_device rd;
     std::mt19937 gen(rd());
     return std::uniform_real_distribution<>(min, max)(gen);
 }
  
 int main()
 {
     const double x = get_random_between(-1.0, 1.0);
  
     std::cout << std::showpos
               << "tanh(+1) = " << std::tanh(+1) << '\\n'
               << "tanh(-1) = " << std::tanh(-1) << '\\n'
               << "tanh(x)*sinh(2*x)-cos(2*x) = "
               << std::tanh(x) * std::sinh(2 * x) - std::cosh(2 * x) << '\\n'
               // special values:
               << "tanh(+0) = " << std::tanh(+0.0) << '\\n'
               << "tanh(-0) = " << std::tanh(-0.0) << '\\n';
 }

.SH Output:

 tanh(+1) = +0.761594
 tanh(-1) = -0.761594
 tanh(x)*sinh(2*x)-cos(2*x) = -1
 tanh(+0) = +0
 tanh(-0) = -0

.SH See also

   sinh
   sinhf               computes hyperbolic sine (\\({\\small\\sinh{x}}\\)sinh(x))
   sinhl               \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   cosh
   coshf               computes hyperbolic cosine (\\({\\small\\cosh{x}}\\)cosh(x))
   coshl               \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   atanh
   atanhf              computes the inverse hyperbolic tangent
   atanhl              (\\({\\small\\operatorname{artanh}{x}}\\)artanh(x))
   \fI(C++11)\fP             \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
                       computes hyperbolic tangent of a complex number
   tanh(std::complex)  (\\({\\small\\tanh{z}}\\)tanh(z))
                       \fI(function template)\fP 
   tanh(std::valarray) applies the function std::tanh to each element of valarray
                       \fI(function template)\fP 
   C documentation for
   tanh
