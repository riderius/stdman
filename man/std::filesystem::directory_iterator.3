.TH std::filesystem::directory_iterator 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::filesystem::directory_iterator \- std::filesystem::directory_iterator

.SH Synopsis
   Defined in header <filesystem>
   class directory_iterator;       \fI(since C++17)\fP

   directory_iterator is a LegacyInputIterator that iterates over the directory_entry
   elements of a directory (but does not visit the subdirectories). The iteration order
   is unspecified, except that each directory entry is visited only once. The special
   pathnames dot and dot-dot are skipped.

   If the directory_iterator reports an error or is advanced past the last directory
   entry, it becomes equal to the default-constructed iterator, also known as the end
   iterator. Two end iterators are always equal, dereferencing or incrementing the end
   iterator is undefined behavior.

   If a file or a directory is deleted or added to the directory tree after the
   directory iterator has been created, it is unspecified whether the change would be
   observed through the iterator.

.SH Member types

   Member type       Definition
   value_type        std::filesystem::directory_entry
   difference_type   std::ptrdiff_t
   pointer           const std::filesystem::directory_entry*
   reference         const std::filesystem::directory_entry&
   iterator_category std::input_iterator_tag

.SH Member functions

   constructor   constructs a directory iterator
                 \fI(public member function)\fP 
   destructor    default destructor
                 \fI(public member function)\fP 
   operator=     assigns contents
                 \fI(public member function)\fP 
   operator*     accesses the pointed-to entry
   operator->    \fI(public member function)\fP 
   increment     advances to the next entry
   operator++    \fI(public member function)\fP 

.SH Non-member functions

   begin(std::filesystem::directory_iterator) range-based for loop support
   end(std::filesystem::directory_iterator)   \fI(function)\fP 
   \fI(C++17)\fP

   Additionally,
   operator== and operator!= are
   \fI(until C++20)\fP
   operator== is
   \fI(since C++20)\fP provided as required by LegacyInputIterator.

   It is unspecified
   whether operator!= is provided because it can be synthesized from operator==, and
   \fI(since C++20)\fP whether an equality operator is a member or non-member.

   Helper templates

   namespace std::ranges {

   template<>                                                                   (since
   inline constexpr bool                                                        C++20)
       enable_borrowed_range<std::filesystem::directory_iterator> = true;

   }
   namespace std::ranges {

   template<>                                                                   (since
   inline constexpr bool enable_view<std::filesystem::directory_iterator> =     C++20)
   true;

   }

   These specializations for directory_iterator make it a borrowed_range and a view.

.SH Notes

   Many low-level OS APIs for directory traversal retrieve file attributes along with
   the next directory entry. The constructors and the non-const member functions of
   std::filesystem::directory_iterator store these attributes, if any, in the
   pointed-to std::filesystem::directory_entry without calling
   directory_entry::refresh, which makes it possible to examine the attributes of the
   directory entries as they are being iterated over, without making additional system
   calls.

.SH Example

   
// Run this code

 #include <algorithm>
 #include <filesystem>
 #include <fstream>
 #include <iostream>
  
 int main()
 {
     const std::filesystem::path sandbox{"sandbox"};
     std::filesystem::create_directories(sandbox/"dir1"/"dir2");
     std::ofstream{sandbox/"file1.txt"};
     std::ofstream{sandbox/"file2.txt"};
  
     std::cout << "directory_iterator:\\n";
     // directory_iterator can be iterated using a range-for loop
     for (auto const& dir_entry : std::filesystem::directory_iterator{sandbox})
         std::cout << dir_entry.path() << '\\n';
  
     std::cout << "\\ndirectory_iterator as a range:\\n";
     // directory_iterator behaves as a range in other ways, too
     std::ranges::for_each(
         std::filesystem::directory_iterator{sandbox},
         [](const auto& dir_entry) { std::cout << dir_entry << '\\n'; });
  
     std::cout << "\\nrecursive_directory_iterator:\\n";
     for (auto const& dir_entry : std::filesystem::recursive_directory_iterator{sandbox})
         std::cout << dir_entry << '\\n';
  
     // delete the sandbox dir and all contents within it, including subdirs
     std::filesystem::remove_all(sandbox);
 }

.SH Possible output:

 directory_iterator:
 "sandbox/file2.txt"
 "sandbox/file1.txt"
 "sandbox/dir1"
  
 directory_iterator as a range:
 "sandbox/file2.txt"
 "sandbox/file1.txt"
 "sandbox/dir1"
  
 recursive_directory_iterator:
 "sandbox/file2.txt"
 "sandbox/file1.txt"
 "sandbox/dir1"
 "sandbox/dir1/dir2"

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to              Behavior as published              Correct behavior
   LWG 3480 C++20      directory_iterator was neither a borrowed_range it is both
                       nor a view

.SH See also

   recursive_directory_iterator an iterator to the contents of a directory and its
   \fI(C++17)\fP                      subdirectories
                                \fI(class)\fP 
   directory_options            options for iterating directory contents
   \fI(C++17)\fP                      \fI(enum)\fP 
   directory_entry              a directory entry
   \fI(C++17)\fP                      \fI(class)\fP 
