.TH std::is_pointer 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_pointer \- std::is_pointer

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_pointer;

   std::is_pointer is a UnaryTypeTrait.

   Checks whether T is a pointer to object or function (including pointer to void, but
   excluding pointer to member) or a cv-qualified version thereof. Provides the member
   constant value which is equal to true, if T is an object/function pointer type.
   Otherwise, value is equal to false.

   If the program adds specializations for std::is_pointer or std::is_pointer_v, the
   behavior is undefined.

.SH Template parameters

   T - a type to check

   Helper variable template

   template< class T >                                         \fI(since C++17)\fP
   inline constexpr bool is_pointer_v = is_pointer<T>::value;

   

Inherited from std::integral_constant

.SH Member constants

   value    true if T is a pointer type, false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Possible implementation

   template<class T>
   struct is_pointer : std::false_type {};
    
   template<class T>
   struct is_pointer<T*> : std::true_type {};
    
   template<class T>
   struct is_pointer<T* const> : std::true_type {};
    
   template<class T>
   struct is_pointer<T* volatile> : std::true_type {};
    
   template<class T>
   struct is_pointer<T* const volatile> : std::true_type {};

.SH Example

   
// Run this code

 #include <type_traits>
  
 int main()
 {
     struct A
     {
         int m;
         void f() {}
     };
  
     int A::*mem_data_ptr = &A::m;     // a pointer to member data
     void (A::*mem_fun_ptr)() = &A::f; // a pointer to member function
  
     static_assert(
            ! std::is_pointer<A>::value
         && ! std::is_pointer_v<A>    // same thing as above, but in C++17!
         && ! std::is_pointer<A>()    // same as above, using inherited operator bool
         && ! std::is_pointer<A>{}    // ditto
         && ! std::is_pointer<A>()()  // same as above, using inherited operator()
         && ! std::is_pointer<A>{}()  // ditto
         &&   std::is_pointer_v<A*>
         &&   std::is_pointer_v<A const* volatile>
         && ! std::is_pointer_v<A&>
         && ! std::is_pointer_v<decltype(mem_data_ptr)>
         && ! std::is_pointer_v<decltype(mem_fun_ptr)>
         &&   std::is_pointer_v<void*>
         && ! std::is_pointer_v<int>
         &&   std::is_pointer_v<int*>
         &&   std::is_pointer_v<int**>
         && ! std::is_pointer_v<int[10]>
         && ! std::is_pointer_v<std::nullptr_t>
         &&   std::is_pointer_v<void (*)()>
     );
 }

.SH See also

   is_member_pointer          checks if a type is a pointer to a non-static member
   \fI(C++11)\fP                    function or object
                              \fI(class template)\fP 
   is_member_object_pointer   checks if a type is a pointer to a non-static member
   \fI(C++11)\fP                    object
                              \fI(class template)\fP 
   is_member_function_pointer checks if a type is a pointer to a non-static member
   \fI(C++11)\fP                    function
                              \fI(class template)\fP 
   is_array                   checks if a type is an array type
   \fI(C++11)\fP                    \fI(class template)\fP 
   is_scalar                  checks if a type is a scalar type
   \fI(C++11)\fP                    \fI(class template)\fP 
