.TH std::independent_bits_engine 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::independent_bits_engine \- std::independent_bits_engine

.SH Synopsis
   Defined in header <random>
   template<

       class Engine,
       std::size_t W,                \fI(since C++11)\fP
       class UIntType

   > class independent_bits_engine;

   independent_bits_engine is a random number engine adaptor that produces random
   numbers with different number of bits than that of the wrapped engine.

.SH Template parameters

   Engine    -  the type of the wrapped engine
   W         -  the number of bits the generated numbers should have
                the type of the generated random numbers. The effect is undefined
   UIntType  -  unless the parameter is cv-unqualified and is one of unsigned short,
                unsigned int, unsigned long, or unsigned long long.
.SH Type requirements
   -
   Engine must meet the requirements of RandomNumberEngine.
   -
   W must be greater than zero, and no greater than
   std::numeric_limits<UIntType>::digits.

.SH Member types

   Member type         Definition
   result_type \fI(C++11)\fP UIntType

.SH Member functions

   constructor      constructs the engine adaptor
   \fI(C++11)\fP          \fI(public member function)\fP 
   seed             sets the state of the underlying engine
   \fI(C++11)\fP          \fI(public member function)\fP 
   base             returns the underlying engine
   \fI(C++11)\fP          \fI(public member function)\fP 
.SH Generation
   operator()       advances the state of the underlying engine and returns the
   \fI(C++11)\fP          generated value
                    \fI(public member function)\fP 
   discard          advances the adaptor's state by a specified amount
   \fI(C++11)\fP          \fI(public member function)\fP 
.SH Characteristics
   min              gets the smallest possible value in the output range (always zero).
   \fB[static]\fP \fI(C++11)\fP \fI(public static member function)\fP 
   max              gets the largest possible value in the output range (always 2w
   \fB[static]\fP \fI(C++11)\fP - 1).
                    \fI(public static member function)\fP 

.SH Non-member functions

   operator==                compares the internal states of the adaptors and
   operator!=                underlying engines
   \fI(C++11)\fP                   \fI(function)\fP 
   \fI(C++11)\fP(removed in C++20)
   operator<<                performs stream input and output on pseudo-random number
   operator>>                engine adaptor
   \fI(C++11)\fP                   \fI(function)\fP 

.SH Example

    This section is incomplete
    Reason: no example

.SH Category:
     * Todo no example
