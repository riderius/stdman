.TH std::erase,std::erase_if(std::forward_list) 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::erase,std::erase_if(std::forward_list) \- std::erase,std::erase_if(std::forward_list)

.SH Synopsis
   Defined in header <forward_list>
   template< class T, class Alloc, class U >
                                                                        \fI(since C++20)\fP
   std::forward_list<T, Alloc>::size_type                               (until C++26)

       erase( std::forward_list<T, Alloc>& c, const U& value );
   template< class T, class Alloc, class U = T >

   std::forward_list<T, Alloc>::size_type                       \fB(1)\fP     (since C++26)

       erase( std::forward_list<T, Alloc>& c, const U& value );
   template< class T, class Alloc, class Pred >

   std::forward_list<T, Alloc>::size_type                           \fB(2)\fP \fI(since C++20)\fP

       erase_if( std::forward_list<T, Alloc>& c, Pred pred );

   1) Erases all elements that compare equal to value from the container. Equivalent to
   return c.remove_if([&](auto& elem) { return elem == value; });.
   2) Erases all elements that satisfy the predicate pred from the container.
   Equivalent to return c.remove_if(pred);.

.SH Parameters

   c     - container from which to erase
   value - value to be removed
           unary predicate which returns true if the element should be erased.

           The expression pred(v) must be convertible to bool for every argument v of
   pred  - type (possibly const) T, regardless of value category, and must not modify
           v. Thus, a parameter type of T&is not allowed
           , nor is T unless for T a move is equivalent to a copy
           \fI(since C++11)\fP.

.SH Return value

   The number of erased elements.

.SH Complexity

   Linear.

.SH Notes

   Unlike std::forward_list::remove, erase accepts heterogeneous types and does not
   force a conversion to the container's value type before invoking the == operator.

             Feature-test macro           Value    Std              Feature
   __cpp_lib_algorithm_default_value_type 202403 (C++26) List-initialization for
                                                         algorithm \fB(1)\fP

.SH Example

   
// Run this code

 #include <complex>
 #include <iostream>
 #include <numeric>
 #include <string_view>
 #include <forward_list>
  
 void println(std::string_view comment, const auto& c)
 {
     std::cout << comment << "{ ";
     for (const auto& x : c)
         std::cout << x << ' ';
     std::cout << "}\\n";
 }
  
 int main()
 {
     std::forward_list<char> cnt(10);
     std::iota(cnt.begin(), cnt.end(), '0');
     println("Initially, cnt = ", cnt);
  
     std::erase(cnt, '3');
     println("After erase '3', cnt = ", cnt);
  
     auto erased = std::erase_if(cnt, [](char x) { return (x - '0') % 2 == 0; });
     println("After erase all even numbers, cnt = ", cnt);
     std::cout << "Erased even numbers: " << erased << '\\n';
  
     std::forward_list<std::complex<double>> nums{{2, 2}, {4, 2}, {4, 8}, {4, 2}};
     #ifdef __cpp_lib_algorithm_default_value_type
         std::erase(nums, {4, 2});
     #else
         std::erase(nums, std::complex<double>{4, 2});
     #endif
     println("After erase {4, 2}, nums = ", nums);
 }

.SH Output:

 Initially, cnt = { 0 1 2 3 4 5 6 7 8 9 }
 After erase '3', cnt = { 0 1 2 4 5 6 7 8 9 }
 After erase all even numbers, cnt = { 1 5 7 9 }
 Erased even numbers: 5
 After erase {4, 2}, nums = { (2,2) (4,8) }

.SH See also

   remove    removes elements satisfying specific criteria
   remove_if \fI(function template)\fP 
   remove    removes elements satisfying specific criteria
   remove_if \fI(public member function)\fP 
