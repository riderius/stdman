.TH std::ratio_greater 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ratio_greater \- std::ratio_greater

.SH Synopsis
   Defined in header <ratio>
   template< class R1, class R2 >
   struct ratio_greater : std::integral_constant<bool, /* see below */>   \fI(since C++11)\fP
   { };

   If the ratio R1 is greater than the ratio R2, provides the member constant value
   equal true. Otherwise, value is false.

.SH Member constants

   value    true if R1::num * R2::den > R2::num * R1::den, or equivalent expression
   \fB[static]\fP that avoids overflow, false otherwise
            \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Example

   
// Run this code

 #include <iostream>
 #include <ratio>
  
 int main()
 {
     static_assert(std::ratio_greater<std::ratio<3, 4>, std::ratio<1, 2>>::value,
                   "3/4 > 1/2");
  
     if (std::ratio_greater<std::ratio<11, 12>, std::ratio<10, 11>>::value)
         std::cout << "11/12 > 10/11" "\\n";
  
     // Since C++17
     static_assert(std::ratio_greater_v<std::ratio<12, 13>, std::ratio<11, 12>>);
  
     if constexpr (std::ratio_greater_v<std::ratio<12, 13>, std::ratio<11, 12>>)
         std::cout << "12/13 > 11/12" "\\n";
 }

.SH Output:

 11/12 > 10/11
 12/13 > 11/12

.SH See also

   ratio_greater_equal compares two ratio objects for greater than or equal to at
   \fI(C++11)\fP             compile-time
                       \fI(class template)\fP 
