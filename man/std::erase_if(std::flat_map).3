.TH std::erase_if(std::flat_map) 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::erase_if(std::flat_map) \- std::erase_if(std::flat_map)

.SH Synopsis
   Defined in header <flat_map>
   template< class Key, class T, class Compare, class KeyContainer,
   class MappedContainer,

             class Pred >
   std::flat_map<Key, T, Compare, KeyContainer,                           (since C++23)
   MappedContainer>::size_type
       erase_if( std::flat_map<Key, T, Compare, KeyContainer,
   MappedContainer>& c,

                 Pred pred );

   Erases all elements that satisfy the predicate pred from c.

   The predicate pred is satisfied if the expression bool(pred(std::pair<const Key&,
   const T&>(e))) is true, where e is some element in c.

   Key and T must be MoveAssignable. Otherwise, the behavior is undefined.

.SH Parameters

   c    - container adaptor from which to erase
   pred - predicate that returns true if the element should be erased

.SH Return value

   The number of erased elements.

.SH Complexity

   Exactly c.size() applications of the predicate pred.

.SH Exceptions

   If erase_if throws, c remains in valid but unspecified (maybe empty) state.

.SH Notes

   The algorithm is stable, that is, the order of elements that are not deleted remains
   unchanged.

.SH Example

   
// Run this code

 #include <iostream>
 #include <flat_map>
  
 void println(auto rem, auto const& container)
 {
     std::cout << rem << '{';
     for (char sep[]{0, ' ', 0}; const auto& [key, value] : container)
         std::cout << sep << '{' << key << ", " << value << '}', *sep = ',';
     std::cout << "}\\n";
 }
  
 int main()
 {
     std::flat_map<int, char> data
     {
         {1, 'a'}, {2, 'b'}, {3, 'c'}, {4, 'd'},
         {5, 'e'}, {4, 'f'}, {5, 'g'}, {5, 'g'},
     };
     println("Original:\\n", data);
  
     const auto count = std::erase_if(data, [](const auto& item)
     {
         auto const& [key, value] = item;
         return (key & 1) == 1;
     });
  
     println("Erase items with odd keys:\\n", data);
     std::cout << count << " items removed.\\n";
 }

.SH Output:

 Original:
 {{1, a}, {2, b}, {3, c}, {4, d}, {5, e}}
 Erase items with odd keys:
 {{2, b}, {4, d}}
 3 items removed.

.SH See also

   remove    removes elements satisfying specific criteria
   remove_if \fI(function template)\fP 
