.TH std::unordered_map::end, 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::unordered_map::end, \- std::unordered_map::end,

.SH Synopsis

   iterator end() noexcept;              \fB(1)\fP \fI(since C++11)\fP
   const_iterator end() const noexcept;  \fB(2)\fP \fI(since C++11)\fP
   const_iterator cend() const noexcept; \fB(3)\fP \fI(since C++11)\fP

   Returns an iterator to the element following the last element of the unordered_map.

   This element acts as a placeholder; attempting to access it results in undefined
   behavior.

   range-begin-end.svg

.SH Parameters

   \fI(none)\fP

.SH Return value

   Iterator to the element following the last element.

.SH Complexity

   Constant.

.SH Example

   
// Run this code

 #include <cmath>
 #include <iostream>
 #include <unordered_map>
  
 struct Node { double x, y; };
  
 int main()
 {
     Node nodes[3] = {{1, 0}, {2, 0}, {3, 0}};
  
     // mag is a map mapping the address of a Node to its magnitude in the plane
     std::unordered_map<Node*, double> mag =
     {
         { nodes + 0, 1 },
         { nodes + 1, 2 },
         { nodes + 2, 3 }
     };
  
     // Change each y-coordinate from 0 to the magnitude
     for (auto iter = mag.begin(); iter != mag.end(); ++iter)
     {
         auto cur = iter->first; // pointer to Node
         cur->y = mag[cur]; // could also have used cur->y = iter->second;
     }
  
     // Update and print the magnitude of each node
     for (auto iter = mag.begin(); iter != mag.end(); ++iter)
     {
         auto cur = iter->first;
         mag[cur] = std::hypot(cur->x, cur->y);
         std::cout << "The magnitude of (" << cur->x << ", " << cur->y << ") is ";
         std::cout << iter->second << '\\n';
     }
  
     // Repeat the above with the range-based for loop
     for (auto i : mag)
     {
         auto cur = i.first;
         cur->y = i.second;
         mag[cur] = std::hypot(cur->x, cur->y);
         std::cout << "The magnitude of (" << cur->x << ", " << cur->y << ") is ";
         std::cout << mag[cur] << '\\n';
         // Note that in contrast to std::cout << iter->second << '\\n'; above,
         // std::cout << i.second << '\\n'; will NOT print the updated magnitude
     }
 }

.SH Possible output:

 The magnitude of (3, 3) is 4.24264
 The magnitude of (1, 1) is 1.41421
 The magnitude of (2, 2) is 2.82843
 The magnitude of (3, 4.24264) is 5.19615
 The magnitude of (1, 1.41421) is 1.73205
 The magnitude of (2, 2.82843) is 3.4641

.SH See also

   begin   returns an iterator to the beginning
   cbegin  \fI(public member function)\fP 
   end
   cend    returns an iterator to the end of a container or array
   \fI(C++11)\fP \fI(function template)\fP 
   \fI(C++14)\fP
