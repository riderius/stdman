.TH std::cyl_bessel_k,std::cyl_bessel_kf,std::cyl_bessel_kl 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::cyl_bessel_k,std::cyl_bessel_kf,std::cyl_bessel_kl \- std::cyl_bessel_k,std::cyl_bessel_kf,std::cyl_bessel_kl

.SH Synopsis
   Defined in header <cmath>
   float       cyl_bessel_k ( float nu, float x );
                                                                          \fI(since C++17)\fP
   double      cyl_bessel_k ( double nu, double x );                      (until C++23)

   long double cyl_bessel_k ( long double nu, long double x );
   /* floating-point-type */ cyl_bessel_k( /* floating-point-type
   */ nu,                                                                 (since C++23)
                                           /* floating-point-type
   */ x );                                                        \fB(1)\fP
   float       cyl_bessel_kf( float nu, float x );                    \fB(2)\fP \fI(since C++17)\fP
   long double cyl_bessel_kl( long double nu, long double x );        \fB(3)\fP \fI(since C++17)\fP
   Additional overloads
   Defined in header <cmath>
   template< class Arithmetic1, class Arithmetic2 >

   /* common-floating-point-type */                                   (A) \fI(since C++17)\fP

       cyl_bessel_k( Arithmetic1 nu, Arithmetic2 x );

   1-3) Computes the irregular modified cylindrical Bessel function (also known as
   modified Bessel function of the second kind) of nu and x.
   The library provides overloads of std::cyl_bessel_k for all cv-unqualified
   floating-point types as the type of the parameters nu and x.
   (since C++23)
   A) Additional overloads are provided for all other combinations of arithmetic types.

.SH Parameters

   nu - the order of the function
   x  - the argument of the function

.SH Return value

   If no errors occur, value of the irregular modified cylindrical Bessel function
   (modified Bessel function of the second kind) of nu and x, is returned, that is K
   nu(x) =

   π
   2

   I
   -nu(x)-I
   nu(x)
   sin(nuπ)

   (where I
   nu(x) is std::cyl_bessel_i(nu, x)) for x≥0 and non-integer nu; for integer nu a
   limit is used.

.SH Error handling

   Errors may be reported as specified in math_errhandling:

     * If the argument is NaN, NaN is returned and domain error is not reported.
     * If nu≥128, the behavior is implementation-defined.

.SH Notes

   Implementations that do not support C++17, but support ISO 29124:2010, provide this
   function if __STDCPP_MATH_SPEC_FUNCS__ is defined by the implementation to a value
   at least 201003L and if the user defines __STDCPP_WANT_MATH_SPEC_FUNCS__ before
   including any standard library headers.

   Implementations that do not support ISO 29124:2010 but support TR 19768:2007 (TR1),
   provide this function in the header tr1/cmath and namespace std::tr1.

   An implementation of this function is also available in boost.math.

   The additional overloads are not required to be provided exactly as (A). They only
   need to be sufficient to ensure that for their first argument num1 and second
   argument num2:

     * If num1 or num2 has type long double, then std::cyl_bessel_k(num1,
       num2) has the same effect as std::cyl_bessel_k(static_cast<long
       double>(num1),
                         static_cast<long double>(num2)).
     * Otherwise, if num1 and/or num2 has type double or an integer type,
       then std::cyl_bessel_k(num1, num2) has the same effect as          (until C++23)
       std::cyl_bessel_k(static_cast<double>(num1),
                         static_cast<double>(num2)).
     * Otherwise, if num1 or num2 has type float, then
       std::cyl_bessel_k(num1, num2) has the same effect as
       std::cyl_bessel_k(static_cast<float>(num1),
                         static_cast<float>(num2)).
   If num1 and num2 have arithmetic types, then std::cyl_bessel_k(num1,
   num2) has the same effect as std::cyl_bessel_k(static_cast</*
   common-floating-point-type */>(num1),
                     static_cast</* common-floating-point-type
   */>(num2)), where /* common-floating-point-type */ is the
   floating-point type with the greatest floating-point conversion rank
   and greatest floating-point conversion subrank between the types of    (since C++23)
   num1 and num2, arguments of integer type are considered to have the
   same floating-point conversion rank as double.

   If no such floating-point type with the greatest rank and subrank
   exists, then overload resolution does not result in a usable candidate
   from the overloads provided.

.SH Example

   
// Run this code

 #include <cmath>
 #include <iostream>
 #include <numbers>
  
 int main()
 {
     double pi = std::numbers::pi;
     const double x = 1.2345;
  
     // spot check for nu == 0.5
     std::cout << "K_.5(" << x << ") = " << std::cyl_bessel_k(.5, x) << '\\n'
               << "calculated via I = "
               << (pi / 2) * (std::cyl_bessel_i(-.5, x)
                  - std::cyl_bessel_i(.5, x)) / std::sin(.5 * pi) << '\\n';
 }

.SH Output:

 K_.5(1.2345) = 0.32823
 calculated via I = 0.32823

.SH See also

   cyl_bessel_i
   cyl_bessel_if
   cyl_bessel_il regular modified cylindrical Bessel functions
   \fI(C++17)\fP       \fI(function)\fP 
   \fI(C++17)\fP
   \fI(C++17)\fP
   cyl_bessel_j
   cyl_bessel_jf
   cyl_bessel_jl cylindrical Bessel functions (of the first kind)
   \fI(C++17)\fP       \fI(function)\fP 
   \fI(C++17)\fP
   \fI(C++17)\fP

.SH External links

   Weisstein, Eric W. "Modified Bessel Function of the Second Kind." From MathWorld — A
   Wolfram Web Resource.
