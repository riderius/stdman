.TH std::is_standard_layout 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_standard_layout \- std::is_standard_layout

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_standard_layout;

   std::is_standard_layout is a UnaryTypeTrait.

   If T is a standard-layout type, provides the member constant value equal to true.
   For any other type, value is false.

   If std::remove_all_extents_t<T> is an incomplete type and not (possibly
   cv-qualified) void, the behavior is undefined.

   If the program adds specializations for std::is_standard_layout or
   std::is_standard_layout_v, the behavior is undefined.

.SH Template parameters

   T - a type to check

   Helper variable template

   template< class T >
   inline constexpr bool is_standard_layout_v =                           \fI(since C++17)\fP
   is_standard_layout<T>::value;

   

Inherited from std::integral_constant

.SH Member constants

   value    true if T is a standard-layout type, false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Notes

   A pointer to a standard-layout class may be converted (with reinterpret_cast) to a
   pointer to its first non-static data member and vice versa.

   If a standard-layout union holds two or more standard-layout structs, it is
   permitted to inspect the common initial part of them.

   The macro offsetof is only guaranteed to be usable with standard-layout classes.

.SH Example

   
// Run this code

 #include <type_traits>
  
 struct A { int m; };
 static_assert(std::is_standard_layout_v<A> == true);
  
 class B: public A { int m; };
 static_assert(std::is_standard_layout_v<B> == false);
  
 struct C { virtual void foo(); };
 static_assert(std::is_standard_layout_v<C> == false);
  
 int main() {}

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to       Behavior as published          Correct behavior
   LWG 2015 C++11      T could be an array of incomplete the behavior is
                       class type with unknown bound     undefined in this case

.SH See also

   is_trivially_copyable        checks if a type is trivially copyable
   \fI(C++11)\fP                      \fI(class template)\fP 
   is_pod                       checks if a type is a plain-old data (POD) type
   \fI(C++11)\fP(deprecated in C++20) \fI(class template)\fP 
                                byte offset from the beginning of a standard-layout
   offsetof                     type to specified member
                                \fI(function macro)\fP 
