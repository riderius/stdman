.TH std::is_debugger_present 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_debugger_present \- std::is_debugger_present

.SH Synopsis
   Defined in header <debugging>
   bool is_debugger_present() noexcept;  (since C++26)

   Attempts to determine if the program is being executed with debugger present.

   By default, the behavior of this function is completely implementation-defined. A
   C++ program may provide the definition of this signature to replace the behavior of
   this function.

.SH Return value

   The default version returns true if, to the best of its knowledge, the program is
   executed under a debugger.

.SH Notes

   The intent of this function is allowing printing out extra output to help diagnose
   problems, executing extra test code, displaying an extra user interface to help in
   debugging, etc.

   This function standardizes many similar existing facilities: under_debugger from
   boost.test, IsDebuggerPresent() from Win32 API, isDebuggerActive from Catch2,
   IsDebuggerPresent from Unreal Engine, etc.

   Feature-test macro   Value    Std                 Feature
   __cpp_lib_debugging 202311L (C++26) Debugging support library
                       202403L (C++26) Replaceable std::is_debugger_present

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   breakpoint              pauses the running program when called
   (C++26)                 \fI(function)\fP 
   breakpoint_if_debugging calls std::breakpoint if std::is_debugger_present returns
   (C++26)                 true
                           \fI(function)\fP 

.SH Category:
     * Todo no example
