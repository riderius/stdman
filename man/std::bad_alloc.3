.TH std::bad_alloc 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::bad_alloc \- std::bad_alloc

.SH Synopsis
   Defined in header <new>
   class bad_alloc;

   std::bad_alloc is the type of the object thrown as exceptions by the allocation
   functions to report failure to allocate storage.

   std-bad alloc-inheritance.svg

                                   Inheritance diagram

.SH Member functions

   constructor   constructs a new bad_alloc object
                 \fI(public member function)\fP
   operator=     replaces the bad_alloc object
                 \fI(public member function)\fP
   what          returns the explanatory string
                 \fI(public member function)\fP

std::bad_alloc::bad_alloc

   bad_alloc() throw();                                  \fI(until C++11)\fP
   bad_alloc() noexcept;                         \fB(1)\fP     \fI(since C++11)\fP
   bad_alloc( const bad_alloc& other ) throw();      \fB(2)\fP               \fI(until C++11)\fP
   bad_alloc( const bad_alloc& other ) noexcept;                       \fI(since C++11)\fP

   Constructs a new bad_alloc object with an implementation-defined null-terminated
   byte string which is accessible through what().

   1) Default constructor.
   2) Copy constructor.
   If *this and other both have dynamic type std::bad_alloc then std::strcmp(what(),
   other.what()) == 0.
   \fI(since C++11)\fP

.SH Parameters

   other - another exception object to copy

std::bad_alloc::operator=

   bad_alloc& operator=( const bad_alloc& other ) throw();   \fI(until C++11)\fP
   bad_alloc& operator=( const bad_alloc& other ) noexcept;  \fI(since C++11)\fP

   Assigns the contents with those of other.
   If *this and other both have dynamic type std::bad_alloc then std::strcmp(what(),
   other.what()) == 0 after assignment.
   \fI(since C++11)\fP

.SH Parameters

   other - another exception object to assign with

.SH Return value

   *this

std::bad_alloc::what

   virtual const char* what() const throw();   \fI(until C++11)\fP
   virtual const char* what() const noexcept;  \fI(since C++11)\fP

   Returns the explanatory string.

.SH Parameters

   \fI(none)\fP

.SH Return value

   Pointer to a null-terminated string with explanatory information. The string is
   suitable for conversion and display as a std::wstring. The pointer is guaranteed to
   be valid at least until the exception object from which it is obtained is destroyed,
   or until a non-const member function (e.g. copy assignment operator) on the
   exception object is called.

.SH Notes

   Implementations are allowed but not required to override what().

Inherited from std::exception

.SH Member functions

   destructor   destroys the exception object
   \fB[virtual]\fP    \fI(virtual public member function of std::exception)\fP 
   what         returns an explanatory string
   \fB[virtual]\fP    \fI(virtual public member function of std::exception)\fP 

.SH Example

   
// Run this code

 #include <iostream>
 #include <new>
  
 int main()
 {
     try
     {
         while (true)
         {
             new int[100000000ul];
         }
     }
     catch (const std::bad_alloc& e)
     {
         std::cout << "Allocation failed: " << e.what() << '\\n';
     }
 }

.SH Possible output:

 Allocation failed: std::bad_alloc

.SH See also

   operator new   allocation functions
   operator new[] \fI(function)\fP 
