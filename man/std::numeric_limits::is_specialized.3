.TH std::numeric_limits::is_specialized 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::numeric_limits::is_specialized \- std::numeric_limits::is_specialized

.SH Synopsis
   static const bool is_specialized;      \fI(until C++11)\fP
   static constexpr bool is_specialized;  \fI(since C++11)\fP

   The value of std::numeric_limits<T>::is_specialized is true for all T for which
   there exists a specialization of std::numeric_limits.

.SH Standard specializations

   T                                value of std::numeric_limits<T>::is_specialized
   /* non-specialized */            false
   bool                             true
   char                             true
   signed char                      true
   unsigned char                    true
   wchar_t                          true
   char8_t \fI(since C++20)\fP            true
   char16_t \fI(since C++11)\fP           true
   char32_t \fI(since C++11)\fP           true
   short                            true
   unsigned short                   true
   int                              true
   unsigned int                     true
   long                             true
   unsigned long                    true
   long long \fI(since C++11)\fP          true
   unsigned long long \fI(since C++11)\fP true
   float                            true
   double                           true
   long double                      true

.SH Example

   
// Run this code

 #include <iostream>
 #include <limits>
 #include <type_traits>
  
 int main()
 {
     enum E{};
  
     std::cout << std::boolalpha
               << std::numeric_limits<bool>::is_specialized << '\\n'
               << std::numeric_limits<long long>::is_specialized << '\\n'
               << std::numeric_limits<std::true_type>::is_specialized << '\\n'
               << std::numeric_limits<E>::is_specialized << '\\n';
 }

.SH Possible output:

 true
 true
 false
 false

.SH See also

   is_integer identifies integer types
   \fB[static]\fP   \fI(public static member constant)\fP 
   is_iec559  identifies the IEC 559/IEEE 754 floating-point types
   \fB[static]\fP   \fI(public static member constant)\fP 
   is_exact   identifies exact types
   \fB[static]\fP   \fI(public static member constant)\fP 
   is_bounded identifies types that represent a finite set of values
   \fB[static]\fP   \fI(public static member constant)\fP 
