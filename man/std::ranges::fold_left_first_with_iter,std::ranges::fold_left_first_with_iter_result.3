.TH std::ranges::fold_left_first_with_iter,std::ranges::fold_left_first_with_iter_result 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::fold_left_first_with_iter,std::ranges::fold_left_first_with_iter_result \- std::ranges::fold_left_first_with_iter,std::ranges::fold_left_first_with_iter_result

.SH Synopsis
   Defined in header <algorithm>
   Call signature
   template< std::input_iterator I, std::sentinel_for<I> S,

            
   /*indirectly-binary-left-foldable*/<std::iter_value_t<I>, I> F >
   requires std::constructible_from<                                 \fB(1)\fP (since C++23)
                std::iter_value_t<I>, std::iter_reference_t<I>>
   constexpr /* see description */

       fold_left_first_with_iter( I first, S last, F f );
   template< ranges::input_range R,

             /*indirectly-binary-left-foldable*/<
                 ranges::range_value_t<R>, ranges::iterator_t<R>> F
   >
   requires std::constructible_from<                                 \fB(2)\fP (since C++23)
                ranges::range_value_t<R>,
   ranges::range_reference_t<R>>
   constexpr /* see description */

       fold_left_first_with_iter( R&& r, F f );
   Helper concepts
   template< class F, class T, class I >                                 (exposition
   concept /*indirectly-binary-left-foldable*/ = /* see description  \fB(3)\fP only*)
   */;
   Helper class template
   template< class I, class T >
   using fold_left_first_with_iter_result =                          \fB(4)\fP (since C++23)
   ranges::in_value_result<I, T>;

   Left-folds the elements of given range, that is, returns the result of evaluation of
   the chain expression:
   f(f(f(f(x[1], x[2]), x[3]), ...), x[n]), where x[1], x[2], ..., x[n] are elements of
   the range.

   Informally, ranges::fold_left_first_with_iter behaves like std::accumulate's
   overload that accepts a binary predicate, except that the *first is used internally
   as an initial element.

   The behavior is undefined if [first, last) is not a valid range.

   1) The range is [first, last).
   2) Same as \fB(1)\fP, except that uses r as the range, as if by using ranges::begin(r) as
   first and ranges::end(r) as last.
   3) Equivalent to:

   Helper concepts
   template< class F, class T, class I, class U >

   concept /*indirectly-binary-left-foldable-impl*/ =
       std::movable<T> &&
       std::movable<U> &&
       std::convertible_to<T, U> &&                             (3A) (exposition only*)
       std::invocable<F&, U, std::iter_reference_t<I>> &&
       std::assignable_from<U&,

           std::invoke_result_t<F&, U,
   std::iter_reference_t<I>>>;
   template< class F, class T, class I >

   concept /*indirectly-binary-left-foldable*/ =
       std::copy_constructible<F> &&
       std::indirectly_readable<I> &&
       std::invocable<F&, T, std::iter_reference_t<I>> &&
       std::convertible_to<std::invoke_result_t<F&, T,          (3B) (exposition only*)
   std::iter_reference_t<I>>,
           std::decay_t<std::invoke_result_t<F&, T,
   std::iter_reference_t<I>>>> &&
       /*indirectly-binary-left-foldable-impl*/<F, T, I,

           std::decay_t<std::invoke_result_t<F&, T,
   std::iter_reference_t<I>>>>;

   4) The return type alias. See "Return value" section for details.

   The function-like entities described on this page are niebloids, that is:

     * Explicit template argument lists cannot be specified when calling any of them.
     * None of them are visible to argument-dependent lookup.
     * When any of them are found by normal unqualified lookup as the name to the left
       of the function-call operator, argument-dependent lookup is inhibited.

   In practice, they may be implemented as function objects, or with special compiler
   extensions.

.SH Parameters

   first, last - the range of elements to fold
   r           - the range of elements to fold
   f           - the binary function object

.SH Return value

   Let U be decltype(ranges::fold_left(std::move(first), last,
   std::iter_value_t<I>(*first), f)).

   1) An object of type ranges::fold_left_first_with_iter_result<I, std::optional<U>>.
     * The member ranges::in_value_result::in holds an iterator to the end of the
       range.
     * The member ranges::in_value_result::value holds the result of the left-fold of
       given range over f.
   If the range is empty, the return value is {std::move(first), std::optional<U>()}.
   2) Same as \fB(1)\fP except that the return type is
   ranges::fold_left_first_with_iter_result<ranges::borrowed_iterator_t<R>,
   std::optional<U>>.

.SH Possible implementations

   class fold_left_first_with_iter_fn
   {
       template<class O, class I, class S, class F>
       constexpr auto impl(I&& first, S&& last, F f) const
       {
           using U = decltype(
               ranges::fold_left(std::move(first), last, std::iter_value_t<I>(*first), f)
           );
           using Ret = ranges::fold_left_first_with_iter_result<O, std::optional<U>>;
           if (first == last)
               return Ret{std::move(first), std::optional<U>()};
           std::optional<U> init(std::in_place, *first);
           for (++first; first != last; ++first)
               *init = std::invoke(f, std::move(*init), *first);
           return Ret{std::move(first), std::move(init)};
       }
    
   public:
       template<std::input_iterator I, std::sentinel_for<I> S,
                /*indirectly-binary-left-foldable*/<std::iter_value_t<I>, I> F>
       requires std::constructible_from<std::iter_value_t<I>, std::iter_reference_t<I>>
       constexpr auto operator()(I first, S last, F f) const
       {
           return impl<I>(std::move(first), std::move(last), std::ref(f));
       }
    
       template<ranges::input_range R, /*indirectly-binary-left-foldable*/<
           ranges::range_value_t<R>, ranges::iterator_t<R>> F>
       requires
           std::constructible_from<ranges::range_value_t<R>, ranges::range_reference_t<R>>
       constexpr auto operator()(R&& r, F f) const
       {
           return impl<ranges::borrowed_iterator_t<R>>(
               ranges::begin(r), ranges::end(r), std::ref(f)
           );
       }
   };
    
   inline constexpr fold_left_first_with_iter_fn fold_left_first_with_iter;

.SH Complexity

   Exactly ranges::distance(first, last) - 1 (assuming the range is not empty)
   applications of the function object f.

.SH Notes

   The following table compares all constrained folding algorithms:

        Fold function template       Starts Initial             Return type
                                      from   value
   ranges::fold_left                 left   init    U
   ranges::fold_left_first           left   first   std::optional<U>
                                            element
   ranges::fold_right                right  init    U
   ranges::fold_right_last           right  last    std::optional<U>
                                            element
                                                    \fB(1)\fP ranges::in_value_result<I, U>

   ranges::fold_left_with_iter       left   init    \fB(2)\fP ranges::in_value_result<BR, U>,

                                                    where BR is
                                                    ranges::borrowed_iterator_t<R>
                                                    \fB(1)\fP ranges::in_value_result<I,
                                                    std::optional<U>>

   ranges::fold_left_first_with_iter left   first   \fB(2)\fP ranges::in_value_result<BR,
                                            element std::optional<U>>

                                                    where BR is
                                                    ranges::borrowed_iterator_t<R>

    Feature-test macro    Value    Std             Feature
   __cpp_lib_ranges_fold 202207L (C++23) std::ranges fold algorithms

.SH Example

   
// Run this code

 #include <algorithm>
 #include <cassert>
 #include <functional>
 #include <iostream>
 #include <ranges>
 #include <utility>
 #include <vector>
  
 int main()
 {
     std::vector v{1, 2, 3, 4, 5, 6, 7, 8};
  
     auto sum = std::ranges::fold_left_first_with_iter
     (
         v.begin(), v.end(), std::plus<int>()
     );
     std::cout << "sum: " << sum.value.value() << '\\n';
     assert(sum.in == v.end());
  
     auto mul = std::ranges::fold_left_first_with_iter(v, std::multiplies<int>());
     std::cout << "mul: " << mul.value.value() << '\\n';
     assert(mul.in == v.end());
  
     // get the product of the std::pair::second of all pairs in the vector:
     std::vector<std::pair<char, float>> data {{'A', 2.f}, {'B', 3.f}, {'C', 7.f}};
     auto sec = std::ranges::fold_left_first_with_iter
     (
         data | std::ranges::views::values, std::multiplies<>()
     );
     std::cout << "sec: " << sec.value.value() << '\\n';
  
     // use a program defined function object (lambda-expression):
     auto lambda = [](int x, int y) { return x + y + 2; };
     auto val = std::ranges::fold_left_first_with_iter(v, lambda);
     std::cout << "val: " << val.value.value() << '\\n';
     assert(val.in == v.end());
 }

.SH Output:

 sum: 36
 mul: 40320
 sec: 42
 val: 50

.SH References

     * C++23 standard (ISO/IEC 14882:2023):

     * 27.6.18 Fold [alg.fold]

.SH See also

   ranges::fold_left           left-folds a range of elements
   (C++23)                     (niebloid)
   ranges::fold_left_first     left-folds a range of elements using the first element
   (C++23)                     as an initial value
                               (niebloid)
   ranges::fold_right          right-folds a range of elements
   (C++23)                     (niebloid)
   ranges::fold_right_last     right-folds a range of elements using the last element
   (C++23)                     as an initial value
                               (niebloid)
   ranges::fold_left_with_iter left-folds a range of elements, and returns a pair
   (C++23)                     (iterator, value)
                               (niebloid)
   accumulate                  sums up or folds a range of elements
                               \fI(function template)\fP 
   reduce                      similar to std::accumulate, except out of order
   \fI(C++17)\fP                     \fI(function template)\fP 
