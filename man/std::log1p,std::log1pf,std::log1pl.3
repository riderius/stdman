.TH std::log1p,std::log1pf,std::log1pl 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::log1p,std::log1pf,std::log1pl \- std::log1p,std::log1pf,std::log1pl

.SH Synopsis
   Defined in header <cmath>
   float       log1p ( float num );

   double      log1p ( double num );                            (until C++23)

   long double log1p ( long double num );
   /* floating-point-type */                                    (since C++23)
               log1p ( /* floating-point-type */ num );         (constexpr since C++26)
   float       log1pf( float num );                     \fB(1)\fP \fB(2)\fP \fI(since C++11)\fP
                                                                (constexpr since C++26)
   long double log1pl( long double num );                   \fB(3)\fP \fI(since C++11)\fP
                                                                (constexpr since C++26)
   Additional overloads \fI(since C++11)\fP
   Defined in header <cmath>
   template< class Integer >                                (A) (constexpr since C++26)
   double      log1p ( Integer num );

   1-3) Computes the natural (base e) logarithm of 1 + num. This function is more
   precise than the expression std::log(1 + num) if num is close to zero.
   The library provides overloads of std::log1p for all cv-unqualified floating-point
   types as the type of the parameter.
   (since C++23)

   A) Additional overloads are provided for all integer types, which are  \fI(since C++11)\fP
   treated as double.

.SH Parameters

   num - floating-point or integer value

.SH Return value

   If no errors occur ln(1+num) is returned.

   If a domain error occurs, an implementation-defined value is returned (NaN where
   supported).

   If a pole error occurs, -HUGE_VAL, -HUGE_VALF, or -HUGE_VALL is returned.

   If a range error occurs due to underflow, the correct result (after rounding) is
   returned.

.SH Error handling

   Errors are reported as specified in math_errhandling.

   Domain error occurs if num is less than -1.

   Pole error may occur if num is -1.

   If the implementation supports IEEE floating-point arithmetic (IEC 60559),

     * If the argument is ±0, it is returned unmodified.
     * If the argument is -1, -∞ is returned and FE_DIVBYZERO is raised.
     * If the argument is less than -1, NaN is returned and FE_INVALID is raised.
     * If the argument is +∞, +∞ is returned.
     * If the argument is NaN, NaN is returned.

.SH Notes

   The functions std::expm1 and std::log1p are useful for financial calculations, for
   example, when calculating small daily interest rates: (1 + x)n
   - 1 can be expressed as std::expm1(n * std::log1p(x)). These functions also simplify
   writing accurate inverse hyperbolic functions.

   The additional overloads are not required to be provided exactly as (A). They only
   need to be sufficient to ensure that for their first argument num1 and second
   argument num2:

     * If num1 or num2 has type long double, then std::log1p(num1, num2)
       has the same effect as std::log1p(static_cast<long double>(num1),
                  static_cast<long double>(num2)).
     * Otherwise, if num1 and/or num2 has type double or an integer type,
       then std::log1p(num1, num2) has the same effect as                 (until C++23)
       std::log1p(static_cast<double>(num1),
                  static_cast<double>(num2)).
     * Otherwise, if num1 or num2 has type float, then std::log1p(num1,
       num2) has the same effect as std::log1p(static_cast<float>(num1),
                  static_cast<float>(num2)).
   If num1 and num2 have arithmetic types, then std::log1p(num1, num2)
   has the same effect as std::log1p(static_cast</*
   common-floating-point-type */>(num1),
              static_cast</* common-floating-point-type */>(num2)), where
   /* common-floating-point-type */ is the floating-point type with the
   greatest floating-point conversion rank and greatest floating-point
   conversion subrank between the types of num1 and num2, arguments of    (since C++23)
   integer type are considered to have the same floating-point conversion
   rank as double.

   If no such floating-point type with the greatest rank and subrank
   exists, then overload resolution does not result in a usable candidate
   from the overloads provided.

.SH Example

   
// Run this code

 #include <cerrno>
 #include <cfenv>
 #include <cmath>
 #include <cstring>
 #include <iostream>
 // #pragma STDC FENV_ACCESS ON
  
 int main()
 {
     std::cout << "log1p(0) = " << log1p(0) << '\\n'
               << "Interest earned in 2 days on $100, compounded daily at 1%\\n"
               << "    on a 30/360 calendar = "
               << 100 * expm1(2 * log1p(0.01 / 360)) << '\\n'
               << "log(1+1e-16) = " << std::log(1 + 1e-16)
               << ", but log1p(1e-16) = " << std::log1p(1e-16) << '\\n';
  
     // special values
     std::cout << "log1p(-0) = " << std::log1p(-0.0) << '\\n'
               << "log1p(+Inf) = " << std::log1p(INFINITY) << '\\n';
  
     // error handling
     errno = 0;
     std::feclearexcept(FE_ALL_EXCEPT);
  
     std::cout << "log1p(-1) = " << std::log1p(-1) << '\\n';
  
     if (errno == ERANGE)
         std::cout << "    errno == ERANGE: " << std::strerror(errno) << '\\n';
     if (std::fetestexcept(FE_DIVBYZERO))
         std::cout << "    FE_DIVBYZERO raised\\n";
 }

.SH Possible output:

 log1p\fB(0)\fP = 0
 Interest earned in 2 days on $100, compounded daily at 1%
     on a 30/360 calendar = 0.00555563
 log(1+1e-16) = 0, but log1p(1e-16) = 1e-16
 log1p(-0) = -0
 log1p(+Inf) = inf
 log1p(-1) = -inf
     errno == ERANGE: Result too large
     FE_DIVBYZERO raised

.SH See also

   log
   logf    computes natural (base e) logarithm (\\({\\small\\ln{x}}\\)ln(x))
   logl    \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   log10
   log10f  computes common (base 10) logarithm (\\({\\small\\log_{10}{x}}\\)log[10](x))
   log10l  \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   log2
   log2f
   log2l   base 2 logarithm of the given number (\\({\\small\\log_{2}{x}}\\)log[2](x))
   \fI(C++11)\fP \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   expm1
   expm1f
   expm1l  returns e raised to the given power, minus one (\\({\\small e^x-1}\\)e^x-1)
   \fI(C++11)\fP \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   C documentation for
   log1p
