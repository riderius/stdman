.TH std::unordered_map::max_bucket_count 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::unordered_map::max_bucket_count \- std::unordered_map::max_bucket_count

.SH Synopsis
   size_type max_bucket_count() const;  \fI(since C++11)\fP

   Returns the maximum number of buckets the container is able to hold due to system or
   library implementation limitations.

.SH Parameters

   \fI(none)\fP

.SH Return value

   Maximum number of buckets.

.SH Complexity

   Constant.

.SH Example

   
// Run this code

 #include <iostream>
 #include <unordered_map>
  
 int main()
 {
     struct Ha { std::size_t operator()(long x) const { return std::hash<long>{}(x); }; };
  
     auto c1 = std::unordered_map<char, long>{};
     auto c2 = std::unordered_map<long, long>{};
     auto c3 = std::unordered_map<long, long, std::hash<int>>{};
     auto c4 = std::unordered_map<long, long, Ha>{};
  
     std::cout
         << "Max bucket count of\\n" << std::hex << std::showbase
         << "c1: " << c1.max_bucket_count() << '\\n'
         << "c2: " << c2.max_bucket_count() << '\\n'
         << "c3: " << c3.max_bucket_count() << '\\n'
         << "c4: " << c4.max_bucket_count() << '\\n'
         ;
 }

.SH Possible output:

 Max bucket count of
 c1: 0xfffffffffffffff
 c2: 0xfffffffffffffff
 c3: 0xfffffffffffffff
 c4: 0xaaaaaaaaaaaaaaa

.SH See also

   bucket_count returns the number of buckets
                \fI(public member function)\fP 
