.TH std::experimental::simd::copy_to 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::simd::copy_to \- std::experimental::simd::copy_to

.SH Synopsis
   template< class U, class Flags >      (parallelism TS v2)
   void copy_to( U* mem, Flags flags );

   The store function copies all elements of a simd such that the i-th element is
   converted to U and subsequently written to mem[i] for all i in the range of
   [0, size()).

.SH Parameters

   mem   - a pointer into an array where [mem, mem + size()) is a valid range
   flags - if of type vector_aligned_tag, the load constructor may assume mem to point
           to storage aligned by memory_alignment_v<simd, U>
.SH Type requirements
   -
   U must be a vectorizable type.
   -
   is_simd_flag_type_v<Flags> must be true.

.SH Example

   
// Run this code

 #include <experimental/simd>
 #include <iostream>
 namespace stdx = std::experimental;
  
 int main()
 {
     alignas(stdx::memory_alignment_v<stdx::native_simd<int>>)
         std::array<int, stdx::native_simd<int>::size()> mem = {};
  
     stdx::native_simd<int> a = 7;
     a.copy_to(&mem[0], stdx::vector_aligned);
  
     for (int e : mem)
         std::cout << e << ' ';
     std::cout << '\\n';
 }

.SH Possible output:

 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7

.SH See also

   element_aligned_tag flag indicating alignment of the load/store address to element
   element_aligned     alignment
   (parallelism TS v2) \fI(class)\fP 
   vector_aligned_tag  flag indicating alignment of the load/store address to vector
   vector_aligned      alignment
   (parallelism TS v2) \fI(class)\fP 
   overaligned_tag     flag indicating alignment of the load/store address to the
   overaligned         specified alignment
   (parallelism TS v2) \fI(class template)\fP 
   memory_alignment    obtains an appropriate alignment for vector_aligned
   (parallelism TS v2) \fI(class template)\fP 
   copy_from           loads simd elements from contiguous memory
   (parallelism TS v2) \fI(public member function)\fP 
