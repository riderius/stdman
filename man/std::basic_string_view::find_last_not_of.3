.TH std::basic_string_view::find_last_not_of 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_string_view::find_last_not_of \- std::basic_string_view::find_last_not_of

.SH Synopsis
   constexpr size_type
       find_last_not_of( basic_string_view v, size_type pos = npos )  \fB(1)\fP \fI(since C++17)\fP
   const noexcept;
   constexpr size_type
       find_last_not_of( CharT ch, size_type pos = npos ) const       \fB(2)\fP \fI(since C++17)\fP
   noexcept;
   constexpr size_type
       find_last_not_of( const CharT* s, size_type pos, size_type     \fB(3)\fP \fI(since C++17)\fP
   count ) const;
   constexpr size_type
       find_last_not_of( const CharT* s, size_type pos = npos )       \fB(4)\fP \fI(since C++17)\fP
   const;

   Finds the last character not equal to any of the characters in the given character
   sequence. The search considers only the interval [0, pos].

   1) Finds the last character not equal to any of the characters of v in this view,
   starting at position pos.
   2) Equivalent to find_last_not_of(basic_string_view(std::addressof(ch), 1), pos).
   3) Equivalent to find_last_not_of(basic_string_view(s, count), pos).
   4) Equivalent to find_last_not_of(basic_string_view(s), pos).

.SH Parameters

   v     - view to search for
   pos   - position at which to start the search
   count - length of the string of characters to compare
   s     - pointer to a string of characters to compare
   ch    - character to compare

.SH Return value

   Position of the last character not equal to any of the characters in the given
   string, or npos if no such character is found.

.SH Complexity

   O(size() * v.size()) at worst.

.SH Example

   
// Run this code

 #include <string_view>
 using std::operator""sv;
  
 int main()
 {
     static_assert(1 == "BCDEF"sv.find_last_not_of("DEF"));
                     //   ^
     static_assert(2 == "BCDEFG"sv.find_last_not_of("EFG", 3));
                     //    ^
     static_assert(2 == "ABBA"sv.find_last_not_of('A'));
                     //    ^
     static_assert(1 == "ABBA"sv.find_last_not_of('A', 1));
                     //   ^
 }

.SH See also

   find              find characters in the view
                     \fI(public member function)\fP 
   rfind             find the last occurrence of a substring
                     \fI(public member function)\fP 
   find_first_of     find first occurrence of characters
                     \fI(public member function)\fP 
   find_last_of      find last occurrence of characters
                     \fI(public member function)\fP 
   find_first_not_of find first absence of characters
                     \fI(public member function)\fP 
                     find last absence of characters
   find_last_not_of  \fI\fI(public member\fP function of\fP
                     std::basic_string<CharT,Traits,Allocator>) 
