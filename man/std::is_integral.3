.TH std::is_integral 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_integral \- std::is_integral

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_integral;

   std::is_integral is a UnaryTypeTrait.

   Checks whether T is an integral type. Provides the member constant value which is
   equal to true, if T is the type bool, char
   , char8_t
   \fI(since C++20)\fP, char16_t, char32_t, wchar_t, short, int, long, long long, or any
   implementation-defined extended integer types, including any signed, unsigned, and
   cv-qualified variants. Otherwise, value is equal to false.

   If the program adds specializations for std::is_integral or std::is_integral_v, the
   behavior is undefined.

.SH Template parameters

   T - a type to check

   Helper variable template

   template< class T >                                           \fI(since C++17)\fP
   inline constexpr bool is_integral_v = is_integral<T>::value;

   

Inherited from std::integral_constant

.SH Member constants

   value    true if T is an integral type, false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Possible implementation

   // Note: this implementation uses C++20 facilities
   template<class T>
   struct is_integral : std::bool_constant<
       requires (T t, T* p, void (*f)(T)) // T* parameter excludes reference types
       {
           reinterpret_cast<T>(t); // Exclude class types
           f\fB(0)\fP; // Exclude enumeration types
           p + t; // Exclude everything not yet excluded but integral types
       }> {};

.SH Example

   
// Run this code

 #include <type_traits>
  
 static_assert
 (
     std::is_integral_v<float> == false &&
     std::is_integral_v<int*> == false &&
     std::is_integral_v<int> == true &&
     std::is_integral_v<const int> == true &&
     std::is_integral_v<bool> == true &&
     std::is_integral_v<char> == true
 );
  
 class A {};
 static_assert(std::is_integral_v<A> == false);
  
 struct B { int x:4; };
 static_assert(std::is_integral_v<B> == false);
 using BF = decltype(B::x); // bit-field's type
 static_assert(std::is_integral_v<BF> == true);
  
 enum E : int {};
 static_assert(std::is_integral_v<E> == false);
  
 template <class T>
 constexpr T same(T i)
 {
     static_assert(std::is_integral<T>::value, "Integral required.");
     return i;
 }
 static_assert(same('"') == 042);
  
 int main() {}

.SH See also

   integral          specifies that a type is an integral type
   (C++20)           (concept) 
   is_integer        identifies integer types
   \fB[static]\fP          \fI(public static member constant of std::numeric_limits<T>)\fP 
   is_floating_point checks if a type is a floating-point type
   \fI(C++11)\fP           \fI(class template)\fP 
   is_arithmetic     checks if a type is an arithmetic type
   \fI(C++11)\fP           \fI(class template)\fP 
   is_enum           checks if a type is an enumeration type
   \fI(C++11)\fP           \fI(class template)\fP 
