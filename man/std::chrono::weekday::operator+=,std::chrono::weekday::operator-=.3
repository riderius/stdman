.TH std::chrono::weekday::operator+=,std::chrono::weekday::operator-= 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::chrono::weekday::operator+=,std::chrono::weekday::operator-= \- std::chrono::weekday::operator+=,std::chrono::weekday::operator-=

.SH Synopsis
   constexpr std::chrono::weekday& operator+=( const                  \fB(1)\fP \fI(since C++20)\fP
   std::chrono::days& d ) noexcept;
   constexpr std::chrono::weekday& operator-=( const                  \fB(2)\fP \fI(since C++20)\fP
   std::chrono::days& d ) noexcept;

   Adds or subtracts d.count() from the weekday value, reducing the result modulo 7 to
   an integer in the range [0, 6].

   1) Performs *this = *this + d;.
   2) Performs *this = *this - d;.

.SH Return value

   A reference to this weekday after modification.

.SH Notes

   After a call to one of these functions, ok() is always true if no overflow occurred
   during the operation.

.SH Example

   
// Run this code

 #include <chrono>
 #include <iostream>
  
 int main()
 {
     std::cout << std::boolalpha;
  
     std::chrono::weekday wd{5}; // Friday is 5
     wd += std::chrono::days(2);
     std::cout << (wd == std::chrono::weekday(0)) << ' '
               << (wd == std::chrono::Sunday) << ' ';
  
     wd -= std::chrono::days(3);
     std::cout << (wd == std::chrono::weekday(4)) << ' '
               << (wd == std::chrono::Thursday) << ' ';
  
     wd = std::chrono::Wednesday;
     wd += std::chrono::days{8}; // ((3 += 8 == 11) % 7) == 4;
     std::cout << (wd == std::chrono::Thursday) << ' ';
  
     wd -= (std::chrono::Sunday - std::chrono::Tuesday); // -= -2
     // (4 -= -2) == 6
     std::cout << (wd == std::chrono::Saturday) << '\\n';
 }

.SH Output:

 true true true true true true

.SH See also

   operator++
   operator++(int) increments or decrements the weekday
   operator--      \fI(public member function)\fP 
   operator--(int)
   operator+       performs arithmetic on weekdays
   operator-       \fI(function)\fP 
   (C++20)
