.TH std::deque 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::deque \- std::deque

.SH Synopsis
   Defined in header <deque>
   template<

       class T,                                                       \fB(1)\fP
       class Allocator = std::allocator<T>

   > class deque;
   namespace pmr {

       template< class T >
       using deque = std::deque<T,                                    \fB(2)\fP \fI(since C++17)\fP
   std::pmr::polymorphic_allocator<T>>;

   }

   std::deque (double-ended queue) is an indexed sequence container that allows fast
   insertion and deletion at both its beginning and its end. In addition, insertion and
   deletion at either end of a deque never invalidates pointers or references to the
   rest of the elements.

   As opposed to std::vector, the elements of a deque are not stored contiguously:
   typical implementations use a sequence of individually allocated fixed-size arrays,
   with additional bookkeeping, which means indexed access to deque must perform two
   pointer dereferences, compared to vector's indexed access which performs only one.

   The storage of a deque is automatically expanded and contracted as needed. Expansion
   of a deque is cheaper than the expansion of a std::vector because it does not
   involve copying of the existing elements to a new memory location. On the other
   hand, deques typically have large minimal memory cost; a deque holding just one
   element has to allocate its full internal array (e.g. 8 times the object size on
   64-bit libstdc++; 16 times the object size or 4096 bytes, whichever is larger, on
   64-bit libc++).

   The complexity (efficiency) of common operations on deques is as follows:

     * Random access - constant O(1).
     * Insertion or removal of elements at the end or beginning - constant O(1).
     * Insertion or removal of elements - linear O(n).

   std::deque meets the requirements of Container, AllocatorAwareContainer,
   SequenceContainer and ReversibleContainer.

.SH Template parameters

               The type of the elements.

               T must meet the requirements of CopyAssignable and         \fI(until C++11)\fP
               CopyConstructible.
               The requirements that are imposed on the elements depend
   T         - on the actual operations performed on the container.
               Generally, it is required that element type is a complete  \fI(since C++11)\fP
               type and meets the requirements of Erasable, but many
               member functions impose stricter requirements.

               
               An allocator that is used to acquire/release memory and to
               construct/destroy the elements in that memory. The type must meet the
               requirements of Allocator.
   Allocator - The behavior is undefined
               \fI(until C++20)\fP
               The program is ill-formed
               \fI(since C++20)\fP if Allocator::value_type is not the same as T.

   Iterator invalidation

    This section is incomplete
    Reason: There are still a few inaccuracies in this section, refer to individual
    member function pages for more detail

            Operations                                Invalidated
   All read only operations.     Never.
   swap, std::swap               The past-the-end iterator may be invalidated
                                 (implementation defined).
   shrink_to_fit, clear, insert,
   emplace, push_front,          Always.
   push_back, emplace_front,
   emplace_back
                                 If erasing at begin - only erased elements.

                                 If erasing at end - only erased elements and the
                                 past-the-end iterator.
                                 Otherwise - all iterators are invalidated.

                                 It is unspecified when the past-the-end iterator is
   erase                         invalidated.
                                 \fI(until C++11)\fP

                                 The past-the-end iterator is also invalidated unless
                                 the erased
                                 elements are at the beginning of the container and the
                                 last element is not erased.
                                 \fI(since C++11)\fP
                                 If the new size is smaller than the old one - only
                                 erased elements and the
                                 past-the-end iterator.
   resize
                                 If the new size is bigger than the old one - all
                                 iterators are invalidated.
                                 Otherwise - none iterators are invalidated.
                                 To the element erased.

                                 The past-the-end iterator
   pop_front, pop_back           may be invalidated (implementation defined)
                                 \fI(until C++11)\fP
                                 is also invalidated.
                                 \fI(since C++11)\fP

     Invalidation notes

     * When inserting at either end of the deque, references are not invalidated by
       insert and emplace.
     * push_front, push_back, emplace_front and emplace_back do not invalidate any
       references to elements of the deque.
     * When erasing at either end of the deque, references to non-erased elements are
       not invalidated by erase, pop_front and pop_back.
     * A call to resize with a smaller size does not invalidate any references to
       non-erased elements.
     * A call to resize with a bigger size does not invalidate any references to
       elements of the deque.

.SH Member types

   Member type            Definition
   value_type             T
   allocator_type         Allocator
   size_type              Unsigned integer type (usually std::size_t)
   difference_type        Signed integer type (usually std::ptrdiff_t)
   reference              value_type&
   const_reference        const value_type&
                          Allocator::pointer                        \fI(until C++11)\fP
   pointer                std::allocator_traits<Allocator>::pointer \fI(since C++11)\fP

                          
                          Allocator::const_pointer                        \fI(until C++11)\fP
   const_pointer          std::allocator_traits<Allocator>::const_pointer \fI(since C++11)\fP

                          
   iterator               LegacyRandomAccessIterator to value_type
   const_iterator         LegacyRandomAccessIterator to const value_type
   reverse_iterator       std::reverse_iterator<iterator>
   const_reverse_iterator std::reverse_iterator<const_iterator>

.SH Member functions

   constructor   constructs the deque
                 \fI(public member function)\fP 
   destructor    destructs the deque
                 \fI(public member function)\fP 
   operator=     assigns values to the container
                 \fI(public member function)\fP 
   assign        assigns values to the container
                 \fI(public member function)\fP 
   assign_range  assigns a range of values to the container
   (C++23)       \fI(public member function)\fP 
   get_allocator returns the associated allocator
                 \fI(public member function)\fP 
.SH Element access
   at            access specified element with bounds checking
                 \fI(public member function)\fP 
   operator[]    access specified element
                 \fI(public member function)\fP 
   front         access the first element
                 \fI(public member function)\fP 
   back          access the last element
                 \fI(public member function)\fP 
.SH Iterators
   begin         returns an iterator to the beginning
   cbegin        \fI(public member function)\fP 
   \fI(C++11)\fP
   end           returns an iterator to the end
   cend          \fI(public member function)\fP 
   \fI(C++11)\fP
   rbegin        returns a reverse iterator to the beginning
   crbegin       \fI(public member function)\fP 
   \fI(C++11)\fP
   rend          returns a reverse iterator to the end
   crend         \fI(public member function)\fP 
   \fI(C++11)\fP
.SH Capacity
   empty         checks whether the container is empty
                 \fI(public member function)\fP 
   size          returns the number of elements
                 \fI(public member function)\fP 
   max_size      returns the maximum possible number of elements
                 \fI(public member function)\fP 
   shrink_to_fit reduces memory usage by freeing unused memory
   (DR*)         \fI(public member function)\fP 
.SH Modifiers
   clear         clears the contents
                 \fI(public member function)\fP 
   insert        inserts elements
                 \fI(public member function)\fP 
   insert_range  inserts a range of elements
   (C++23)       \fI(public member function)\fP 
   emplace       constructs element in-place
   \fI(C++11)\fP       \fI(public member function)\fP 
   erase         erases elements
                 \fI(public member function)\fP 
   push_back     adds an element to the end
                 \fI(public member function)\fP 
   emplace_back  constructs an element in-place at the end
   \fI(C++11)\fP       \fI(public member function)\fP 
   append_range  adds a range of elements to the end
   (C++23)       \fI(public member function)\fP 
   pop_back      removes the last element
                 \fI(public member function)\fP 
   push_front    inserts an element to the beginning
                 \fI(public member function)\fP 
   emplace_front constructs an element in-place at the beginning
   \fI(C++11)\fP       \fI(public member function)\fP 
   prepend_range adds a range of elements to the beginning
   (C++23)       \fI(public member function)\fP 
   pop_front     removes the first element
                 \fI(public member function)\fP 
   resize        changes the number of elements stored
                 \fI(public member function)\fP 
   swap          swaps the contents
                 \fI(public member function)\fP 

.SH Non-member functions

   operator==
   operator!=
   operator<
   operator<=
   operator>
   operator>=            lexicographically compares the values of two deques
   operator<=>           \fI(function template)\fP 
   (removed in C++20)
   (removed in C++20)
   (removed in C++20)
   (removed in C++20)
   (removed in C++20)
   (C++20)
   std::swap(std::deque) specializes the std::swap algorithm
                         \fI(function template)\fP 
   erase(std::deque)     erases all elements satisfying specific criteria
   erase_if(std::deque)  \fI(function template)\fP 
   (C++20)

     Deduction guides \fI(since C++17)\fP

.SH Notes

       Feature-test macro       Value    Std                   Feature
   __cpp_lib_containers_ranges 202202L (C++23) Ranges construction and insertion for
                                               containers

.SH Example

   
// Run this code

 #include <deque>
 #include <iostream>
  
 int main()
 {
     // Create a deque containing integers
     std::deque<int> d = {7, 5, 16, 8};
  
     // Add an integer to the beginning and end of the deque
     d.push_front(13);
     d.push_back(25);
  
     // Iterate and print values of deque
     for (int n : d)
         std::cout << n << ' ';
     std::cout << '\\n';
 }

.SH Output:

 13 7 5 16 8 25

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

     DR    Applied to            Behavior as published              Correct behavior
                      T was not required to be CopyConstructible  T is also required to
   LWG 230 C++98      (an element of type T might not be able to  be CopyConstructible
                      be constructed)

.SH See also

   queue adapts a container to provide queue (FIFO data structure)
         \fI(class template)\fP 

.SH Category:
     * Todo with reason
