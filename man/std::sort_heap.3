.TH std::sort_heap 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::sort_heap \- std::sort_heap

.SH Synopsis
   Defined in header <algorithm>
   template< class RandomIt >                               \fB(1)\fP (constexpr since C++20)
   void sort_heap( RandomIt first, RandomIt last );
   template< class RandomIt, class Compare >
   void sort_heap( RandomIt first, RandomIt last, Compare   \fB(2)\fP (constexpr since C++20)
   comp );

   Converts the heap [first, last) into a sorted range. The heap property is no longer
   maintained.

   1) The heap is with respect to
   operator<
   \fI(until C++20)\fP
   std::less{}
   \fI(since C++20)\fP, and will be sorted with respect to
   operator<
   \fI(until C++20)\fP
   std::less{}
   \fI(since C++20)\fP.
   2) The heap is with respect to comp, and will be sorted with respect to comp.

   If any of the following conditions is satisfied, the behavior is undefined:

     * [first, last) is not a heap.

     * The type of *first is not Swappable.           \fI(until C++11)\fP
     * RandomIt is not ValueSwappable.
     * The type of *first is not MoveConstructible.   \fI(since C++11)\fP
     * The type of *first is not MoveAssignable.

.SH Parameters

   first, last -  the heap to be sorted
                  comparison function object (i.e. an object that satisfies the
                  requirements of Compare) which returns true if the first argument is
                  less than the second.

                  The signature of the comparison function should be equivalent to the
                  following:

                  bool cmp(const Type1& a, const Type2& b);
   comp        -
                  While the signature does not need to have const&, the function must
                  not modify the objects passed to it and must be able to accept all
                  values of type (possibly const) Type1 and Type2 regardless of value
                  category (thus, Type1& is not allowed
                  , nor is Type1 unless for Type1 a move is equivalent to a copy
                  \fI(since C++11)\fP).
                  The types Type1 and Type2 must be such that an object of type
                  RandomIt can be dereferenced and then implicitly converted to both of
                  them.
.SH Type requirements
   -
   RandomIt must meet the requirements of LegacyRandomAccessIterator.
   -
   Compare must meet the requirements of Compare.

.SH Complexity

   Given \\(\\scriptsize N\\)N as std::distance(first, last):

   1) At most \\(\\scriptsize 2N \\cdot \\log(N)\\)2N⋅log(N) comparisons using
   operator<
   \fI(until C++20)\fP
   std::less{}
   \fI(since C++20)\fP.
   2) At most \\(\\scriptsize 2N \\cdot \\log(N)\\)2N⋅log(N) applications of the comparison
   function comp.

.SH Possible implementation

                          sort_heap \fB(1)\fP
   template<class RandomIt>
   void sort_heap(RandomIt first, RandomIt last)
   {
       while (first != last)
           std::pop_heap(first, last--);
   }
                          sort_heap \fB(2)\fP
   template<class RandomIt, class Compare>
   void sort_heap(RandomIt first, RandomIt last, Compare comp)
   {
       while (first != last)
           std::pop_heap(first, last--, comp);
   }

.SH Example

   
// Run this code

 #include <algorithm>
 #include <iostream>
 #include <string_view>
 #include <vector>
  
 void println(std::string_view fmt, const auto& v)
 {
     for (std::cout << fmt; const auto &i : v)
         std::cout << i << ' ';
     std::cout << '\\n';
 }
  
 int main()
 {
     std::vector<int> v{3, 1, 4, 1, 5, 9};
  
     std::make_heap(v.begin(), v.end());
     println("after make_heap, v: ", v);
  
     std::sort_heap(v.begin(), v.end());
     println("after sort_heap, v: ", v);
 }

.SH Output:

 after make_heap, v: 9 4 5 1 1 3
 after sort_heap, v: 1 1 3 4 5 9

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to       Behavior as published              Correct behavior
                       at most \\(\\scriptsize N \\cdot      increased to \\(\\scriptsize 2N
   LWG 2444 C++98      \\log(N)\\)N⋅log(N) comparisons were \\cdot \\log(N)\\)2N⋅log(N)
                       allowed

.SH See also

   is_heap           checks if the given range is a max heap
   \fI(C++11)\fP           \fI(function template)\fP 
   is_heap_until     finds the largest subrange that is a max heap
   \fI(C++11)\fP           \fI(function template)\fP 
   make_heap         creates a max heap out of a range of elements
                     \fI(function template)\fP 
   pop_heap          removes the largest element from a max heap
                     \fI(function template)\fP 
   push_heap         adds an element to a max heap
                     \fI(function template)\fP 
   ranges::sort_heap turns a max heap into a range of elements sorted in ascending
   (C++20)           order
                     (niebloid)
