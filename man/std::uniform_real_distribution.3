.TH std::uniform_real_distribution 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::uniform_real_distribution \- std::uniform_real_distribution

.SH Synopsis
   Defined in header <random>
   template< class RealType = double >  \fI(since C++11)\fP
   class uniform_real_distribution;

   Produces random floating-point values \\(\\small x\\)x, uniformly distributed on the
   interval \\(\\small [a, b)\\)[a, b), that is, distributed according to the probability
   density function:

   \\({\\small P(x|a,b) =} \\frac{1}{b-a}\\)P(x|a,b) =

   1
   b − a

   .

   std::uniform_real_distribution satisfies all requirements of
   RandomNumberDistribution.

.SH Template parameters

   RealType - The result type generated by the generator. The effect is undefined if
              this is not one of float, double, or long double.

.SH Member types

   Member type        Definition
   result_type\fI(C++11)\fP RealType
   param_type \fI(C++11)\fP the type of the parameter set, see RandomNumberDistribution.

.SH Member functions

   constructor   constructs new distribution
   \fI(C++11)\fP       \fI(public member function)\fP 
   reset         resets the internal state of the distribution
   \fI(C++11)\fP       \fI(public member function)\fP 
.SH Generation
   operator()    generates the next random number in the distribution
   \fI(C++11)\fP       \fI(public member function)\fP 
.SH Characteristics
   a             returns the distribution parameters
   b             \fI(public member function)\fP 
   \fI(C++11)\fP
   param         gets or sets the distribution parameter object
   \fI(C++11)\fP       \fI(public member function)\fP 
   min           returns the minimum potentially generated value
   \fI(C++11)\fP       \fI(public member function)\fP 
   max           returns the maximum potentially generated value
   \fI(C++11)\fP       \fI(public member function)\fP 

.SH Non-member functions

   operator==
   operator!=                compares two distribution objects
   \fI(C++11)\fP                   \fI(function)\fP 
   \fI(C++11)\fP(removed in C++20)
   operator<<                performs stream input and output on pseudo-random number
   operator>>                distribution
   \fI(C++11)\fP                   \fI(function template)\fP 

.SH Notes

   It is difficult to create a distribution over the closed interval \\(\\small[a,
   b]\\)[a, b] from this distribution. Using std::nextafter(b,
   std::numeric_limits<RealType>::max()) as the second parameter does not always work
   due to rounding error.

   Most existing implementations have a bug where they may occasionally return \\(\\small
   b\\)b (GCC #63176 LLVM #18767 MSVC STL #1074). This was originally only thought to
   happen when RealType is float and when LWG issue 2524 is present, but it has since
   been shown that neither is required to trigger the bug.

.SH Example

   Print 10 random numbers between 1 and 2.

   
// Run this code

 #include <iostream>
 #include <random>
  
 int main()
 {
     std::random_device rd;  // Will be used to obtain a seed for the random number engine
     std::mt19937 gen(rd()); // Standard mersenne_twister_engine seeded with rd()
     std::uniform_real_distribution<> dis(1.0, 2.0);
     for (int n = 0; n < 10; ++n)
         // Use dis to transform the random unsigned int generated by gen into a
         // double in [1, 2). Each call to dis(gen) generates a new random double.
         std::cout << dis(gen) << ' ';
     std::cout << '\\n';
 }

.SH Possible output:

 1.80829 1.15391 1.18483 1.38969 1.36094 1.0648 1.97798 1.27984 1.68261 1.57326

.SH External links

   Drawing random floating-point numbers from an interval — © 2022. Frédéric Goualard,
   Université de Nantes.
