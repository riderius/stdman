.TH std::make_unsigned 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::make_unsigned \- std::make_unsigned

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct make_unsigned;

   If T is an integral (except bool) or enumeration type, provides the member typedef
   type which is the unsigned integer type corresponding to T, with the same
   cv-qualifiers.

   If T is signed or unsigned char, short, int, long, long long; the unsigned type from
   this list corresponding to T is provided.

   If T is an enumeration type or char, wchar_t
   , char8_t
   \fI(since C++20)\fP, char16_t, char32_t; the unsigned integer type with the smallest rank
   having the same sizeof as T is provided.

   Otherwise, the behavior is undefined. \fI(until C++20)\fP
   Otherwise, the program is ill-formed. \fI(since C++20)\fP

   If the program adds specializations for std::make_unsigned, the behavior is
   undefined.

.SH Member types

   Name Definition
   type the unsigned integer type corresponding to T

.SH Helper types

   template< class T >                                       \fI(since C++14)\fP
   using make_unsigned_t = typename make_unsigned<T>::type;

.SH Example

   
// Run this code

 #include <type_traits>
  
 int main()
 {
     using uchar_type = std::make_unsigned_t<char>;
     using uint_type  = std::make_unsigned_t<int>;
     using ulong_type = std::make_unsigned_t<volatile long>;
  
     static_assert(
         std::is_same_v<uchar_type, unsigned char> and
         std::is_same_v<uint_type, unsigned int> and
         std::is_same_v<ulong_type, volatile unsigned long>
     );
 }

.SH See also

   is_signed   checks if a type is a signed arithmetic type
   \fI(C++11)\fP     \fI(class template)\fP 
   is_unsigned checks if a type is an unsigned arithmetic type
   \fI(C++11)\fP     \fI(class template)\fP 
   make_signed makes the given integral type signed
   \fI(C++11)\fP     \fI(class template)\fP 
