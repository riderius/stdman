.TH std::array::swap 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::array::swap \- std::array::swap

.SH Synopsis
   void swap( array& other ) noexcept(/* see below */);  \fI(since C++11)\fP
                                                         (constexpr since C++20)

   Exchanges the contents of the container with those of other. Does not cause
   iterators and references to associate with the other container.

.SH Parameters

   other - container to exchange the contents with

.SH Return value

   \fI(none)\fP

.SH Exceptions

   noexcept specification:  
   noexcept(noexcept(swap(std::declval<T&>(), std::declval<T&>())))
                                                                          \fI(until C++17)\fP
   In the expression above, the identifier swap is looked up in the same
   manner as the one used by the C++17 std::is_nothrow_swappable trait.
   noexcept specification:                                                \fI(since C++17)\fP
   noexcept(std::is_nothrow_swappable_v<T>)

   For zero-sized arrays,
   noexcept specification:  
   noexcept
     

.SH Complexity

   Linear in size of the container.

.SH Example

   
// Run this code

 #include <array>
 #include <iostream>
  
 template<class Os, class V> Os& operator<<(Os& os, const V& v)
 {
     os << '{';
     for (auto i : v)
         os << ' ' << i;
     return os << " } ";
 }
  
 int main()
 {
     std::array<int, 3> a1{1, 2, 3}, a2{4, 5, 6};
  
     auto it1 = a1.begin();
     auto it2 = a2.begin();
     int& ref1 = a1[1];
     int& ref2 = a2[1];
  
     std::cout << a1 << a2 << *it1 << ' ' << *it2 << ' ' << ref1 << ' ' << ref2 << '\\n';
     a1.swap(a2);
     std::cout << a1 << a2 << *it1 << ' ' << *it2 << ' ' << ref1 << ' ' << ref2 << '\\n';
  
     // Note that after swap iterators and references stay associated with their original
     // array, e.g. `it1` still points to element a1[0], `ref1` still refers to a1[1].
 }

.SH Output:

 { 1 2 3 } { 4 5 6 } 1 4 2 5
 { 4 5 6 } { 1 2 3 } 4 1 5 2

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to          Behavior as published           Correct behavior
   LWG 2456 C++11      the noexcept specification is ill-formed made to work

.SH See also

   std::swap(std::array) specializes the std::swap algorithm
   \fI(C++11)\fP               \fI(function template)\fP 

.SH Categories:
     * conditionally noexcept
     * unconditionally noexcept
