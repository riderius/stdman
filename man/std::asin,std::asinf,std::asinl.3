.TH std::asin,std::asinf,std::asinl 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::asin,std::asinf,std::asinl \- std::asin,std::asinf,std::asinl

.SH Synopsis
   Defined in header <cmath>
   float       asin ( float num );

   double      asin ( double num );                            (until C++23)

   long double asin ( long double num );
   /* floating-point-type */                                   (since C++23)
               asin ( /* floating-point-type */ num );         (constexpr since C++26)
   float       asinf( float num );                     \fB(1)\fP \fB(2)\fP \fI(since C++11)\fP
                                                               (constexpr since C++26)
   long double asinl( long double num );                   \fB(3)\fP \fI(since C++11)\fP
                                                               (constexpr since C++26)
   Additional overloads \fI(since C++11)\fP
   Defined in header <cmath>
   template< class Integer >                               (A) (constexpr since C++26)
   double      asin ( Integer num );

   1-3) Computes the principal value of the arc sine of num.
   The library provides overloads of std::asin for all cv-unqualified floating-point
   types as the type of the parameter.
   (since C++23)

   A) Additional overloads are provided for all integer types, which are  \fI(since C++11)\fP
   treated as double.

.SH Parameters

   num - floating-point or integer value

.SH Return value

   If no errors occur, the arc sine of num (arcsin(num)) in the range [-

   π
   2

   , +

   π
   2

   ], is returned.

   If a domain error occurs, an implementation-defined value is returned (NaN where
   supported).

   If a range error occurs due to underflow, the correct result (after rounding) is
   returned.

.SH Error handling

   Errors are reported as specified in math_errhandling.

   Domain error occurs if num is outside the range [-1.0, 1.0].

   If the implementation supports IEEE floating-point arithmetic (IEC 60559),

     * If the argument is ±0, it is returned unmodified.
     * If |num| > 1, a domain error occurs and NaN is returned.
     * if the argument is NaN, NaN is returned.

.SH Notes

   The additional overloads are not required to be provided exactly as (A). They only
   need to be sufficient to ensure that for their argument num of integer type,
   std::asin(num) has the same effect as std::asin(static_cast<double>(num)).

.SH Example

   
// Run this code

 #include <cerrno>
 #include <cfenv>
 #include <cmath>
 #include <cstring>
 #include <iostream>
  
 // #pragma STDC FENV_ACCESS ON
  
 int main()
 {
     std::cout << "asin(1.0) = " << asin(1) << '\\n'
               << "2*asin(1.0) = " << 2 * asin(1) << '\\n'
               << "asin(-0.5) = " << asin(-0.5) << '\\n'
               << "6*asin(-0.5) =" << 6 * asin(-0.5) << '\\n';
  
     // special values
     std::cout << "asin(0.0) = " << asin(0) << " asin(-0.0)=" << asin(-0.0) << '\\n';
  
     // error handling
     errno = 0;
     std::feclearexcept(FE_ALL_EXCEPT);
  
     std::cout << "asin(1.1) = " << asin(1.1) << '\\n';
  
     if (errno == EDOM)
         std::cout << "    errno == EDOM: " << std::strerror(errno) << '\\n';
     if (std::fetestexcept(FE_INVALID))
         std::cout << "    FE_INVALID raised" << '\\n';
 }

.SH Possible output:

 asin(1.0) = 1.5708
 2*asin(1.0) = 3.14159
 asin(-0.5) = -0.523599
 6*asin(-0.5) = -3.14159
 asin(0.0) = 0 asin(-0.0)=-0
 asin(1.1) = nan
     errno == EDOM: Numerical argument out of domain
     FE_INVALID raised

.SH See also

   acos
   acosf               computes arc cosine (\\({\\small\\arccos{x}}\\)arccos(x))
   acosl               \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   atan
   atanf               computes arc tangent (\\({\\small\\arctan{x}}\\)arctan(x))
   atanl               \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   atan2
   atan2f              arc tangent, using signs to determine quadrants
   atan2l              \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   sin
   sinf                computes sine (\\({\\small\\sin{x}}\\)sin(x))
   sinl                \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   asin(std::complex)  computes arc sine of a complex number
   \fI(C++11)\fP             (\\({\\small\\arcsin{z}}\\)arcsin(z))
                       \fI(function template)\fP 
   asin(std::valarray) applies the function std::asin to each element of valarray
                       \fI(function template)\fP 
   C documentation for
   asin
