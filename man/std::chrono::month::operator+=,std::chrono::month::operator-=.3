.TH std::chrono::month::operator+=,std::chrono::month::operator-= 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::chrono::month::operator+=,std::chrono::month::operator-= \- std::chrono::month::operator+=,std::chrono::month::operator-=

.SH Synopsis
   constexpr std::chrono::month& operator+=( const                    \fB(1)\fP \fI(since C++20)\fP
   std::chrono::months& m ) noexcept;
   constexpr std::chrono::month& operator-=( const                    \fB(2)\fP \fI(since C++20)\fP
   std::chrono::months& m ) noexcept;

   Adds or subtracts m.count() from the month value, reducing the result modulo 12 to
   an integer in the range [1, 12].

   1) Performs *this = *this + m;.
   2) Performs *this = *this - m;.

.SH Return value

   A reference to this month after modification.

.SH Notes

   After a call to one of these functions, ok() is always true if no overflow occurred
   during the operation.

.SH Example

   
// Run this code

 #include <chrono>
 #include <iostream>
  
 int main()
 {
     std::cout << std::boolalpha;
  
     std::chrono::month m{6};
     m += std::chrono::months(2);
     std::cout << (m == std::chrono::month(8)) << ' '
               << (m == std::chrono::August) << ' ';
  
     m -= std::chrono::months(3);
     std::cout << (m == std::chrono::month(5)) << ' '
               << (m == std::chrono::May) << ' ';
  
     m = std::chrono::October;
     m += std::chrono::months{8}; // ((10 += 8 == 18) % 12) == 6;
     std::cout << (m == std::chrono::June) << ' ';
  
     m -= std::chrono::months{std::chrono::December - std::chrono::February}; // -= 10
     // (6 -= 10) == -4; -4 % 12 == (12 - 4) == 8
     std::cout << (m == std::chrono::August) << '\\n';
 }

.SH Output:

 true true true true true true

.SH See also

   operator++
   operator++(int) increments or decrements the month
   operator--      \fI(public member function)\fP 
   operator--(int)
   operator+       performs arithmetic on months
   operator-       \fI(function)\fP 
   (C++20)
