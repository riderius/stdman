.TH std::less 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::less \- std::less

.SH Synopsis
   Defined in header <functional>
   template<>                      \fI(since C++14)\fP
   class less<void>;

   std::less<void> is a specialization of std::less with parameter and return type
   deduced.

.SH Member functions

   operator() tests if lhs compares less than rhs
              \fI(public member function)\fP

std::less<void>::operator()

   template< class T, class U >

   constexpr auto operator()( T&& lhs, U&& rhs ) const

       -> decltype(std::forward<T>(lhs) < std::forward<U>(rhs));

   Returns the result of std::forward<T>(lhs) < std::forward<U>(rhs).

.SH Parameters

   lhs, rhs - values to compare

.SH Return value

   std::forward<T>(lhs) < std::forward<U>(rhs).

   If a built-in operator comparing pointers is called, the result is consistent with
   the implementation-defined strict total order over pointers.

.SH Exceptions

   May throw implementation-defined exceptions.

.SH Example

   
// Run this code

 #include <algorithm>
 #include <functional>
  
 constexpr bool strictly_negative(int lhs)
 {
     return std::less<>()(lhs, 0);
 }
  
 int main()
 {
     constexpr signed low = 010;
     constexpr unsigned high = 10;
     std::less<> less{};
     static_assert(less(low, high));
  
     constexpr static auto arr = {0, -1, -2, -3, -4, -5};
     static_assert(!std::all_of(arr.begin(), arr.end(), strictly_negative));
     static_assert(std::all_of(arr.begin() + 1, arr.end(), strictly_negative));
 }

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to        Behavior as published              Correct behavior
   LWG 2562 C++98      the pointer total order might be     guaranteed to be consistent
                       inconsistent
