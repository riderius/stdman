.TH std::ranges::views::drop,std::ranges::drop_view 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::views::drop,std::ranges::drop_view \- std::ranges::views::drop,std::ranges::drop_view

.SH Synopsis
   Defined in header <ranges>
   template< ranges::view V >

   class drop_view                                                    \fB(1)\fP \fI(since C++20)\fP

       : public ranges::view_interface<drop_view<V>>
   namespace views {

       inline constexpr /* unspecified */ drop = /* unspecified */;   \fB(2)\fP \fI(since C++20)\fP

   }
   Call signature
   template< ranges::viewable_range R >

       requires /* see below */                                           \fI(since C++20)\fP
   constexpr ranges::view auto

       drop( R&& r, ranges::range_difference_t<R> count );
   template< class DifferenceType >
   constexpr /* range adaptor closure */ drop( DifferenceType&& count     \fI(since C++20)\fP
   );

   1) A range adaptor consisting of elements of the underlying sequence, skipping the
   first N elements.
   2) RangeAdaptorObject. Given T is std::remove_cvref_t<decltype((e))> and D is
   ranges::range_difference_t<decltype((e))>), the expression views::drop(e, f) is
   expression-equivalent to:
     * ((void)f, decay-copy(e)), if T is a ranges::empty_view, except that the
       evaluations of e and f are indeterminately sequenced;
     * otherwise, T(ranges::begin(e) + inc, ranges::end(e),
         /* to-unsigned-like */(ranges::distance(e) - inc)), if T is a specialization
       of ranges::subrange that models both random_access_range and sized_range, and T
       needs to store the size (see ranges::subrange::subrange for details), where inc
       is std::min<D>(ranges::distance(e), f);
     * otherwise, U(ranges::begin(e) + inc, ranges::end(e)), if T is a specialization
       of std::span, std::basic_string_view, ranges::iota_view, or ranges::subrange
       that models both random_access_range and sized_range, where U is

     * std::span<typename T::element_type>, if T is a specialization of std::span;
     * T otherwise;

     * otherwise, if T is a specialization of ranges::repeat_view:

     * views::repeat(*e.value_, ranges::distance(e) - inc), if T models   (since C++23)
       sized_range; in such case e is evaluated only once;
     * ((void)e, auto(f)) otherwise, except that the evaluations of e and
       f are indeterminately sequenced;

     * otherwise, drop_view(e, f).
   In all cases, decltype((f)) must model std::convertible_to<D>.

   drop_view models the concepts contiguous_range, random_access_range,
   bidirectional_range, forward_range, input_range, common_range, and sized_range when
   the underlying view V models respective concepts.

.SH Member functions

   constructor   constructs a drop_view
   (C++20)       \fI(public member function)\fP 
   base          returns a copy of the underlying (adapted) view
   (C++20)       \fI(public member function)\fP 
   begin         returns an iterator to the beginning
   (C++20)       \fI(public member function)\fP 
   end           returns an iterator or a sentinel to the end
   (C++20)       \fI(public member function)\fP 
   size          returns the number of elements. Provided only if the underlying
   (C++20)       (adapted) range satisfies sized_range.
                 \fI(public member function)\fP 
         Inherited from std::ranges::view_interface
   empty         returns whether the derived view is empty. Provided if it satisfies
   (C++20)       sized_range or forward_range.
                 \fI(public member function of std::ranges::view_interface<D>)\fP 
   cbegin        returns a constant iterator to the beginning of the range.
   (C++23)       \fI(public member function of std::ranges::view_interface<D>)\fP 
   cend          returns a sentinel for the constant iterator of the range.
   (C++23)       \fI(public member function of std::ranges::view_interface<D>)\fP 
   operator bool returns whether the derived view is not empty. Provided if
   (C++20)       ranges::empty is applicable to it.
                 \fI(public member function of std::ranges::view_interface<D>)\fP 
   data          gets the address of derived view's data. Provided if its iterator type
   (C++20)       satisfies contiguous_iterator.
                 \fI(public member function of std::ranges::view_interface<D>)\fP 
   front         returns the first element in the derived view. Provided if it
   (C++20)       satisfies forward_range.
                 \fI(public member function of std::ranges::view_interface<D>)\fP 
   back          returns the last element in the derived view. Provided if it satisfies
   (C++20)       bidirectional_range and common_range.
                 \fI(public member function of std::ranges::view_interface<D>)\fP 
   operator[]    returns the n^th element in the derived view. Provided if it satisfies
   (C++20)       random_access_range.
                 \fI(public member function of std::ranges::view_interface<D>)\fP 

   Deduction guides

   Helper templates

   template<class T>

   inline constexpr bool                                                  \fI(since C++20)\fP
   enable_borrowed_range<std::ranges::drop_view<T>> =

       std::ranges::enable_borrowed_range<T>;

   This specialization of std::ranges::enable_borrowed_range makes drop_view satisfy
   borrowed_range when the underlying view satisfies it.

.SH Example

   
// Run this code

 #include <iostream>
 #include <ranges>
  
 int main()
 {
     const auto nums = {1, 2, 3, 4, 5, 6, 7};
  
     std::cout << "drop " << 2 << ": ";
     for (int i : std::ranges::drop_view{nums, 2})
         std::cout << i << ' ';
     std::cout << '\\n';
  
     std::cout << "drop " << 3 << ": ";
     for (int i : nums | std::views::drop(3))
         std::cout << i << ' ';
     std::cout << '\\n';
  
     std::cout << "drop " << 4 << ": ";
     for (int i : std::views::iota(1, 8) | std::views::drop(4))
         std::cout << i << ' ';
     std::cout << '\\n';
  
     // Note that dropping more than the number of elements is OK:
     for (int dp : {5, 6, 7, 890, 100500})
     {
         std::cout << "drop " << dp << ": ";
         for (int i : std::views::iota(1, 8) | std::views::drop(dp))
             std::cout << i << ' ';
         std::cout << '\\n';
     }
 }

.SH Output:

 drop 2: 3 4 5 6 7
 drop 3: 4 5 6 7
 drop 4: 5 6 7
 drop 5: 6 7
 drop 6: 7
 drop 7:
 drop 890:
 drop 100500:

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to     Behavior as published              Correct behavior
                       views::drop sometimes fails to the construction is adjusted
   LWG 3407 C++20      construct a sized random       so that it is always valid
                       access range
   LWG 3494 C++20      drop_view was never a          it is a borrowed_range if its
                       borrowed_range                 underlying view is

.SH See also

   ranges::drop_while_view a view consisting of the elements of another view, skipping
   views::drop_while       the initial subsequence of elements until the first element
   (C++20)                 where the predicate returns false
                           \fI(class template)\fP (range adaptor object)
