.TH std::filesystem::path::generic_string,std::filesystem::path::generic_wstring, 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::filesystem::path::generic_string,std::filesystem::path::generic_wstring, \- std::filesystem::path::generic_string,std::filesystem::path::generic_wstring,

.SH Synopsis
                         std::filesystem::path::generic_u32string

   template< class CharT, class Traits =
   std::char_traits<CharT>,
                                                                   (since
             class Alloc = std::allocator<CharT> >             \fB(1)\fP C++17)
   std::basic_string<CharT,Traits,Alloc>

       generic_string( const Alloc& a = Alloc() ) const;
   std::string generic_string() const;
   std::wstring generic_wstring() const;
   std::u16string generic_u16string() const;
   std::u32string generic_u32string() const;
                                                               \fB(2)\fP (since       (since
   std::string generic_u8string() const;                           C++17)       C++17)
                                                                           \fB(3)\fP  (until
                                                                                C++20)
   std::u8string generic_u8string() const;                                      (since
                                                                                C++20)

   Returns the internal pathname in generic pathname format, converted to specific
   string type. Conversion, if any, is specified as follows:

   
     * If path::value_type is char, conversion, if any, is system-dependent. This is
       the case on typical POSIX systems (such as Linux), where native encoding is
       UTF-8 and string() performs no conversion.
     * Otherwise, if path::value_type is wchar_t, conversion, if any, is unspecified.
       This is the case on Windows, where wchar_t is 16 bit and the native encoding is
       UTF-16.
     * Otherwise, if path::value_type is char16_t, native encoding is UTF-16 and the
       conversion method is unspecified.
     * Otherwise, if path::value_type is char32_t, native encoding is UTF-32 and the
       conversion method is unspecified.
     * Otherwise, if path::value_type is char8_t, native encoding is UTF-8 and the
       conversion method is unspecified.

   The / character is used as the directory separator.

   1) All memory allocations are performed by a.
   3) The result encoding in the case of u8string() is always UTF-8.

.SH Parameters

   a        -        allocator to construct the string with
.SH Type requirements
   -
   CharT must be one of the encoded character types (char, wchar_t
   , char8_t
   \fI(since C++20)\fP, char16_t and char32_t).

.SH Return value

   The internal pathname in generic pathname format, converted to specified string
   type.

.SH Exceptions

   May throw implementation-defined exceptions.

.SH Example

   
// Run this code

 #include <cstddef>
 #include <filesystem>
 #include <iomanip>
 #include <iostream>
 #include <span>
 #include <string_view>
  
 void print(std::string_view rem, auto const& str)
 {
     std::cout << rem << std::hex << std::uppercase << std::setfill('0');
     for (const auto b : std::as_bytes(std::span{str}))
         std::cout << std::setw(2) << std::to_integer<unsigned>(b) << ' ';
     std::cout << '\\n';
 }
  
 int main()
 {
     std::filesystem::path p{"/家/屋"};
     std::cout << p << '\\n';
  
     print("string    : ", p.generic_string());
     print("u8string  : ", p.generic_u8string());
     print("u16string : ", p.generic_u16string());
     print("u32string : ", p.generic_u32string());
     print("wstring   : ", p.generic_wstring());
 }

.SH Possible output:

 "/家/屋"
 string    : 2F E5 AE B6 2F E5 B1 8B
 u8string  : 2F E5 AE B6 2F E5 B1 8B
 u16string : 2F 00 B6 5B 2F 00 4B 5C
 u32string : 2F 00 00 00 B6 5B 00 00 2F 00 00 00 4B 5C 00 00
 wstring   : 2F 00 00 00 B6 5B 00 00 2F 00 00 00 4B 5C 00 00

.SH See also

   string
   wstring   returns the path in native pathname format converted to a string
   u8string  \fI(public member function)\fP 
   u16string
   u32string

.SH Category:
     * Uses of dcl rev begin with nonempty note
