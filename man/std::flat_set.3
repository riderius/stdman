.TH std::flat_set 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::flat_set \- std::flat_set

.SH Synopsis
   Defined in header <flat_set>
   template<

       class Key,
       class Compare = std::less<Key>,        (since C++23)
       class KeyContainer = std::vector<Key>

   > class flat_set;

   The flat set is a container adaptor that gives the functionality of an associative
   container that stores a sorted set of unique objects of type Key. Sorting is done
   using the key comparison function Compare.

   The class template flat_set acts as a wrapper to the underlying sorted container
   passed as object of type KeyContainer.

   Everywhere the standard library uses the Compare requirements, uniqueness is
   determined by using the equivalence relation. Informally, two objects a and b are
   considered equivalent if neither compares less than the other: !comp(a, b) &&
   !comp(b, a).

   std::flat_set meets the requirements of Container, ReversibleContainer, optional
   container requirements, and all requirements of AssociativeContainer (including
   logarithmic search complexity), except that:

     * requirements related to nodes are not applicable,
     * iterator invalidation requirements differ,
     * the complexity of insertion and erasure operations is linear.

   A flat set supports most AssociativeContainer's operations that use unique keys.

.SH Template parameters

   Key          - The type of the stored elements. The program is ill-formed if Key is
                  not the same type as KeyContainer::value_type.
   Compare      - A Compare type providing a strict weak ordering.
                  The type of the underlying SequenceContainer to store the elements.
                  The iterators of such container should satisfy
   KeyContainer - LegacyRandomAccessIterator or model random_access_iterator.

                  The standard containers std::vector and std::deque satisfy these
                  requirements.

.SH Member types

   Member type            Definition
   container_type         KeyContainer
   key_type               Key
   value_type             Key
   key_compare            Compare
   value_compare          Compare
   reference              value_type&
   const_reference        const value_type&
   size_type              typename KeyContainer::size_type
   difference_type        typename KeyContainer::difference_type
   iterator               implementation-defined LegacyRandomAccessIterator and
                          random_access_iterator to value_type
   const_iterator         implementation-defined LegacyRandomAccessIterator and
                          random_access_iterator to const value_type
   reverse_iterator       std::reverse_iterator<iterator>
   const_reverse_iterator std::reverse_iterator<const_iterator>

.SH Member objects

   Member name       Definition
   c (private)       the underlying container of container_type
                     (exposition-only member object*)
   compare (private) the comparison function object of type key_compare
                     (exposition-only member object*)

.SH Member functions

   constructor           constructs the flat_set
                         \fI(public member function)\fP 
   destructor            destroys every element of the container adaptor
   (implicitly declared) \fI(public member function)\fP
   operator=             assigns values to the container adaptor
                         \fI(public member function)\fP 
.SH Iterators
   begin                 returns an iterator to the beginning
   cbegin                \fI(public member function)\fP 
   end                   returns an iterator to the end
   cend                  \fI(public member function)\fP 
   rbegin                returns a reverse iterator to the beginning
   crbegin               \fI(public member function)\fP 
   rend                  returns a reverse iterator to the end
   crend                 \fI(public member function)\fP 
.SH Capacity
   empty                 checks whether the container adaptor is empty
                         \fI(public member function)\fP 
   size                  returns the number of elements
                         \fI(public member function)\fP 
   max_size              returns the maximum possible number of elements
                         \fI(public member function)\fP 
.SH Modifiers
   emplace               constructs element in-place
                         \fI(public member function)\fP 
   emplace_hint          constructs elements in-place using a hint
                         \fI(public member function)\fP 
   insert                inserts elements
                         \fI(public member function)\fP 
   insert_range          inserts a range of elements
                         \fI(public member function)\fP 
   extract               extracts the underlying container
                         \fI(public member function)\fP 
   replace               replaces the underlying container
                         \fI(public member function)\fP 
   erase                 erases elements
                         \fI(public member function)\fP 
   swap                  swaps the contents
                         \fI(public member function)\fP 
   clear                 clears the contents
                         \fI(public member function)\fP 
.SH Lookup
   find                  finds element with specific key
                         \fI(public member function)\fP 
   count                 returns the number of elements matching specific key
                         \fI(public member function)\fP 
   contains              checks if the container contains element with specific key
                         \fI(public member function)\fP 
                         returns an iterator to the first element not less than the
   lower_bound           given key
                         \fI(public member function)\fP 
                         returns an iterator to the first element greater than the
   upper_bound           given key
                         \fI(public member function)\fP 
   equal_range           returns range of elements matching a specific key
                         \fI(public member function)\fP 
.SH Observers
   key_comp              returns the function that compares keys
                         \fI(public member function)\fP 
                         returns the function that compares keys in objects of type
   value_comp            value_type
                         \fI(public member function)\fP 

.SH Non-member functions

   operator==               lexicographically compares the values of two flat_sets
   operator<=>              \fI(function template)\fP 
   (C++23)
   std::swap(std::flat_set) specializes the std::swap algorithm
   (C++23)                  \fI(function template)\fP 
   erase_if(std::flat_set)  erases all elements satisfying specific criteria
   (C++23)                  \fI(function template)\fP 

.SH Helper classes

   std::uses_allocator<std::flat_set> specializes the std::uses_allocator type trait
   (C++23)                            \fI(class template specialization)\fP 

   Tags

   sorted_unique   indicates that elements of a range are sorted and unique
   sorted_unique_t (tag)
   (C++23)

   Deduction guides

.SH Notes

   The member types iterator and const_iterator may be aliases to the same type. This
   means defining a pair of function overloads using the two types as parameter types
   may violate the One Definition Rule. Since iterator is convertible to
   const_iterator, a single function with a const_iterator as parameter type will work
   instead.

   Some advantages of flat set over other standard container adaptors are:

     * Potentially faster lookup (even though search operations have logarithmic
       complexity).
     * Much faster iteration: random access iterators instead of bidirectional
       iterators.
     * Less memory consumption for small objects (and for big objects if
       KeyContainer::shrink_to_fit() is available).
     * Better cache performance (depending on KeyContainer, keys are stored in a
       contiguous block(s) of memory).

   Some disadvantages of flat set are:

     * Non-stable iterators (iterators are invalidated when inserting and erasing
       elements).
     * Non-copyable and non-movable type values can not be stored.
     * Weaker exception safety (copy/move constructors can throw when shifting values
       in erasures and insertions).
     * Slower (i.e. linear) insertion and erasure, especially for non-movable types.

   Feature-test macro  Value    Std                 Feature
   __cpp_lib_flat_set 202207L (C++23) std::flat_set and std::flat_multiset

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   flat_multiset adapts a container to provide a collection of keys, sorted by keys
   (C++23)       \fI(class template)\fP 
   set           collection of unique keys, sorted by keys
                 \fI(class template)\fP 
   unordered_set collection of unique keys, hashed by keys
   \fI(C++11)\fP       \fI(class template)\fP 

.SH Categories:
     * Todo without reason
     * Todo no example
