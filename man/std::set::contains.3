.TH std::set::contains 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::set::contains \- std::set::contains

.SH Synopsis
   bool contains( const Key& key ) const; \fB(1)\fP \fI(since C++20)\fP
   template< class K >                    \fB(2)\fP \fI(since C++20)\fP
   bool contains( const K& x ) const;

   1) Checks if there is an element with key equivalent to key in the container.
   2) Checks if there is an element with key that compares equivalent to the value x.
   This overload participates in overload resolution only if the qualified-id
   Compare::is_transparent is valid and denotes a type. It allows calling this function
   without constructing an instance of Key.

.SH Parameters

   key - key value of the element to search for
   x   - a value of any type that can be transparently compared with a key

.SH Return value

   true if there is such an element, otherwise false.

.SH Complexity

   Logarithmic in the size of the container.

.SH Example

   
// Run this code

 #include <iostream>
 #include <set>
  
 int main()
 {
     std::set<int> example{1, 2, 3, 4};
  
     for (int x : {2, 5})
         if (example.contains(x))
             std::cout << x << ": Found\\n";
         else
             std::cout << x << ": Not found\\n";
 }

.SH Output:

 2: Found
 5: Not found

.SH See also

   find        finds element with specific key
               \fI(public member function)\fP 
   count       returns the number of elements matching specific key
               \fI(public member function)\fP 
   equal_range returns range of elements matching a specific key
               \fI(public member function)\fP 
