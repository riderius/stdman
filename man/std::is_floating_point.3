.TH std::is_floating_point 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_floating_point \- std::is_floating_point

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_floating_point;

   std::is_floating_point is a UnaryTypeTrait.

   Checks whether T is a floating-point type. Provides the member constant value which
   is equal to true, if T is the type float, double, long double
   , or any extended floating-point types (std::float16_t, std::float32_t,
   std::float64_t, std::float128_t, or std::bfloat16_t)
   (since C++23), including any cv-qualified variants. Otherwise, value is equal to
   false.

   If the program adds specializations for std::is_floating_point or
   std::is_floating_point_v, the behavior is undefined.

.SH Template parameters

   T - a type to check

   Helper variable template

   template< class T >
   inline constexpr bool is_floating_point_v =                            \fI(since C++17)\fP
   is_floating_point<T>::value;

   

Inherited from std::integral_constant

.SH Member constants

   value    true if T is a floating-point type (possibly cv-qualified), false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Possible implementation

   template<class T>
   struct is_floating_point
        : std::integral_constant<
            bool,
            // Note: standard floating-point types
            std::is_same<float, typename std::remove_cv<T>::type>::value
            || std::is_same<double, typename std::remove_cv<T>::type>::value
            || std::is_same<long double, typename std::remove_cv<T>::type>::value
            // Note: extended floating-point types (C++23, if supported)
            || std::is_same<std::float16_t, typename std::remove_cv<T>::type>::value
            || std::is_same<std::float32_t, typename std::remove_cv<T>::type>::value
            || std::is_same<std::float64_t, typename std::remove_cv<T>::type>::value
            || std::is_same<std::float128_t, typename std::remove_cv<T>::type>::value
            || std::is_same<std::bfloat16_t, typename std::remove_cv<T>::type>::value
        > {};

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>
  
 class A {};
  
 int main()
 {
     std::cout << std::boolalpha;
     std::cout << "      A: " << std::is_floating_point<A>::value << '\\n';
     std::cout << "  float: " << std::is_floating_point<float>::value << '\\n';
     std::cout << " float&: " << std::is_floating_point<float&>::value << '\\n';
     std::cout << " double: " << std::is_floating_point<double>::value << '\\n';
     std::cout << "double&: " << std::is_floating_point<double&>::value << '\\n';
     std::cout << "    int: " << std::is_floating_point<int>::value << '\\n';
 }

.SH Output:

       A: false
   float: true
  float&: false
  double: true
 double&: false
     int: false

.SH See also

   is_iec559      identifies the IEC 559/IEEE 754 floating-point types
   \fB[static]\fP       \fI(public static member constant of std::numeric_limits<T>)\fP 
   is_integral    checks if a type is an integral type
   \fI(C++11)\fP        \fI(class template)\fP 
   is_arithmetic  checks if a type is an arithmetic type
   \fI(C++11)\fP        \fI(class template)\fP 
   floating_point specifies that a type is a floating-point type
   (C++20)        (concept) 
