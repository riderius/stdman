.TH std::chrono::weekday::operator++,std::chrono::weekday::operator-- 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::chrono::weekday::operator++,std::chrono::weekday::operator-- \- std::chrono::weekday::operator++,std::chrono::weekday::operator--

.SH Synopsis
   constexpr std::chrono::weekday& operator++() noexcept;     \fB(1)\fP \fI(since C++20)\fP
   constexpr std::chrono::weekday operator++( int ) noexcept; \fB(2)\fP \fI(since C++20)\fP
   constexpr std::chrono::weekday& operator--() noexcept;     \fB(3)\fP \fI(since C++20)\fP
   constexpr std::chrono::weekday operator--( int ) noexcept; \fB(4)\fP \fI(since C++20)\fP

   Adds or subtracts 1 from the weekday value, reducing the result modulo 7 to an
   integer in the range [0, 6].

   1,2) Performs *this += std::chrono::days{1};.
   3,4) Performs *this -= std::chrono::days{1};.

.SH Parameters

   \fI(none)\fP

.SH Return value

   1,3) A reference to this weekday after modification.
   2,4) A copy of the weekday made before modification.

.SH Notes

   After a call to one of these functions, ok() is always true.

.SH Example

   
// Run this code

 #include <cassert>
 #include <chrono>
 #include <iostream>
  
 int main()
 {
     std::cout << std::boolalpha;
  
     std::chrono::weekday wd{0}; // Sunday is 0 or 7
  
     --wd;
     std::cout << (wd == std::chrono::Saturday) << ' ';
  
     ++wd;
     std::cout << (wd == std::chrono::Sunday) << '\\n';
  
     wd = std::chrono::weekday{13};
     assert(!wd.ok());
     wd++;
     assert(wd.ok());
 }

.SH Output:

 true true

.SH See also

   operator+= adds or subtracts a number of days
   operator-= \fI(public member function)\fP 
   operator+  performs arithmetic on weekdays
   operator-  \fI(function)\fP 
   (C++20)
