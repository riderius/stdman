.TH std::list::append_range 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::list::append_range \- std::list::append_range

.SH Synopsis
   template< container-compatible-range<T> R >  (since C++23)
   void append_range( R&& rg );

   Inserts copies of elements from the range rg before end(), in non-reversing order.

   No iterators or references are invalidated.

   Each iterator in rg is dereferenced exactly once.

.SH Parameters

   rg   -  a container compatible range, that is, an input_range whose elements are
           convertible to T
.SH Type requirements
   -
   T must be EmplaceConstructible into list from *ranges::begin(rg). Otherwise, the
   behavior is undefined.

.SH Return value

   \fI(none)\fP

.SH Complexity

   Linear in size of rg. The number of calls to the constructor of T is exactly equal
   to the std::ranges::size(rg)).

.SH Exceptions

   If an exception is thrown for any reason, this function has no effect (strong
   exception safety guarantee).

.SH Notes

       Feature-test macro       Value    Std                   Feature
   __cpp_lib_containers_ranges 202202L (C++23) Ranges-aware construction and insertion

.SH Example

   
// Run this code

 #include <algorithm>
 #include <cassert>
 #include <list>
 #include <vector>
  
 int main()
 {
     auto head = std::list{1, 2, 3, 4};
     const auto tail = std::vector{-5, -6, -7};
 #ifdef __cpp_lib_containers_ranges
     head.append_range(tail);
 #else
     head.insert(head.end(), tail.cbegin(), tail.cend());
 #endif
     assert(std::ranges::equal(head, std::list{1, 2, 3, 4, -5, -6, -7}));
 }

.SH See also

   prepend_range adds a range of elements to the beginning
   (C++23)       \fI(public member function)\fP
   insert_range  inserts a range of elements
   (C++23)       \fI(public member function)\fP
   push_back     adds an element to the end
                 \fI(public member function)\fP
   emplace_back  constructs an element in-place at the end
   \fI(C++11)\fP       \fI(public member function)\fP
