.TH std::unordered_multimap::insert 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::unordered_multimap::insert \- std::unordered_multimap::insert

.SH Synopsis
   Defined in header <unordered_map>
   iterator insert( const value_type& value );                      \fB(1)\fP  \fI(since C++11)\fP
   iterator insert( value_type&& value );                           \fB(2)\fP  \fI(since C++17)\fP
   template< class P >                                              \fB(3)\fP  \fI(since C++11)\fP
   iterator insert( P&& value );
   iterator insert( const_iterator hint, const value_type& value ); \fB(4)\fP  \fI(since C++11)\fP
   iterator insert( const_iterator hint, value_type&& value );      \fB(5)\fP  \fI(since C++17)\fP
   template< class P >                                              \fB(6)\fP  \fI(since C++11)\fP
   iterator insert( const_iterator hint, P&& value );
   template< class InputIt >                                        \fB(7)\fP  \fI(since C++11)\fP
   void insert( InputIt first, InputIt last );
   void insert( std::initializer_list<value_type> ilist );          \fB(8)\fP  \fI(since C++11)\fP
   iterator insert( node_type&& nh );                               \fB(9)\fP  \fI(since C++17)\fP
   iterator insert( const_iterator hint, node_type&& nh );          \fB(10)\fP \fI(since C++17)\fP

   Inserts element(s) into the container.

   1-3) Inserts value.
   Overload \fB(3)\fP is equivalent to emplace(std::forward<P>(value)) and only participates
   in overload resolution if std::is_constructible<value_type, P&&>::value == true.
   4-6) Inserts value, using hint as a non-binding suggestion to where the search
   should start.
   Overload \fB(6)\fP is equivalent to emplace_hint(hint, std::forward<P>(value)) and only
   participates in overload resolution if std::is_constructible<value_type, P&&>::value
   == true.
   7) Inserts elements from range [first, last).
   If [first, last) is not a valid range, or first and/or last are iterators into
   *this, the behavior is undefined.
   8) Inserts elements from initializer list ilist.
   9) If nh is an empty node handle, does nothing. Otherwise, inserts the element owned
   by nh into the container and returns an iterator pointing at the inserted element.
   The behavior is undefined if nh is not empty and get_allocator() !=
   nh.get_allocator().
   10) If nh is an empty node handle, does nothing and returns the end iterator.
   Otherwise, inserts the element owned by nh into the container, and returns the
   iterator pointing to the element with key equivalent to nh.key(). hint is used as a
   non-binding suggestion to where the search should start. The behavior is undefined
   if nh is not empty and get_allocator() != nh.get_allocator().

   If after the operation the new number of elements is greater than old
   max_load_factor() * bucket_count() a rehashing takes place.
   If rehashing occurs (due to the insertion), all iterators are invalidated. Otherwise
   (no rehashing), iterators are not invalidated.
   If the insertion is successful, pointers and references to the element obtained
   while it is held in the node handle are invalidated, and pointers and references
   obtained to that element before it was extracted become valid.
   \fI(since C++17)\fP

.SH Parameters

   hint        - iterator, used as a suggestion as to where to insert the content
   value       - element value to insert
   first, last - range of elements to insert
   ilist       - initializer list to insert the values from
   nh          - a compatible node handle
.SH Type requirements
   -
   InputIt must meet the requirements of LegacyInputIterator.

.SH Return value

   1-6) An iterator to the inserted element.
   7,8) \fI(none)\fP
   9,10) End iterator if nh was empty, iterator pointing to the inserted element
   otherwise.

.SH Exceptions

   1-6) If an exception is thrown for any reason, these functions have no effect
   (strong exception safety guarantee).
   7,8) No exception safety guarantee.
   9,10) If an exception is thrown for any reason, these functions have no effect
   (strong exception safety guarantee).

.SH Complexity

   1-6) Average case: O(1), worst case O(size()).
   7,8) Average case: O(N), where N is the number of elements to insert. Worst case:
   O(N * size() + N).
   9,10) Average case: O(1), worst case O(size()).

.SH Example

    This section is incomplete
    Reason: no example

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to         Behavior as published              Correct behavior
                       overloads (3,6) would only            only participates if
   LWG 2005 C++11      participate in overload               value_type
                       resolution if P is implicitly         is constructible from P&&
                       convertible to value_type

.SH See also

   emplace      constructs element in-place
                \fI(public member function)\fP 
   emplace_hint constructs elements in-place using a hint
                \fI(public member function)\fP 
   inserter     creates a std::insert_iterator of type inferred from the argument
                \fI(function template)\fP 

.SH Category:
     * Todo no example
