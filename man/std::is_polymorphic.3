.TH std::is_polymorphic 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_polymorphic \- std::is_polymorphic

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_polymorphic;

   std::is_polymorphic is a UnaryTypeTrait.

   If T is a polymorphic class (that is, a non-union class that declares or inherits at
   least one virtual function), provides the member constant value equal to true. For
   any other type, value is false.

   If T is an incomplete non-union class type, the behavior is undefined.

   If the program adds specializations for std::is_polymorphic or
   std::is_polymorphic_v, the behavior is undefined.

.SH Template parameters

   T - a type to check

   Helper variable template

   template< class T >                                                 \fI(since C++17)\fP
   inline constexpr bool is_polymorphic_v = is_polymorphic<T>::value;

   

Inherited from std::integral_constant

.SH Member constants

   value    true if T is a polymorphic class type, false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Possible implementation

   namespace detail
   {
       template<class T>
       std::true_type detect_is_polymorphic(
           decltype(dynamic_cast<const volatile void*>(static_cast<T*>(nullptr)))
       );
       template<class T>
       std::false_type detect_is_polymorphic(...);
   } // namespace detail
    
   template<class T>
   struct is_polymorphic : decltype(detail::detect_is_polymorphic<T>(nullptr)) {};

.SH Example

   
// Run this code

 #include <type_traits>
  
 struct A { int m; };
 static_assert(!std::is_polymorphic_v<A>);
  
 struct B { virtual void foo(); };
 static_assert(std::is_polymorphic_v<B>);
  
 struct C : B {};
 static_assert(std::is_polymorphic_v<C>);
  
 struct D { virtual ~D() = default; };
 static_assert(std::is_polymorphic_v<D>);
  
 // Uses inheritance, but not the virtual keyword:
 struct E : A {};
 static_assert(!std::is_polymorphic_v<E>);
  
 struct F : virtual A {};
 static_assert(!std::is_polymorphic_v<F>);
  
 struct AX : A {};
 struct AY : A {};
 struct XY : virtual AX, virtual AY {};
 static_assert(!std::is_polymorphic_v<XY>);
  
 int main() {}

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to     Behavior as published           Correct behavior
   LWG 2015 C++11      the behavior was undefined if the base characteristic is
                       T is an incomplete union type std::false_type in this case

.SH See also

   is_class               checks if a type is a non-union class type
   \fI(C++11)\fP                \fI(class template)\fP 
   is_abstract            checks if a type is an abstract class type
   \fI(C++11)\fP                \fI(class template)\fP 
   has_virtual_destructor checks if a type has a virtual destructor
   \fI(C++11)\fP                \fI(class template)\fP 
