.TH std::asinh,std::asinhf,std::asinhl 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::asinh,std::asinhf,std::asinhl \- std::asinh,std::asinhf,std::asinhl

.SH Synopsis
   Defined in header <cmath>
   float       asinh ( float num );

   double      asinh ( double num );                            (until C++23)

   long double asinh ( long double num );
   /* floating-point-type */                                    (since C++23)
               asinh ( /* floating-point-type */ num );         (constexpr since C++26)
   float       asinhf( float num );                     \fB(1)\fP \fB(2)\fP \fI(since C++11)\fP
                                                                (constexpr since C++26)
   long double asinhl( long double num );                   \fB(3)\fP \fI(since C++11)\fP
                                                                (constexpr since C++26)
   Additional overloads \fI(since C++11)\fP
   Defined in header <cmath>
   template< class Integer >                                (A) (constexpr since C++26)
   double      asinh ( Integer num );

   1-3) Computes the inverse hyperbolic sine of num.
   The library provides overloads of std::asinh for all cv-unqualified floating-point
   types as the type of the parameter.
   (since C++23)

   A) Additional overloads are provided for all integer types, which are  \fI(since C++11)\fP
   treated as double.

.SH Parameters

   num - floating-point or integer value

.SH Return value

   If no errors occur, the inverse hyperbolic sine of num (sinh-1
   (num), or arsinh(num)), is returned.

   If a range error occurs due to underflow, the correct result (after rounding) is
   returned.

.SH Error handling

   Errors are reported as specified in math_errhandling.

   If the implementation supports IEEE floating-point arithmetic (IEC 60559),

     * if the argument is ±0 or ±∞, it is returned unmodified.
     * if the argument is NaN, NaN is returned.

.SH Notes

   Although the C standard (to which C++ refers for this function) names this function
   "arc hyperbolic sine", the inverse functions of the hyperbolic functions are the
   area functions. Their argument is the area of a hyperbolic sector, not an arc. The
   correct name is "inverse hyperbolic sine" (used by POSIX) or "area hyperbolic sine".

   The additional overloads are not required to be provided exactly as (A). They only
   need to be sufficient to ensure that for their argument num of integer type,
   std::asinh(num) has the same effect as std::asinh(static_cast<double>(num)).

.SH Examples

   
// Run this code

 #include <cmath>
 #include <iostream>
  
 int main()
 {
     std::cout << "asinh(1) = " << std::asinh(1) << '\\n'
               << "asinh(-1) = " << std::asinh(-1) << '\\n';
  
     // special values
     std::cout << "asinh(+0) = " << std::asinh(+0.0) << '\\n'
               << "asinh(-0) = " <<  std::asinh(-0.0) << '\\n';
 }

.SH Output:

 asinh\fB(1)\fP = 0.881374
 asinh(-1) = -0.881374
 asinh(+0) = 0
 asinh(-0) = -0

.SH See also

   acosh
   acoshf              computes the inverse hyperbolic cosine
   acoshl              (\\({\\small\\operatorname{arcosh}{x}}\\)arcosh(x))
   \fI(C++11)\fP             \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   atanh
   atanhf              computes the inverse hyperbolic tangent
   atanhl              (\\({\\small\\operatorname{artanh}{x}}\\)artanh(x))
   \fI(C++11)\fP             \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   sinh
   sinhf               computes hyperbolic sine (\\({\\small\\sinh{x}}\\)sinh(x))
   sinhl               \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   asinh(std::complex) computes area hyperbolic sine of a complex number
   \fI(C++11)\fP             (\\({\\small\\operatorname{arsinh}{z}}\\)arsinh(z))
                       \fI(function template)\fP 
   C documentation for
   asinh

.SH External links

   Weisstein, Eric W. "Inverse Hyperbolic Sine." From MathWorld — A Wolfram Web
   Resource.
