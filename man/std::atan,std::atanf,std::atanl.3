.TH std::atan,std::atanf,std::atanl 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::atan,std::atanf,std::atanl \- std::atan,std::atanf,std::atanl

.SH Synopsis
   Defined in header <cmath>
   float       atan ( float num );

   double      atan ( double num );                            (until C++23)

   long double atan ( long double num );
   /* floating-point-type */                                   (since C++23)
               atan ( /* floating-point-type */ num );         (constexpr since C++26)
   float       atanf( float num );                     \fB(1)\fP \fB(2)\fP \fI(since C++11)\fP
                                                               (constexpr since C++26)
   long double atanl( long double num );                   \fB(3)\fP \fI(since C++11)\fP
                                                               (constexpr since C++26)
   Additional overloads \fI(since C++11)\fP
   Defined in header <cmath>
   template< class Integer >                               (A) (constexpr since C++26)
   double      atan ( Integer num );

   1-3) Computes the principal value of the arc tangent of num.
   The library provides overloads of std::atan for all cv-unqualified floating-point
   types as the type of the parameter.
   (since C++23)

   A) Additional overloads are provided for all integer types, which are  \fI(since C++11)\fP
   treated as double.

.SH Parameters

   num - floating-point or integer value

.SH Return value

   If no errors occur, the arc tangent of num (arctan(num)) in the range [-

   π
   2

   , +

   π
   2

   ] radians, is returned.

   If a range error occurs due to underflow, the correct result (after rounding) is
   returned.

.SH Error handling

   Errors are reported as specified in math_errhandling.

   If the implementation supports IEEE floating-point arithmetic (IEC 60559),

     * If the argument is ±0, it is returned unmodified.
     * If the argument is +∞, +π/2 is returned.
     * If the argument is -∞, -π/2 is returned.
     * If the argument is NaN, NaN is returned.

.SH Notes

   POSIX specifies that in case of underflow, num is returned unmodified, and if that
   is not supported, an implementation-defined value no greater than DBL_MIN, FLT_MIN,
   and LDBL_MIN is returned.

   The additional overloads are not required to be provided exactly as (A). They only
   need to be sufficient to ensure that for their argument num of integer type,
   std::atan(num) has the same effect as std::atan(static_cast<double>(num)).

.SH Example

   
// Run this code

 #include <cmath>
 #include <iostream>
  
 int main()
 {
     std::cout << "atan(1) = " << std::atan(1) << '\\n'
               << "4*atan(1) = " << 4 * std::atan(1) << '\\n';
  
     // special values
     std::cout << "atan(Inf) = " << std::atan(INFINITY) << '\\n'
               << "2*atan(Inf) = " << 2 * std::atan(INFINITY) << '\\n'
               << "atan(-0.0) = " << std::atan(-0.0) << '\\n'
               << "atan(+0.0) = " << std::atan(0) << '\\n';
 }

.SH Output:

 atan\fB(1)\fP = 0.785398
 4*atan\fB(1)\fP = 3.14159
 atan(Inf) = 1.5708
 2*atan(Inf) = 3.14159
 atan(-0.0) = -0
 atan(+0.0) = 0

.SH See also

   asin
   asinf               computes arc sine (\\({\\small\\arcsin{x}}\\)arcsin(x))
   asinl               \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   acos
   acosf               computes arc cosine (\\({\\small\\arccos{x}}\\)arccos(x))
   acosl               \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   atan2
   atan2f              arc tangent, using signs to determine quadrants
   atan2l              \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   tan
   tanf                computes tangent (\\({\\small\\tan{x}}\\)tan(x))
   tanl                \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   atan(std::complex)  computes arc tangent of a complex number
   \fI(C++11)\fP             (\\({\\small\\arctan{z}}\\)arctan(z))
                       \fI(function template)\fP 
   atan(std::valarray) applies the function std::atan to each element of valarray
                       \fI(function template)\fP 
   C documentation for
   atan
