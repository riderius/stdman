.TH std::filesystem::directory_iterator::directory_iterator 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::filesystem::directory_iterator::directory_iterator \- std::filesystem::directory_iterator::directory_iterator

.SH Synopsis
   directory_iterator() noexcept;                                     \fB(1)\fP \fI(since C++17)\fP
   explicit directory_iterator( const std::filesystem::path& p );     \fB(2)\fP \fI(since C++17)\fP
   directory_iterator( const std::filesystem::path& p,                \fB(3)\fP \fI(since C++17)\fP
                       std::filesystem::directory_options options );
   directory_iterator( const std::filesystem::path& p,                \fB(4)\fP \fI(since C++17)\fP
   std::error_code& ec );
   directory_iterator( const std::filesystem::path& p,

                       std::filesystem::directory_options options,    \fB(5)\fP \fI(since C++17)\fP

                       std::error_code& ec );
   directory_iterator( const directory_iterator& other ) = default;   \fB(6)\fP \fI(since C++17)\fP
   directory_iterator( directory_iterator&& other ) = default;        \fB(7)\fP \fI(since C++17)\fP

   Constructs a new directory iterator.

   1) Constructs the end iterator.
   2) Constructs a directory iterator that refers to the first directory entry of a
   directory identified by p. If p refers to a non-existing file or not a directory,
   throws std::filesystem::filesystem_error.
   3) Same as \fB(2)\fP, but if std::filesystem::directory_options::skip_permission_denied is
   set in options and construction encounters a permissions denied error, constructs
   the end iterator and does not report an error.
   4) Constructs a directory iterator that refers to the first directory entry of a
   directory identified by p. If p refers to a non-existing file or not a directory,
   returns the end iterator and sets ec.
   5) Same as \fB(4)\fP, but if std::filesystem::directory_options::skip_permission_denied is
   set in options and construction encounters a permissions denied error, constructs
   the end iterator and does not report an error.
   6) Copy constructor.
   7) Move constructor.

.SH Parameters

   p       - path to the filesystem object to which the directory iterator will refer
   ec      - out-parameter for error reporting in the non-throwing overloads
   options - the set of BitmaskType options that control the behavior of the directory
             iterator
   other   - another directory iterator to use as source to initialize the directory
             iterator with

.SH Exceptions

   Any overload not marked noexcept may throw std::bad_alloc if memory allocation
   fails.

   2,3) Throws std::filesystem::filesystem_error on underlying OS API errors,
   constructed with p as the first path argument and the OS error code as the error
   code argument.
   4,5) Sets a std::error_code& parameter to the OS API error code if an OS API call
   fails, and executes ec.clear() if no errors occur.

.SH Notes

   To iterate over the current directory, construct the iterator as
   directory_iterator(".") instead of directory_iterator("").

.SH Example

    This section is incomplete
    Reason: no example

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to              Behavior as published              Correct behavior
   LWG 3013 C++17      error_code overload marked noexcept but can     noexcept removed
                       allocate memory

.SH Category:
     * Todo no example
