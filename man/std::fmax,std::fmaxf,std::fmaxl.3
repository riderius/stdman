.TH std::fmax,std::fmaxf,std::fmaxl 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::fmax,std::fmaxf,std::fmaxl \- std::fmax,std::fmaxf,std::fmaxl

.SH Synopsis
   Defined in header <cmath>
   float       fmax ( float x, float y );

   double      fmax ( double x, double y );                   (until C++23)

   long double fmax ( long double x, long double y );
   constexpr /* floating-point-type */

               fmax ( /* floating-point-type */ x,            (since C++23)
                                                      \fB(1)\fP
                      /* floating-point-type */ y );
   float       fmaxf( float x, float y );                 \fB(2)\fP \fI(since C++11)\fP
                                                              (constexpr since C++23)
   long double fmaxl( long double x, long double y );     \fB(3)\fP \fI(since C++11)\fP
                                                              (constexpr since C++23)
   Additional overloads \fI(since C++11)\fP
   Defined in header <cmath>
   template< class Integer >                              (A) (constexpr since C++23)
   double      fmax ( Integer x, Integer y );

   1-3) Returns the larger of two floating point arguments, treating NaNs as missing
   data (between a NaN and a numeric value, the numeric value is chosen).
   The library provides overloads of std::fmax for all cv-unqualified floating-point
   types as the type of the parameters.
   (since C++23)

   A) Additional overloads are provided for all integer types, which are  \fI(since C++11)\fP
   treated as double.

.SH Parameters

   x, y - floating-point or integer values

.SH Return value

   If successful, returns the larger of two floating point values. The value returned
   is exact and does not depend on any rounding modes.

.SH Error handling

   This function is not subject to any of the error conditions specified in
   math_errhandling.

   If the implementation supports IEEE floating-point arithmetic (IEC 60559),

     * If one of the two arguments is NaN, the value of the other argument is returned.
     * Only if both arguments are NaN, NaN is returned.

.SH Notes

   This function is not required to be sensitive to the sign of zero, although some
   implementations additionally enforce that if one argument is +0 and the other is -0,
   then +0 is returned.

   The additional overloads are not required to be provided exactly as (A). They only
   need to be sufficient to ensure that for their first argument num1 and second
   argument num2:

     * If num1 or num2 has type long double, then std::fmax(num1, num2)
       has the same effect as std::fmax(static_cast<long double>(num1),
                 static_cast<long double>(num2)).
     * Otherwise, if num1 and/or num2 has type double or an integer type,
       then std::fmax(num1, num2) has the same effect as                  (until C++23)
       std::fmax(static_cast<double>(num1),
                 static_cast<double>(num2)).
     * Otherwise, if num1 or num2 has type float, then std::fmax(num1,
       num2) has the same effect as std::fmax(static_cast<float>(num1),
                 static_cast<float>(num2)).
   If num1 and num2 have arithmetic types, then std::fmax(num1, num2) has
   the same effect as std::fmax(static_cast</* common-floating-point-type
   */>(num1),
             static_cast</* common-floating-point-type */>(num2)), where
   /* common-floating-point-type */ is the floating-point type with the
   greatest floating-point conversion rank and greatest floating-point
   conversion subrank between the types of num1 and num2, arguments of    (since C++23)
   integer type are considered to have the same floating-point conversion
   rank as double.

   If no such floating-point type with the greatest rank and subrank
   exists, then overload resolution does not result in a usable candidate
   from the overloads provided.

.SH Example

   
// Run this code

 #include <cmath>
 #include <iostream>
  
 int main()
 {
     std::cout << "fmax(2,1)    = " << std::fmax(2, 1) << '\\n'
               << "fmax(-Inf,0) = " << std::fmax(-INFINITY, 0) << '\\n'
               << "fmax(NaN,-1) = " << std::fmax(NAN, -1) << '\\n';
 }

.SH Output:

 fmax(2,1)    = 2
 fmax(-Inf,0) = 0
 fmax(NaN,-1) = -1

.SH See also

   isgreater      checks if the first floating-point argument is greater than the
   \fI(C++11)\fP        second
                  \fI(function)\fP 
   fmin
   fminf
   fminl          smaller of two floating point values
   \fI(C++11)\fP        \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   max            returns the greater of the given values
                  \fI(function template)\fP 
   max_element    returns the largest element in a range
                  \fI(function template)\fP 
   minmax         returns the smaller and larger of two elements
   \fI(C++11)\fP        \fI(function template)\fP 
   minmax_element returns the smallest and the largest elements in a range
   \fI(C++11)\fP        \fI(function template)\fP 
   C documentation for
   fmax
