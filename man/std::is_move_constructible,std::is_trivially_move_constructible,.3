.TH std::is_move_constructible,std::is_trivially_move_constructible, 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_move_constructible,std::is_trivially_move_constructible, \- std::is_move_constructible,std::is_trivially_move_constructible,

.SH Synopsis

   Defined in header <type_traits>
   template< class T >                     \fB(1)\fP \fI(since C++11)\fP
   struct is_move_constructible;
   template< class T >                     \fB(2)\fP \fI(since C++11)\fP
   struct is_trivially_move_constructible;
   template< class T >                     \fB(3)\fP \fI(since C++11)\fP
   struct is_nothrow_move_constructible;

                                The value of the member constant value
    Type trait            T is a referenceable type                   T is not a
                                                                 referenceable type 
   \fB(1)\fP          std::is_constructible<T, T&&>::value
   \fB(2)\fP          std::is_trivially_constructible<T, T&&>::value false
   \fB(3)\fP          std::is_nothrow_constructible<T, T&&>::value

   If T is not a complete type, (possibly cv-qualified) void, or an array of unknown
   bound, the behavior is undefined.

   If an instantiation of a template above depends, directly or indirectly, on an
   incomplete type, and that instantiation could yield a different result if that type
   were hypothetically completed, the behavior is undefined.

   If the program adds specializations for any of the templates described on this page,
   the behavior is undefined.

.SH Member constants

   value    true if T is move-constructible, false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Possible implementation

   template<class T>
   struct is_move_constructible :
       std::is_constructible<T, typename std::add_rvalue_reference<T>::type> {};
    
   template<class T>
   struct is_trivially_move_constructible :
       std::is_trivially_constructible<T, typename std::add_rvalue_reference<T>::type> {};
    
   template<class T>
   struct is_nothrow_move_constructible :
       std::is_nothrow_constructible<T, typename std::add_rvalue_reference<T>::type> {};

.SH Notes

   Types without a move constructor, but with a copy constructor that accepts const T&
   arguments, satisfy std::is_move_constructible.

   Move constructors are usually noexcept, since otherwise they are unusable in any
   code that provides strong exception guarantee.

   In many implementations, std::is_nothrow_move_constructible also checks if the
   destructor throws because it is effectively noexcept(T(arg)). Same applies to
   std::is_trivially_move_constructible, which, in these implementations, also requires
   that the destructor is trivial: GCC bug 51452, LWG issue 2116.

.SH Example

   
// Run this code

 #include <string>
 #include <type_traits>
  
 struct Ex1
 {
     std::string str; // member has a non-trivial but non-throwing move constructor
 };
 static_assert(std::is_move_constructible_v<Ex1>);
 static_assert(!std::is_trivially_move_constructible_v<Ex1>);
 static_assert(std::is_nothrow_move_constructible_v<Ex1>);
  
 struct Ex2
 {
     int n;
     Ex2(Ex2&&) = default; // trivial and non-throwing
 };
 static_assert(std::is_move_constructible_v<Ex2>);
 static_assert(std::is_trivially_move_constructible_v<Ex2>);
 static_assert(std::is_nothrow_move_constructible_v<Ex2>);
  
 struct NoMove1
 {
     // prevents implicit declaration of default move constructor;
     // however, the class is still move-constructible because its
     // copy constructor can bind to an rvalue argument
     NoMove1(const NoMove1&) {}
 };
 static_assert(std::is_move_constructible_v<NoMove1>);
 static_assert(!std::is_trivially_move_constructible_v<NoMove1>);
 static_assert(!std::is_nothrow_move_constructible_v<NoMove1>);
  
 struct NoMove2
 {
     // Not move-constructible since the lvalue reference
     // can't bind to the rvalue argument
     NoMove2(NoMove2&) {}
 };
 static_assert(!std::is_move_constructible_v<NoMove2>);
 static_assert(!std::is_trivially_move_constructible_v<NoMove2>);
 static_assert(!std::is_nothrow_move_constructible_v<NoMove2>);
  
 int main() {}

.SH See also

   is_constructible
   is_trivially_constructible         checks if a type has a constructor for specific
   is_nothrow_constructible           arguments
   \fI(C++11)\fP                            \fI(class template)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   is_default_constructible
   is_trivially_default_constructible
   is_nothrow_default_constructible   checks if a type has a default constructor
   \fI(C++11)\fP                            \fI(class template)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   is_copy_constructible
   is_trivially_copy_constructible
   is_nothrow_copy_constructible      checks if a type has a copy constructor
   \fI(C++11)\fP                            \fI(class template)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   move_constructible                 specifies that an object of a type can be move
   (C++20)                            constructed
                                      (concept) 
   move                               obtains an rvalue reference
   \fI(C++11)\fP                            \fI(function template)\fP 
   move_if_noexcept                   obtains an rvalue reference if the move
   \fI(C++11)\fP                            constructor does not throw
                                      \fI(function template)\fP 
