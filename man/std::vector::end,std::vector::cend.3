.TH std::vector::end,std::vector::cend 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::vector::end,std::vector::cend \- std::vector::end,std::vector::cend

.SH Synopsis
   iterator end();                         \fI(until C++11)\fP
                                           \fI(since C++11)\fP
   iterator end() noexcept;                (constexpr since
                                           C++20)
   const_iterator end() const;                                    \fI(until C++11)\fP
   const_iterator end() const      \fB(1)\fP                            \fI(since C++11)\fP
   noexcept;                                                      (constexpr since
                                       \fB(2)\fP                        C++20)
   const_iterator cend() const                                    \fI(since C++11)\fP
   noexcept;                               \fB(3)\fP                    (constexpr since
                                                                  C++20)

   Returns an iterator to the element following the last element of the vector.

   This element acts as a placeholder; attempting to access it results in undefined
   behavior.

   range-begin-end.svg

.SH Parameters

   \fI(none)\fP

.SH Return value

   Iterator to the element following the last element.

.SH Complexity

   Constant.

.SH Notes

   libc++ backports cend() to C++98 mode.

.SH Example

   
// Run this code

 #include <algorithm>
 #include <iostream>
 #include <numeric>
 #include <string>
 #include <vector>
  
 int main()
 {
     std::vector<int> nums{1, 2, 4, 8, 16};
     std::vector<std::string> fruits{"orange", "apple", "raspberry"};
     std::vector<char> empty;
  
     // Print vector.
     std::for_each(nums.begin(), nums.end(), [](const int n) { std::cout << n << ' '; });
     std::cout << '\\n';
  
     // Sums all integers in the vector nums (if any), printing only the result.
     std::cout << "Sum of nums: "
               << std::accumulate(nums.begin(), nums.end(), 0) << '\\n';
  
     // Prints the first fruit in the vector fruits, checking if there is any.
     if (!fruits.empty())
         std::cout << "First fruit: " << *fruits.begin() << '\\n';
  
     if (empty.begin() == empty.end())
         std::cout << "vector 'empty' is indeed empty.\\n";
 }

.SH Output:

 1 2 4 8 16
 Sum of nums: 31
 First fruit: orange
 vector 'empty' is indeed empty.

.SH See also

   begin   returns an iterator to the beginning
   cbegin  \fI(public member function)\fP 
   \fI(C++11)\fP
   end
   cend    returns an iterator to the end of a container or array
   \fI(C++11)\fP \fI(function template)\fP 
   \fI(C++14)\fP
