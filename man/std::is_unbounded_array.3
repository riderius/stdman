.TH std::is_unbounded_array 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_unbounded_array \- std::is_unbounded_array

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++20)\fP
   struct is_unbounded_array;

   std::is_unbounded_array is a UnaryTypeTrait.

   Checks whether T is an arrays of unknown bound. Provides the member constant value
   which is equal to true, if T is an array type of unknown bound. Otherwise, value is
   equal to false.

   If the program adds specializations for std::is_unbounded_array or
   std::is_unbounded_array_v, the behavior is undefined.

.SH Template parameters

   T - a type to check

   Helper variable template

   template< class T >
   inline constexpr bool is_unbounded_array_v =                           \fI(since C++20)\fP
   is_unbounded_array<T>::value;

   

Inherited from std::integral_constant

.SH Member constants

   value    true if T is an array type of unknown bound., false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Possible implementation

   template<class T>
   struct is_unbounded_array: std::false_type {};
    
   template<class T>
   struct is_unbounded_array<T[]> : std::true_type {};

.SH Notes

         Feature-test macro        Value    Std                  Feature
   __cpp_lib_bounded_array_traits 201902L (C++20) std::is_bounded_array,
                                                  std::is_unbounded_array

.SH Example

   
// Run this code

 #include <type_traits>
  
 class A {};
  
 static_assert
 (""
     && std::is_unbounded_array_v<A> == false
     && std::is_unbounded_array_v<A[]> == true
     && std::is_unbounded_array_v<A[3]> == false
     && std::is_unbounded_array_v<float> == false
     && std::is_unbounded_array_v<int> == false
     && std::is_unbounded_array_v<int[]> == true
     && std::is_unbounded_array_v<int[3]> == false
 );
  
 int main() {}

.SH See also

   is_array         checks if a type is an array type
   \fI(C++11)\fP          \fI(class template)\fP 
   is_bounded_array checks if a type is an array type of known bound
   (C++20)          \fI(class template)\fP 
   extent           obtains the size of an array type along a specified dimension
   \fI(C++11)\fP          \fI(class template)\fP 
