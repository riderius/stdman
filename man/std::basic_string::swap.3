.TH std::basic_string::swap 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_string::swap \- std::basic_string::swap

.SH Synopsis
   void swap( basic_string& other );                            \fI(until C++17)\fP
   void swap( basic_string& other ) noexcept(/* see below */);  \fI(since C++17)\fP
                                                                (constexpr since C++20)

   Exchanges the contents of the string with those of other. All iterators and
   references may be invalidated.

   The behavior is undefined if Allocator does not propagate on swap and  \fI(since C++11)\fP
   the allocators of *this and other are unequal.

.SH Parameters

   other - string to exchange the contents with

.SH Return value

   \fI(none)\fP

.SH Complexity

   Constant.

.SH Exceptions

   No exception is thrown.                                                \fI(until C++11)\fP
   Exceptions can only be thrown in the case where the behavior is
   undefined (see above).
                                                                          \fI(since C++11)\fP
   If an exception is thrown for any reason, this function has no effect
   (strong exception safety guarantee).

   noexcept specification:  
   noexcept(std::allocator_traits<Allocator>::propagate_on_container_swap::value (since
   ||                                                                            C++17)
            std::allocator_traits<Allocator>::is_always_equal::value)

.SH Example

   
// Run this code

 #include <iostream>
 #include <string>
  
 int main()
 {
     std::string a = "AAA";
     std::string b = "BBBB";
  
     std::cout << "Before swap:\\n"
                  "a = " << a << "\\n"
                  "b = " << b << "\\n\\n";
  
     a.swap(b);
  
     std::cout << "After swap:\\n"
                  "a = " << a << "\\n"
                  "b = " << b << '\\n';
 }

.SH Output:

 Before swap:
 a = AAA
 b = BBBB
  
 After swap:
 a = BBBB
 b = AAA

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

     DR    Applied to          Behavior as published              Correct behavior
   LWG 403 C++98      swap() might throw an exception         no exception is thrown
   LWG 535 C++98      swapping strings did not preserve the   orders are also preserved
                      character orders

.SH See also

   swap        swaps the values of two objects
               \fI(function template)\fP 
   swap_ranges swaps two ranges of elements
               \fI(function template)\fP 
   swap        swaps the contents
               \fI(public member function of std::basic_string_view<CharT,Traits>)\fP 

.SH Category:
     * conditionally noexcept
