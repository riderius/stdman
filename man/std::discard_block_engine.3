.TH std::discard_block_engine 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::discard_block_engine \- std::discard_block_engine

.SH Synopsis
   Defined in header <random>
   template<

       class Engine,                 \fI(since C++11)\fP
       std::size_t P, std::size_t R

   > class discard_block_engine;

   discard_block_engine is a pseudo-random number engine adaptor that discards a
   certain amount of data produced by the base engine. From each block of size P
   generated by the base engine, the adaptor keeps only R numbers, discarding the rest.

.SH Template parameters

   Engine - the type of the wrapped engine.
   P      - the size of a block. Expected that \\(\\small{P>0}\\)P > 0.
   R      - the number of used numbers per block. Expected that \\(\\small{0<R\\le P}\\)0 <
            R â‰¤ P.
.SH Type requirements
   -
   Engine must meet the requirements of RandomNumberEngine.

.SH Member types

   Member type         Definition
   result_type \fI(C++11)\fP Engine::result_type

.SH Member functions

   constructor      constructs the engine adaptor
   \fI(C++11)\fP          \fI(public member function)\fP 
   seed             sets the state of the underlying engine
   \fI(C++11)\fP          \fI(public member function)\fP 
   base             returns the underlying engine
   \fI(C++11)\fP          \fI(public member function)\fP 
.SH Generation
   operator()       advances the state of the underlying engine and returns the
   \fI(C++11)\fP          generated value
                    \fI(public member function)\fP 
   discard          advances the adaptor's state by a specified amount
   \fI(C++11)\fP          \fI(public member function)\fP 
.SH Characteristics
   min              gets the smallest possible value in the output range of the
   \fB[static]\fP \fI(C++11)\fP underlying engine.
                    \fI(public static member function)\fP 
   max              gets the largest possible value in the output range of the
   \fB[static]\fP \fI(C++11)\fP underlying engine.
                    \fI(public static member function)\fP 

.SH Non-member functions

   operator==                compares the internal states of the adaptors and
   operator!=                underlying engines
   \fI(C++11)\fP                   \fI(function)\fP 
   \fI(C++11)\fP(removed in C++20)
   operator<<                performs stream input and output on pseudo-random number
   operator>>                engine adaptor
   \fI(C++11)\fP                   \fI(function)\fP 

.SH Member constants

   constexpr size_t block_size the size of the block, P
   \fB[static]\fP \fI(C++11)\fP            \fI(public static member constant)\fP
   constexpr size_t used_block the number of used numbers per block, R
   \fB[static]\fP \fI(C++11)\fP            \fI(public static member constant)\fP

.SH Example

    This section is incomplete
    Reason: no example

.SH Category:
     * Todo no example
