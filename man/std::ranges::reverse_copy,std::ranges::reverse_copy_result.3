.TH std::ranges::reverse_copy,std::ranges::reverse_copy_result 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::reverse_copy,std::ranges::reverse_copy_result \- std::ranges::reverse_copy,std::ranges::reverse_copy_result

.SH Synopsis
   Defined in header <algorithm>
   Call signature
   template< std::bidirectional_iterator I, std::sentinel_for<I> S,

             std::weakly_incrementable O >                                 (since
   requires std::indirectly_copyable<I, O>                             \fB(1)\fP C++20)
   constexpr reverse_copy_result<I, O>

       reverse_copy( I first, S last, O result );
   template< ranges::bidirectional_range R, std::weakly_incrementable
   O >
                                                                           (since
   requires std::indirectly_copyable<ranges::iterator_t<R>, O>         \fB(2)\fP C++20)
   constexpr reverse_copy_result<ranges::borrowed_iterator_t<R>, O>

       reverse_copy( R&& r, O result );
.SH Helper types
   template< class I, class O >                                        \fB(3)\fP (since
   using reverse_copy_result = ranges::in_out_result<I, O>;                C++20)

   1) Copies the elements from the source range [first, last) to the destination range
   [result, result + N), where N is ranges::distance(first, last), in such a way that
   the elements in the new range are in reverse order. Behaves as if by executing the
   assignment *(result + N - 1 - i) = *(first + i) once for each integer i in [0, N).
   The behavior is undefined if the source and destination ranges overlap.
   2) Same as \fB(1)\fP, but uses r as the source range, as if using ranges::begin(r) as
   first and ranges::end(r) as last.

   The function-like entities described on this page are niebloids, that is:

     * Explicit template argument lists cannot be specified when calling any of them.
     * None of them are visible to argument-dependent lookup.
     * When any of them are found by normal unqualified lookup as the name to the left
       of the function-call operator, argument-dependent lookup is inhibited.

   In practice, they may be implemented as function objects, or with special compiler
   extensions.

.SH Parameters

   first, last - the range of elements to copy
   r           - the range of elements to copy
   result      - the beginning of the destination range.

.SH Return value

   {last, result + N}.

.SH Complexity

   Exactly N assignments.

.SH Notes

   Implementations (e.g. MSVC STL) may enable vectorization when the both iterator
   types model contiguous_iterator and have the same value type, and the value type is
   TriviallyCopyable.

.SH Possible implementation

   See also the implementations in MSVC STL and libstdc++.

   struct reverse_copy_fn
   {
       template<std::bidirectional_iterator I, std::sentinel_for<I> S,
                std::weakly_incrementable O>
       requires std::indirectly_copyable<I, O>
       constexpr ranges::reverse_copy_result<I, O>
           operator()(I first, S last, O result) const
       {
           auto ret = ranges::next(first, last);
           for (; last != first; *result = *--last, ++result);
           return {std::move(ret), std::move(result)};
       }
    
       template<ranges::bidirectional_range R, std::weakly_incrementable O>
       requires std::indirectly_copyable<ranges::iterator_t<R>, O>
       constexpr ranges::reverse_copy_result<ranges::borrowed_iterator_t<R>, O>
           operator()(R&& r, O result) const
       {
           return (*this)(ranges::begin(r), ranges::end(r), std::move(result));
       }
   };
    
   inline constexpr reverse_copy_fn reverse_copy {};

.SH Example

   
// Run this code

 #include <algorithm>
 #include <iostream>
 #include <string>
  
 int main()
 {
     std::string x {"12345"}, y(x.size(), ' ');
     std::cout << x << " → ";
     std::ranges::reverse_copy(x.begin(), x.end(), y.begin());
     std::cout << y << " → ";
     std::ranges::reverse_copy(y, x.begin());
     std::cout << x << '\\n';
 }

.SH Output:

 12345 → 54321 → 12345

.SH See also

   ranges::reverse reverses the order of elements in a range
   (C++20)         (niebloid)
   reverse_copy    creates a copy of a range that is reversed
                   \fI(function template)\fP 
