.TH std::move_iterator::operator= 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::move_iterator::operator= \- std::move_iterator::operator=

.SH Synopsis
   template< class U >                                                   \fI(until C++17)\fP
   move_iterator& operator=( const move_iterator<U>& other );
   template< class U >                                                   \fI(since C++17)\fP
   constexpr move_iterator& operator=( const move_iterator<U>& other );

   The underlying iterator is assigned the value of the underlying iterator of other,
   i.e. other.base().

   The behavior is undefined if U is not convertible to Iter.             \fI(until C++20)\fP
   This overload participates in overload resolution only if U is not the
   same type as Iter and std::convertible_to<const U&, Iter> and          \fI(since C++20)\fP
   std::assignable_from<Iter&, const U&> are modeled.

.SH Parameters

   other - iterator adaptor to assign

.SH Return value

   *this

.SH Example

    This section is incomplete
    Reason: no example

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to              Behavior as published              Correct behavior
   LWG 3435 C++20      the converting assignment operator was not      constrained
                       constrained

.SH See also

   constructor   constructs a new iterator adaptor
   \fI(C++11)\fP       \fI(public member function)\fP 

.SH Category:
     * Todo no example
