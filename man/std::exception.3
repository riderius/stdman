.TH std::exception 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::exception \- std::exception

.SH Synopsis
   Defined in header <exception>
   class exception;

   Provides consistent interface to handle errors through the throw expression.

   All exceptions generated by the standard library inherit from std::exception.

.SH Member functions

   constructor   constructs the exception object
                 \fI(public member function)\fP
   destructor    destroys the exception object
   \fB[virtual]\fP     \fI(virtual public member function)\fP 
   operator=     copies exception object
                 \fI(public member function)\fP 
   what          returns an explanatory string
   \fB[virtual]\fP     \fI(virtual public member function)\fP 

   Standard exception requirements

   Each standard library class T that derives from std::exception has the following
   publicly accessible member functions, each of them
   do not exit with an exception
   \fI(until C++11)\fP
   having a non-throwing exception specification
   \fI(since C++11)\fP:

     * default constructor (unless other constructors are provided)
     * copy constructor
     * copy assignment operator

   The copy constructor and the copy assignment operator meet the following
   postcondition:

     * If two objects lhs and rhs both have dynamic type T and lhs is a copy of rhs,
       then std::strcmp(lhs.what(), rhs.what()) is equal to 0.

   The what() member function of each such T satisfies the constraints specified for
   std::exception::what().

   Standard exceptions

     * logic_error

     * invalid_argument
     * domain_error
     * length_error
     * out_of_range
     * future_error \fI(since C++11)\fP
     * runtime_error

     * range_error
     * overflow_error
     * underflow_error
     * regex_error \fI(since C++11)\fP
     * system_error \fI(since C++11)\fP

     * ios_base::failure \fI(since C++11)\fP
     * filesystem::filesystem_error \fI(since C++17)\fP
     * tx_exception (TM TS)
     * nonexistent_local_time \fI(since C++20)\fP
     * ambiguous_local_time \fI(since C++20)\fP
     * format_error \fI(since C++20)\fP
     * bad_typeid
     * bad_cast

     * bad_any_cast \fI(since C++17)\fP
     * bad_optional_access \fI(since C++17)\fP
     * bad_expected_access (since C++23)
     * bad_weak_ptr \fI(since C++11)\fP
     * bad_function_call \fI(since C++11)\fP
     * bad_alloc

     * bad_array_new_length \fI(since C++11)\fP
     * bad_exception
     * ios_base::failure \fI(until C++11)\fP
     * bad_variant_access \fI(since C++17)\fP

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

     DR    Applied to              Behavior as published               Correct behavior
   LWG 471 C++98      there was no requirement on standard library     added
                      classes derived from std::exception
