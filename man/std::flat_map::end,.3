.TH std::flat_map::end, 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::flat_map::end, \- std::flat_map::end,

.SH Synopsis

   iterator end() noexcept;              \fB(1)\fP (since C++23)
   const_iterator end() const noexcept;  \fB(2)\fP (since C++23)
   const_iterator cend() const noexcept; \fB(3)\fP (since C++23)

   Returns an iterator to the element following the last element of the flat_map.

   This element acts as a placeholder; attempting to access it results in undefined
   behavior.

   range-begin-end.svg

.SH Parameters

   \fI(none)\fP

.SH Return value

   Iterator to the element following the last element.

.SH Complexity

   Constant.

.SH Example

   
// Run this code

 #include <iostream>
 #include <flat_map>
  
 int main()
 {
     std::flat_map<int, double> map{{4, 4.13}, {9, 9.24}, {1, 1.09}};
  
     for (auto it = map.cbegin(); it != map.cend(); ++it)
         std::cout << '[' << it->first << "] = " << it->second << '\\n';
  
     // Unlike std::map's bidirectional iterators, the std::flat_map iterators
     // are random-access, so they can be used with the operator[]:
     auto it = map.cbegin();
     assert(it[0] == map[1]);
     assert(it[1] == map[4]);
     assert(it[2] == map[9]);
 }

.SH Output:

 [1] = 1.09
 [4] = 4.13
 [9] = 9.24

.SH See also

   begin   returns an iterator to the beginning
   cbegin  \fI(public member function)\fP 
   end
   cend    returns an iterator to the end of a container or array
   \fI(C++11)\fP \fI(function template)\fP 
   \fI(C++14)\fP
