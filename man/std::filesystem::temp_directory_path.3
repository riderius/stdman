.TH std::filesystem::temp_directory_path 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::filesystem::temp_directory_path \- std::filesystem::temp_directory_path

.SH Synopsis
   Defined in header <filesystem>
   path temp_directory_path();                      \fB(1)\fP \fI(since C++17)\fP
   path temp_directory_path( std::error_code& ec ); \fB(2)\fP \fI(since C++17)\fP

   Returns the directory location suitable for temporary files.

.SH Parameters

   \fI(none)\fP

.SH Return value

   A directory suitable for temporary files. The path is guaranteed to exist and to be
   a directory. The overload that takes error_code& argument returns an empty path on
   error.

.SH Exceptions

   Any overload not marked noexcept may throw std::bad_alloc if memory allocation
   fails.

   1) Throws std::filesystem::filesystem_error on underlying OS API errors, constructed
   with path to be returned as the first path argument and the OS error code as the
   error code argument.
   2) Sets a std::error_code& parameter to the OS API error code if an OS API call
   fails, and executes ec.clear() if no errors occur.

.SH Notes

   On POSIX systems, the path may be the one specified in the environment variables
   TMPDIR, TMP, TEMP, TEMPDIR, and, if none of them are specified, the path "/tmp" is
   returned.

   On Windows systems, the path is typically the one returned by GetTempPath.

.SH Example

   
// Run this code

 #include <filesystem>
 #include <iostream>
 namespace fs = std::filesystem;
  
 int main()
 {
     std::cout << "Temp directory is " << fs::temp_directory_path() << '\\n';
 }

.SH Possible output:

 Temp directory is "C:\\Windows\\TEMP\\"

.SH See also

   tmpfile      creates and opens a temporary, auto-removing file
                \fI(function)\fP 
   current_path returns or sets the current working directory
   \fI(C++17)\fP      \fI(function)\fP 
