.TH std::ranges::fold_left_with_iter,std::ranges::fold_left_with_iter_result 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::fold_left_with_iter,std::ranges::fold_left_with_iter_result \- std::ranges::fold_left_with_iter,std::ranges::fold_left_with_iter_result

.SH Synopsis
   Defined in header <algorithm>
   Call signature
   template< std::input_iterator I, std::sentinel_for<I>
   S, class T,
                                                                 (since
             /* indirectly-binary-left-foldable */<T, I>         C++23)
   F >                                                           (until
   constexpr /* see description */                               C++26)

       fold_left_with_iter( I first, S last, T init, F f
   );
   template< std::input_iterator I, std::sentinel_for<I>
   S,

             class T = std::iter_value_t<I>,
             /* indirectly-binary-left-foldable */<T, I>         (since
   F >                                                           C++26)
   constexpr /* see description */

       fold_left_with_iter( I first, S last, T init, F f
   );
   template< ranges::input_range R, class T,
                                                         \fB(1)\fP
             /* indirectly-binary-left-foldable */                       (since C++23)
                 <T, ranges::iterator_t<R>> F >                          (until C++26)
   constexpr /* see description */

       fold_left_with_iter( R&& r, T init, F f );
   template< ranges::input_range R, class T =
   ranges::range_value_t<R>,

             /* indirectly-binary-left-foldable */                       (since C++26)
                 <T, ranges::iterator_t<R>> F >              \fB(2)\fP
   constexpr /* see description */

       fold_left_with_iter( R&& r, T init, F f );
   Helper concepts
   template< class F, class T, class I >                                 (exposition
   concept /* indirectly-binary-left-foldable */ = /*            \fB(3)\fP     only*)
   see description */;
   Helper class template
   template< class I, class T >
   using fold_left_with_iter_result =                            \fB(4)\fP     (since C++23)
   ranges::in_value_result<I, T>;

   Left-folds the elements of given range, that is, returns the result of evaluation of
   the chain expression:
   f(f(f(f(init, x[1]), x[2]), ...), x[n]), where x[1], x[2], ..., x[n] are elements of
   the range.

   Informally, ranges::fold_left_with_iter behaves like std::accumulate's overload that
   accepts a binary predicate.

   The behavior is undefined if [first, last) is not a valid range.

   1) The range is [first, last).
   2) Same as \fB(1)\fP, except that uses r as the range, as if by using ranges::begin(r) as
   first and ranges::end(r) as last.
   3) Equivalent to:

   Helper concepts
   template< class F, class T, class I, class U >

   concept /*indirectly-binary-left-foldable-impl*/ =
       std::movable<T> &&
       std::movable<U> &&
       std::convertible_to<T, U> &&                             (3A) (exposition only*)
       std::invocable<F&, U, std::iter_reference_t<I>> &&
       std::assignable_from<U&,

           std::invoke_result_t<F&, U,
   std::iter_reference_t<I>>>;
   template< class F, class T, class I >

   concept /*indirectly-binary-left-foldable*/ =
       std::copy_constructible<F> &&
       std::indirectly_readable<I> &&
       std::invocable<F&, T, std::iter_reference_t<I>> &&
       std::convertible_to<std::invoke_result_t<F&, T,          (3B) (exposition only*)
   std::iter_reference_t<I>>,
           std::decay_t<std::invoke_result_t<F&, T,
   std::iter_reference_t<I>>>> &&
       /*indirectly-binary-left-foldable-impl*/<F, T, I,

           std::decay_t<std::invoke_result_t<F&, T,
   std::iter_reference_t<I>>>>;

   4) The return type alias. See "Return value" section for details.

   The function-like entities described on this page are niebloids, that is:

     * Explicit template argument lists cannot be specified when calling any of them.
     * None of them are visible to argument-dependent lookup.
     * When any of them are found by normal unqualified lookup as the name to the left
       of the function-call operator, argument-dependent lookup is inhibited.

   In practice, they may be implemented as function objects, or with special compiler
   extensions.

.SH Parameters

   first, last - the range of elements to fold
   r           - the range of elements to fold
   init        - the initial value of the fold
   f           - the binary function object

.SH Return value

   Let U be std::decay_t<std::invoke_result_t<F&, T, std::iter_reference_t<I>>>.

   1) An object of type ranges::fold_left_with_iter_result<I, U>.
     * The member ranges::in_value_result::in holds an iterator to the end of the
       range.
     * The member ranges::in_value_result::value holds the result of the left-fold of
       given range over f.
   If the range is empty, the return value is obtained via the expression equivalent to
   return {std::move(first), U(std::move(init))};.
   2) Same as \fB(1)\fP except that the return type is
   ranges::fold_left_with_iter_result<ranges::borrowed_iterator_t<R>, U>.

.SH Possible implementations

class fold_left_with_iter_fn
{
    template<class O, class I, class S, class T, class F>
    constexpr auto impl(I&& first, S&& last, T&& init, F f) const
    {
        using U = std::decay_t<std::invoke_result_t<F&, T, std::iter_reference_t<I>>>;
        using Ret = ranges::fold_left_with_iter_result<O, U>;
        if (first == last)
            return Ret{std::move(first), U(std::move(init))};
        U accum = std::invoke(f, std::move(init), *first);
        for (++first; first != last; ++first)
            accum = std::invoke(f, std::move(accum), *first);
        return Ret{std::move(first), std::move(accum)};
    }
public:
    template<std::input_iterator I, std::sentinel_for<I> S, class T = std::iter_value_t<I>,
             /* indirectly-binary-left-foldable */<T, I> F>
    constexpr auto operator()(I first, S last, T init, F f) const
    {
        return impl<I>(std::move(first), std::move(last), std::move(init), std::ref(f));
    }
 
    template<ranges::input_range R, class T = ranges::range_value_t<R>,
             /* indirectly-binary-left-foldable */<T, ranges::iterator_t<R>> F>
    constexpr auto operator()(R&& r, T init, F f) const
    {
        return impl<ranges::borrowed_iterator_t<R>>
        (
            ranges::begin(r), ranges::end(r), std::move(init), std::ref(f)
        );
    }
};
 
inline constexpr fold_left_with_iter_fn fold_left_with_iter;

.SH Complexity

   Exactly ranges::distance(first, last) applications of the function object f.

.SH Notes

   The following table compares all constrained folding algorithms:

        Fold function template       Starts Initial             Return type
                                      from   value
   ranges::fold_left                 left   init    U
   ranges::fold_left_first           left   first   std::optional<U>
                                            element
   ranges::fold_right                right  init    U
   ranges::fold_right_last           right  last    std::optional<U>
                                            element
                                                    \fB(1)\fP ranges::in_value_result<I, U>

   ranges::fold_left_with_iter       left   init    \fB(2)\fP ranges::in_value_result<BR, U>,

                                                    where BR is
                                                    ranges::borrowed_iterator_t<R>
                                                    \fB(1)\fP ranges::in_value_result<I,
                                                    std::optional<U>>

   ranges::fold_left_first_with_iter left   first   \fB(2)\fP ranges::in_value_result<BR,
                                            element std::optional<U>>

                                                    where BR is
                                                    ranges::borrowed_iterator_t<R>

             Feature-test macro            Value    Std              Feature
   __cpp_lib_ranges_fold                  202207L (C++23) std::ranges fold algorithms
   __cpp_lib_algorithm_default_value_type 202403  (C++26) List-initialization for
                                                          algorithms (1,2)

.SH Example

   
// Run this code

 #include <algorithm>
 #include <cassert>
 #include <complex>
 #include <functional>
 #include <ranges>
 #include <utility>
 #include <vector>
  
 int main()
 {
     namespace ranges = std::ranges;
  
     std::vector v{1, 2, 3, 4, 5, 6, 7, 8};
  
     auto sum = ranges::fold_left_with_iter(v.begin(), v.end(), 6, std::plus<int>());
     assert(sum.value == 42);
     assert(sum.in == v.end());
  
     auto mul = ranges::fold_left_with_iter(v, 0X69, std::multiplies<int>());
     assert(mul.value == 4233600);
     assert(mul.in == v.end());
  
     // Get the product of the std::pair::second of all pairs in the vector:
     std::vector<std::pair<char, float>> data {{'A', 2.f}, {'B', 3.f}, {'C', 3.5f}};
     auto sec = ranges::fold_left_with_iter
     (
         data | ranges::views::values, 2.0f, std::multiplies<>()
     );
     assert(sec.value == 42);
  
     // Use a program defined function object (lambda-expression):
     auto lambda = [](int x, int y){ return x + 0B110 + y; };
     auto val = ranges::fold_left_with_iter(v, -42, lambda);
     assert(val.value == 42);
     assert(val.in == v.end());
  
     using CD = std::complex<double>;
     std::vector<CD> nums{{1, 1}, {2, 0}, {3, 0}};
     #ifdef __cpp_lib_algorithm_default_value_type
         auto res = ranges::fold_left_with_iter(nums, {7, 0}, std::multiplies{});
     #else
         auto res = ranges::fold_left_with_iter(nums, CD{7, 0}, std::multiplies{});
     #endif
     assert((res.value == CD{42, 42}));
 }

.SH References

     * C++23 standard (ISO/IEC 14882:2023):

     * 27.6.18 Fold [alg.fold]

.SH See also

   ranges::fold_left                 left-folds a range of elements
   (C++23)                           (niebloid)
   ranges::fold_left_first           left-folds a range of elements using the first
   (C++23)                           element as an initial value
                                     (niebloid)
   ranges::fold_right                right-folds a range of elements
   (C++23)                           (niebloid)
   ranges::fold_right_last           right-folds a range of elements using the last
   (C++23)                           element as an initial value
                                     (niebloid)
                                     left-folds a range of elements using the first
   ranges::fold_left_first_with_iter element as an initial value, and returns a pair
   (C++23)                           (iterator, optional)
                                     (niebloid)
   accumulate                        sums up or folds a range of elements
                                     \fI(function template)\fP 
   reduce                            similar to std::accumulate, except out of order
   \fI(C++17)\fP                           \fI(function template)\fP 
