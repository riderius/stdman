.TH std::is_abstract 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_abstract \- std::is_abstract

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_abstract;

   std::is_abstract is a UnaryTypeTrait.

   If T is an abstract class (that is, a non-union class that declares or inherits at
   least one pure virtual function), provides the member constant value equal to true.
   For any other type, value is false.

   If T is an incomplete non-union class type, the behavior is undefined.

   If the program adds specializations for std::is_abstract or std::is_abstract_v, the
   behavior is undefined.

.SH Template parameters

   T - a type to check

   Helper variable template

   template< class T >                                           \fI(since C++17)\fP
   inline constexpr bool is_abstract_v = is_abstract<T>::value;

   

Inherited from std::integral_constant

.SH Member constants

   value    true if T is an abstract class type, false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>
  
 struct A { int m; };
 static_assert(std::is_abstract_v<A> == false);
  
 struct B { virtual void foo(); };
 static_assert(std::is_abstract_v<B> == false);
  
 struct C { virtual void foo() = 0; };
 static_assert(std::is_abstract_v<C> == true);
  
 struct D : C {};
 static_assert(std::is_abstract_v<D> == true);
  
 int main() {}

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to     Behavior as published           Correct behavior
   LWG 2015 C++11      the behavior was undefined if the base characteristic is
                       T is an incomplete union type std::false_type in this case

.SH See also

   is_class       checks if a type is a non-union class type
   \fI(C++11)\fP        \fI(class template)\fP 
   is_polymorphic checks if a type is a polymorphic class type
   \fI(C++11)\fP        \fI(class template)\fP 
