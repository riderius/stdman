.TH std::is_object 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_object \- std::is_object

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_object;

   std::is_object is a UnaryTypeTrait.

   If T is an object type (that is any possibly cv-qualified type other than function,
   reference, or void types), provides the member constant value equal true. For any
   other type, value is false.

   If the program adds specializations for std::is_object or std::is_object_v, the
   behavior is undefined.

.SH Template parameters

   T - a type to check

   Helper variable template

   template< class T >                                       \fI(since C++17)\fP
   inline constexpr bool is_object_v = is_object<T>::value;

   

Inherited from std::integral_constant

.SH Member constants

   value    true if T is an object type, false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Possible implementation

   template<class T>
   struct is_object : std::integral_constant<bool,
                          std::is_scalar<T>::value ||
                          std::is_array<T>::value ||
                          std::is_union<T>::value ||
                          std::is_class<T>::value> {};

.SH Example

   
// Run this code

 #include <iomanip>
 #include <iostream>
 #include <type_traits>
  
 #define IS_OBJECT(...) \\
     std::cout << std::boolalpha << std::left << std::setw(9) << #__VA_ARGS__ \\
               << (std::is_object_v<__VA_ARGS__> ? " is object\\n" \\
                                                 : " is not an object\\n")
  
 int main()
 {
     class cls {};
  
     IS_OBJECT(void);
     IS_OBJECT(int);
     IS_OBJECT(int&);
     IS_OBJECT(int*);
     IS_OBJECT(int*&);
     IS_OBJECT(cls);
     IS_OBJECT(cls&);
     IS_OBJECT(cls*);
     IS_OBJECT(int());
     IS_OBJECT(int(*)());
     IS_OBJECT(int(&)());
 }

.SH Output:

 void      is not an object
 int       is object
 int&      is not an object
 int*      is object
 int*&     is not an object
 cls       is object
 cls&      is not an object
 cls*      is object
 int()     is not an object
 int(*)()  is object
 int(&)()  is not an object

.SH See also

   is_scalar checks if a type is a scalar type
   \fI(C++11)\fP   \fI(class template)\fP 
   is_array  checks if a type is an array type
   \fI(C++11)\fP   \fI(class template)\fP 
   is_union  checks if a type is a union type
   \fI(C++11)\fP   \fI(class template)\fP 
   is_class  checks if a type is a non-union class type
   \fI(C++11)\fP   \fI(class template)\fP 
