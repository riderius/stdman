.TH std::ranges::subrange::size 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::subrange::size \- std::ranges::subrange::size

.SH Synopsis
   constexpr /* see below */ size() const             \fI(since C++20)\fP
       requires (K == ranges::subrange_kind::sized);

   Obtains the number of elements in the subrange.

   The return type is the corresponding unsigned version of std::iter_difference_t<I>.

.SH Parameters

   \fI(none)\fP

.SH Return value

   s_ - i_ explicitly converted to the return type, where i_ and s_ are the stored
   iterator and sentinel respectively, if the size is not stored.

   Otherwise, the stored size.

.SH Notes

   The size is stored into a subrange if and only if K == ranges::subrange_kind::sized
   but std::sized_sentinel_for<S, I> is not satisfied.

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   empty        checks whether the subrange is empty
   (C++20)      \fI(public member function)\fP 
   size
   ssize        returns the size of a container or array
   \fI(C++17)\fP      \fI(function template)\fP 
   (C++20)
   ranges::size returns an integer equal to the size of a range
   (C++20)      (customization point object)

.SH Category:
     * Todo no example
