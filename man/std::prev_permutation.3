.TH std::prev_permutation 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::prev_permutation \- std::prev_permutation

.SH Synopsis
   Defined in header <algorithm>
   template< class BidirIt >                                \fB(1)\fP (constexpr since C++20)
   bool prev_permutation( BidirIt first, BidirIt last );
   template< class BidirIt, class Compare >
   bool prev_permutation( BidirIt first, BidirIt last,      \fB(2)\fP (constexpr since C++20)
   Compare comp );

   Transforms the range [first, last) into the previous permutation. Returns true if
   such permutation exists, otherwise transforms the range into the last permutation
   (as if by std::sort followed by std::reverse) and returns false.

   1) The set of all permutations is ordered lexicographically with respect to
   operator<
   \fI(until C++20)\fP
   std::less{}
   \fI(since C++20)\fP.
   2) The set of all permutations is ordered lexicographically with respect to comp.

   If
   the type of *first is not Swappable
   \fI(until C++11)\fP
   BidirIt is not ValueSwappable
   \fI(since C++11)\fP, the behavior is undefined.

.SH Parameters

   first, last -  the range of elements to permute
                  comparison function object (i.e. an object that satisfies the
                  requirements of Compare) which returns true if the first argument is
                  less than the second.

                  The signature of the comparison function should be equivalent to the
                  following:

                  bool cmp(const Type1& a, const Type2& b);
   comp        -
                  While the signature does not need to have const&, the function must
                  not modify the objects passed to it and must be able to accept all
                  values of type (possibly const) Type1 and Type2 regardless of value
                  category (thus, Type1& is not allowed
                  , nor is Type1 unless for Type1 a move is equivalent to a copy
                  \fI(since C++11)\fP).
                  The types Type1 and Type2 must be such that an object of type BidirIt
                  can be dereferenced and then implicitly converted to both of them.
.SH Type requirements
   -
   BidirIt must meet the requirements of ValueSwappable and
   LegacyBidirectionalIterator.

.SH Return value

   true if the new permutation precedes the old in lexicographical order. false if the
   first permutation was reached and the range was reset to the last permutation.

.SH Exceptions

   Any exceptions thrown from iterator operations or the element swap.

.SH Complexity

   Given \\(\\scriptsize N\\)N as std::distance(first, last):

   1,2) At most \\(\\scriptsize \\frac{N}{2}\\)

   N
   2

   swaps.

.SH Possible implementation

   template<class BidirIt>
   bool prev_permutation(BidirIt first, BidirIt last)
   {
       if (first == last)
           return false;
       BidirIt i = last;
       if (first == --i)
           return false;
    
       while \fB(1)\fP
       {
           BidirIt i1, i2;
    
           i1 = i;
           if (*i1 < *--i)
           {
               i2 = last;
               while (!(*--i2 < *i))
                   ;
               std::iter_swap(i, i2);
               std::reverse(i1, last);
               return true;
           }
    
           if (i == first)
           {
               std::reverse(first, last);
               return false;
           }
       }
   }

.SH Notes

   Averaged over the entire sequence of permutations, typical implementations use about
   3 comparisons and 1.5 swaps per call.

   Implementations (e.g. MSVC STL) may enable vectorization when the iterator type
   satisfies LegacyContiguousIterator and swapping its value type calls neither
   non-trivial special member function nor ADL-found swap.

.SH Example

   The following code prints all six permutations of the string "cab" in reverse order.

   
// Run this code

 #include <algorithm>
 #include <iostream>
 #include <string>
  
 int main()
 {
     std::string s = "cab";
  
     do
     {
         std::cout << s << ' ';
     }
     while (std::prev_permutation(s.begin(), s.end()));
  
     std::cout << s << '\\n';
 }

.SH Output:

 cab bca bac acb abc cba

.SH See also

   is_permutation           determines if a sequence is a permutation of another
   \fI(C++11)\fP                  sequence
                            \fI(function template)\fP 
                            generates the next greater lexicographic permutation of a
   next_permutation         range of elements
                            \fI(function template)\fP 
   ranges::prev_permutation generates the next smaller lexicographic permutation of a
   (C++20)                  range of elements
                            (niebloid)
