.TH std::priority_queue::push 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::priority_queue::push \- std::priority_queue::push

.SH Synopsis
   void push( const value_type& value );
   void push( value_type&& value );       \fI(since C++11)\fP

   Pushes the given element value to the priority queue.

   1) Effectively calls c.push_back(value); std::push_heap(c.begin(), c.end(), comp);.
   2) Effectively calls c.push_back(std::move(value)); std::push_heap(c.begin(),
   c.end(), comp);.

.SH Parameters

   value - the value of the element to push

.SH Return value

   \fI(none)\fP

.SH Complexity

   Logarithmic number of comparisons plus the complexity of Container::push_back.

.SH Example

   
// Run this code

 #include <iostream>
 #include <queue>
  
 struct Event
 {
     int priority{};
     char data{' '};
  
     friend bool operator<(Event const& lhs, Event const& rhs)
     {
         return lhs.priority < rhs.priority;
     }
  
     friend std::ostream& operator<<(std::ostream& os, Event const& e)
     {
         return os << '{' << e.priority << ", '" << e.data << "'}";
     }
 };
  
 int main()
 {
     std::priority_queue<Event> events;
  
     std::cout << "Fill the events queue:\\t";
  
     for (auto const e : {Event{6,'L'}, {8,'I'}, {9,'S'}, {1,'T'}, {5,'E'}, {3,'N'}})
     {
         std::cout << e << ' ';
         events.push(e);
     }
  
     std::cout << "\\nProcess events:\\t\\t";
  
     for (; !events.empty(); events.pop())
     {
         Event const& e = events.top();
         std::cout << e << ' ';
     }
  
     std::cout << '\\n';
 }

.SH Output:

 Fill the events queue:  {6, 'L'} {8, 'I'} {9, 'S'} {1, 'T'} {5, 'E'} {3, 'N'}
 Process events:         {9, 'S'} {8, 'I'} {6, 'L'} {5, 'E'} {3, 'N'} {1, 'T'}

.SH See also

   emplace constructs element in-place and sorts the underlying container
   \fI(C++11)\fP \fI(public member function)\fP 
   pop     removes the top element
           \fI(public member function)\fP 
