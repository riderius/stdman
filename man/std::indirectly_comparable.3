.TH std::indirectly_comparable 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::indirectly_comparable \- std::indirectly_comparable

.SH Synopsis
   Defined in header <iterator>
   template< class I1, class I2, class Comp,

             class Proj1 = std::identity, class Proj2 = std::identity >
   concept indirectly_comparable =                                        \fI(since C++20)\fP

       std::indirect_binary_predicate<Comp, std::projected<I1, Proj1>,
   std::projected<I2, Proj2>>;

   The concept indirectly_comparable specifies the fundamental algorithm requirement
   for comparing values across two independent ranges.

   Semantic requirements

   indirectly_comparable is modeled only if all concepts it subsumes are modeled.

.SH See also

                             specifies that a callable type, when invoked with the
   indirect_binary_predicate result of dereferencing two indirectly_readable types,
   (C++20)                   satisfies predicate
                             (concept) 
