.TH std::move_iterator::move_iterator 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::move_iterator::move_iterator \- std::move_iterator::move_iterator

.SH Synopsis
   move_iterator();                           \fI(until C++17)\fP
   constexpr move_iterator();                 \fI(since C++17)\fP
   explicit move_iterator(                                  \fI(until C++17)\fP
   iterator_type x );
   constexpr explicit move_iterator(                        \fI(since C++17)\fP
   iterator_type x );                 \fB(1)\fP
   template< class U >                    \fB(2)\fP
   move_iterator( const                                                   \fI(until C++17)\fP
   move_iterator<U>& other );                 \fB(3)\fP
   template< class U >
   constexpr move_iterator( const                                         \fI(since C++17)\fP
   move_iterator<U>& other );

   Constructs a new iterator adaptor.

   1) Default constructor. The underlying iterator is value-initialized. Operations on
   the resulting iterator have defined behavior if and only if the corresponding
   operations on a value-initialized Iter also have defined behavior.
   2) The underlying iterator is initialized with
   x
   \fI(until C++20)\fP
   std::move(x)
   \fI(since C++20)\fP.
   3) The underlying iterator is initialized with that of other.
   The behavior is undefined if U is not convertible to Iter
   \fI(until C++20)\fP
   This overload participates in overload resolution only if U is not the same type as
   Iter and std::convertible_to<const U&, Iter> is modeled
   \fI(since C++20)\fP.

.SH Parameters

   x     - iterator to adapt
   other - iterator adaptor to copy

.SH Example

    This section is incomplete
    Reason: no example

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to              Behavior as published              Correct behavior
   LWG 3435 C++20      the converting constructor from another         constrained
                       move_iterator was not constrained

.SH See also

   operator=          assigns another iterator adaptor
   \fI(C++11)\fP            \fI(public member function)\fP 
   make_move_iterator creates a std::move_iterator of type inferred from the argument
   \fI(C++11)\fP            \fI(function template)\fP 

.SH Category:
     * Todo no example
