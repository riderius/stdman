.TH std::is_final 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_final \- std::is_final

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++14)\fP
   struct is_final;

   std::is_final is a UnaryTypeTrait.

   If T is a final class, provides the member constant value equal true. For any other
   type, value is false.

   If T is an incomplete class type, the behavior is undefined.

   If the program adds specializations for std::is_final
   or std::is_final_v
   \fI(since C++17)\fP, the behavior is undefined.

.SH Template parameters

   T - a type to check

   Helper variable template

   template< class T >                                     \fI(since C++17)\fP
   inline constexpr bool is_final_v = is_final<T>::value;

   

Inherited from std::integral_constant

.SH Member constants

   value    true if T is a final class type, false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Notes

   std::is_final is introduced by the resolution of LWG issue 2112.

   A union can be declared final (and std::is_final will detect that), even though
   unions cannot be used as bases in any case.

   Feature-test macro  Value    Std      Feature
   __cpp_lib_is_final 201402L \fI(C++14)\fP std::is_final

.SH Example

   
// Run this code

 #include <type_traits>
  
 class A {};
 static_assert(std::is_final_v<A> == false);
  
 class B final {};
 static_assert(std::is_final_v<B> == true);
  
 union U final
 {
     int x;
     double d;
 };
 static_assert(std::is_final_v<U> == true);
  
 int main()
 {
 }

.SH See also

   is_class       checks if a type is a non-union class type
   \fI(C++11)\fP        \fI(class template)\fP 
   is_polymorphic checks if a type is a polymorphic class type
   \fI(C++11)\fP        \fI(class template)\fP 
