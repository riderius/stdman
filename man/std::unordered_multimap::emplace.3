.TH std::unordered_multimap::emplace 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::unordered_multimap::emplace \- std::unordered_multimap::emplace

.SH Synopsis
   template< class... Args >            \fI(since C++11)\fP
   iterator emplace( Args&&... args );

   Inserts a new element into the container constructed in-place with the given args.

   The constructor of the new element (i.e. std::pair<const Key, T>) is called with
   exactly the same arguments as supplied to emplace, forwarded via
   std::forward<Args>(args)....

   Careful use of emplace allows the new element to be constructed while avoiding
   unnecessary copy or move operations.

   If after the operation the new number of elements is greater than old
   max_load_factor() * bucket_count() a rehashing takes place.
   If rehashing occurs (due to the insertion), all iterators are invalidated. Otherwise
   (no rehashing), iterators are not invalidated.

.SH Parameters

   args - arguments to forward to the constructor of the element

.SH Return value

   An iterator to the inserted element.

.SH Exceptions

   If an exception is thrown for any reason, this function has no effect (strong
   exception safety guarantee).

.SH Complexity

   Amortized constant on average, worst case linear in the size of the container.

.SH Example

   
// Run this code

 #include <iostream>
 #include <string>
 #include <utility>
 #include <unordered_map>
  
 int main()
 {
     std::unordered_multimap<std::string, std::string> m;
  
     // uses pair's move constructor
     m.emplace(std::make_pair(std::string("a"), std::string("a")));
  
     // uses pair's converting move constructor
     m.emplace(std::make_pair("b", "abcd"));
  
     // uses pair's template constructor
     m.emplace("d", "ddd");
  
     // emplace with duplicate key
     m.emplace("d", "DDD");
  
     // uses pair's piecewise constructor
     m.emplace(std::piecewise_construct,
               std::forward_as_tuple("c"),
               std::forward_as_tuple(10, 'c'));
  
     for (const auto& p : m)
         std::cout << p.first << " => " << p.second << '\\n';
 }

.SH Possible output:

 a => a
 b => abcd
 c => cccccccccc
 d => ddd
 d => DDD

.SH See also

   emplace_hint constructs elements in-place using a hint
                \fI(public member function)\fP 
                inserts in-place if the key does not exist, does nothing if the key
   try_emplace  exists
                \fI(public member function)\fP 
                inserts elements
   insert       or nodes
                \fI(since C++17)\fP
                \fI(public member function)\fP 
