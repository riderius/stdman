.TH std::is_pod 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_pod \- std::is_pod

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_pod;                   (deprecated in C++20)

   std::is_pod is a UnaryTypeTrait.

   If T is a POD type ("plain old data type"), provides the member constant value equal
   to true. For any other type, value is false.

   If std::remove_all_extents_t<T> is an incomplete type and not (possibly
   cv-qualified) void, the behavior is undefined.

   If the program adds specializations for std::is_pod or std::is_pod_v, the behavior
   is undefined.

.SH Template parameters

   T - a type to check

   Helper variable template

   template< class T >                                 \fI(since C++17)\fP
   inline constexpr bool is_pod_v = is_pod<T>::value;  (deprecated in C++20)

   

Inherited from std::integral_constant

.SH Member constants

   value    true if T is a POD type, false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Example

   
// Run this code

 #include <type_traits>
  
 struct A { int m; };
 static_assert(std::is_pod_v<A> == true);
  
 class B: public A { int m; };
 static_assert(std::is_pod_v<B> == false);
  
 struct C { virtual void foo(); };
 static_assert(std::is_pod_v<C> == false);
  
 int main() {}

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to       Behavior as published          Correct behavior
   LWG 2015 C++11      T could be an array of incomplete the behavior is
                       class type with unknown bound     undefined in this case

.SH See also

   is_standard_layout checks if a type is a standard-layout type
   \fI(C++11)\fP            \fI(class template)\fP 
   is_trivial         checks if a type is trivial
   \fI(C++11)\fP            \fI(class template)\fP 
   is_scalar          checks if a type is a scalar type
   \fI(C++11)\fP            \fI(class template)\fP 

.SH External links

   Why is std::is_pod deprecated in C++20? â€” StackOverflow
