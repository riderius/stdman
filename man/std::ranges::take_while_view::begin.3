.TH std::ranges::take_while_view::begin 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::take_while_view::begin \- std::ranges::take_while_view::begin

.SH Synopsis
   constexpr auto begin() requires (!__SimpleView<V>);                \fB(1)\fP \fI(since C++20)\fP
   constexpr auto begin() const requires

       ranges::range<const V> &&                                      \fB(2)\fP \fI(since C++20)\fP

       std::indirect_unary_predicate<const Pred,
   ranges::iterator_t<const V>>;

   Returns an iterator to the first element of the view. Effectively calls
   ranges::begin on the underlying view.

   Overload \fB(1)\fP does not participate in overload resolution if V is a simple view (that
   is, if V and const V are views with the same iterator and sentinel types).

.SH Parameters

   \fI(none)\fP

.SH Return value

   ranges::begin(base_), where base_ is the underlying view.

.SH Example

    This section is incomplete
    Reason: no example

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to              Behavior as published              Correct behavior
   LWG 3450 C++20      the const overload might return an iterator     constrained
                       non-comparable to the sentinel

.SH See also

   end        returns a sentinel representing the end
   (C++20)    \fI(public member function)\fP 
   operator== compares a sentinel with an iterator returned from take_while_view::begin
   (C++20)    \fI(function)\fP 

.SH Category:
     * Todo no example
