.TH std::cyl_neumann,std::cyl_neumannf,std::cyl_neumannl 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::cyl_neumann,std::cyl_neumannf,std::cyl_neumannl \- std::cyl_neumann,std::cyl_neumannf,std::cyl_neumannl

.SH Synopsis
   Defined in header <cmath>
   float       cyl_neumann ( float nu, float x );
                                                                          \fI(since C++17)\fP
   double      cyl_neumann ( double nu, double x );                       (until C++23)

   long double cyl_neumann ( long double nu, long double x );
   /* floating-point-type */ cyl_neumann( /* floating-point-type
   */ nu,                                                                 (since C++23)
                                          /* floating-point-type
   */ x );                                                        \fB(1)\fP
   float       cyl_neumannf( float nu, float x );                     \fB(2)\fP \fI(since C++17)\fP
   long double cyl_neumannl( long double nu, long double x );         \fB(3)\fP \fI(since C++17)\fP
   Additional overloads
   Defined in header <cmath>
   template< class Arithmetic1, class Arithmetic2 >

   /* common-floating-point-type */                                   (A) \fI(since C++17)\fP

       cyl_neumann( Arithmetic1 nu, Arithmetic2 x );

   1-3) Computes the cylindrical Neumann function (also known as Bessel function of the
   second kind or Weber function) of nu and x.
   The library provides overloads of std::cyl_neumann for all cv-unqualified
   floating-point types as the type of the parameters nu and x.
   (since C++23)
   A) Additional overloads are provided for all other combinations of arithmetic types.

.SH Parameters

   nu - the order of the function
   x  - the argument of the function

.SH Return value

   If no errors occur, value of the cylindrical Neumann function (Bessel function of
   the second kind) of nu and x, is returned, that is N
   nu(x) =

   J
   nu(x)cos(nuπ)-J
   -nu(x)
   sin(nuπ)

   (where J
   nu(x) is std::cyl_bessel_j(nu, x)) for x≥0 and non-integer nu; for integer nu a
   limit is used.

.SH Error handling

   Errors may be reported as specified in math_errhandling:

     * If the argument is NaN, NaN is returned and domain error is not reported.
     * If nu≥128, the behavior is implementation-defined.

.SH Notes

   Implementations that do not support C++17, but support ISO 29124:2010, provide this
   function if __STDCPP_MATH_SPEC_FUNCS__ is defined by the implementation to a value
   at least 201003L and if the user defines __STDCPP_WANT_MATH_SPEC_FUNCS__ before
   including any standard library headers.

   Implementations that do not support ISO 29124:2010 but support TR 19768:2007 (TR1),
   provide this function in the header tr1/cmath and namespace std::tr1.

   An implementation of this function is also available in boost.math.

   The additional overloads are not required to be provided exactly as (A). They only
   need to be sufficient to ensure that for their first argument num1 and second
   argument num2:

     * If num1 or num2 has type long double, then std::cyl_neumann(num1,
       num2) has the same effect as std::cyl_neumann(static_cast<long
       double>(num1),
                        static_cast<long double>(num2)).
     * Otherwise, if num1 and/or num2 has type double or an integer type,
       then std::cyl_neumann(num1, num2) has the same effect as           (until C++23)
       std::cyl_neumann(static_cast<double>(num1),
                        static_cast<double>(num2)).
     * Otherwise, if num1 or num2 has type float, then
       std::cyl_neumann(num1, num2) has the same effect as
       std::cyl_neumann(static_cast<float>(num1),
                        static_cast<float>(num2)).
   If num1 and num2 have arithmetic types, then std::cyl_neumann(num1,
   num2) has the same effect as std::cyl_neumann(static_cast</*
   common-floating-point-type */>(num1),
                    static_cast</* common-floating-point-type */>(num2)),
   where /* common-floating-point-type */ is the floating-point type with
   the greatest floating-point conversion rank and greatest
   floating-point conversion subrank between the types of num1 and num2,  (since C++23)
   arguments of integer type are considered to have the same
   floating-point conversion rank as double.

   If no such floating-point type with the greatest rank and subrank
   exists, then overload resolution does not result in a usable candidate
   from the overloads provided.

.SH Example

   
// Run this code

 #include <cassert>
 #include <cmath>
 #include <iostream>
 #include <numbers>
  
 const double π = std::numbers::pi; // or std::acos(-1) in pre C++20
  
 // To calculate the cylindrical Neumann function via cylindrical Bessel function of the
 // first kind we have to implement J, because the direct invocation of the
 // std::cyl_bessel_j(nu, x), per formula above,
 // for negative nu raises 'std::domain_error': Bad argument in __cyl_bessel_j.
  
 double J_neg(double nu, double x)
 {
     return std::cos(-nu * π) * std::cyl_bessel_j(-nu, x)
           -std::sin(-nu * π) * std::cyl_neumann(-nu, x);
 }
  
 double J_pos(double nu, double x)
 {
     return std::cyl_bessel_j(nu, x);
 }
  
 double J(double nu, double x)
 {
     return nu < 0.0 ? J_neg(nu, x) : J_pos(nu, x);
 }
  
 int main()
 {
     std::cout << "spot checks for nu == 0.5\\n" << std::fixed << std::showpos;
     const double nu = 0.5;
     for (double x = 0.0; x <= 2.0; x += 0.333)
     {
         const double n = std::cyl_neumann(nu, x);
         const double j = (J(nu, x) * std::cos(nu * π) - J(-nu, x)) / std::sin(nu * π);
         std::cout << "N_.5(" << x << ") = " << n << ", calculated via J = " << j << '\\n';
         assert(n == j);
     }
 }

.SH Output:

 spot checks for nu == 0.5
 N_.5(+0.000000) = -inf, calculated via J = -inf
 N_.5(+0.333000) = -1.306713, calculated via J = -1.306713
 N_.5(+0.666000) = -0.768760, calculated via J = -0.768760
 N_.5(+0.999000) = -0.431986, calculated via J = -0.431986
 N_.5(+1.332000) = -0.163524, calculated via J = -0.163524
 N_.5(+1.665000) = +0.058165, calculated via J = +0.058165
 N_.5(+1.998000) = +0.233876, calculated via J = +0.233876

.SH See also

   cyl_bessel_i
   cyl_bessel_if
   cyl_bessel_il regular modified cylindrical Bessel functions
   \fI(C++17)\fP       \fI(function)\fP 
   \fI(C++17)\fP
   \fI(C++17)\fP
   cyl_bessel_j
   cyl_bessel_jf
   cyl_bessel_jl cylindrical Bessel functions (of the first kind)
   \fI(C++17)\fP       \fI(function)\fP 
   \fI(C++17)\fP
   \fI(C++17)\fP
   cyl_bessel_k
   cyl_bessel_kf
   cyl_bessel_kl irregular modified cylindrical Bessel functions
   \fI(C++17)\fP       \fI(function)\fP 
   \fI(C++17)\fP
   \fI(C++17)\fP

.SH External links

   Weisstein, Eric W. "Bessel Function of the Second Kind." From MathWorld — A Wolfram
   Web Resource.
