.TH std::is_literal_type 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_literal_type \- std::is_literal_type

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_literal_type;          (deprecated in C++17)
                                    (removed in C++20)

   std::is_literal_type is a UnaryTypeTrait.

   (This type trait has been deprecated^[1] and removed^[2] as offering negligible
   value to generic code.)

   If T satisfies all requirements of LiteralType, provides the member constant value
   equal to true. For any other type, value is false.

   If std::remove_all_extents_t<T> is an incomplete type and not (possibly
   cv-qualified) void, the behavior is undefined.

   If the program adds specializations for std::is_literal_type or
   std::is_literal_type_v, the behavior is undefined.

.SH Template parameters

   T - a type to check

   Helper variable template

   template< class T >                                               \fI(since C++17)\fP
   inline constexpr bool is_literal_type_v =                         \fB(deprecated)\fP
   is_literal_type<T>::value;                                        (removed in C++20)

   

Inherited from std::integral_constant

.SH Member constants

   value    true if T is a literal type, false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Notes

   Only literal types may be used as parameters to or returned from constexpr
   functions. Only literal classes may have constexpr member functions.

.SH Example

   
// Run this code

 #include <type_traits>
  
 struct A { int m; };
 static_assert(std::is_literal_type_v<A> == true);
  
 struct B { virtual ~B(); };
 static_assert(std::is_literal_type_v<B> == false);
  
 int main() {}

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to       Behavior as published          Correct behavior
   LWG 2015 C++11      T could be an array of incomplete the behavior is
                       class type with unknown bound     undefined in this case

.SH External links

    1. ↑ Alisdair Meredith. "Deprecate the is_literal Trait". Deprecating Vestigial
       Library Parts in C++17. "The is_literal type trait offers negligible value to
       generic code, as what is really needed is the ability to know that a specific
       construction would produce constant initialization."
    2. ↑ Alisdair Meredith, Stephan T. Lavavej, Tomasz Kamiński. "Deprecated type
       traits". Reviewing Deprecated Facilities of C++17 for C++20. "Strong
       recommendation: Remove the traits that can live on as zombies. [...] Toronto
       Review: Accept strong recommendation, strike from C++20."
