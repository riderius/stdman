.TH std::numeric_limits::is_exact 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::numeric_limits::is_exact \- std::numeric_limits::is_exact

.SH Synopsis
   static const bool is_exact;      \fI(until C++11)\fP
   static constexpr bool is_exact;  \fI(since C++11)\fP

   The value of std::numeric_limits<T>::is_exact is true for all arithmetic types T
   that use exact representation.

.SH Standard specializations

   T                                value of std::numeric_limits<T>::is_exact
   /* non-specialized */            false
   bool                             true
   char                             true
   signed char                      true
   unsigned char                    true
   wchar_t                          true
   char8_t \fI(since C++20)\fP            true
   char16_t \fI(since C++11)\fP           true
   char32_t \fI(since C++11)\fP           true
   short                            true
   unsigned short                   true
   int                              true
   unsigned int                     true
   long                             true
   unsigned long                    true
   long long \fI(since C++11)\fP          true
   unsigned long long \fI(since C++11)\fP true
   float                            false
   double                           false
   long double                      false

.SH Notes

   While all fundamental types T for which std::numeric_limits<T>::is_exact == true are
   integer types, a library may define exact types that are not integers, e.g. a
   rational arithmetic type representing fractions.

.SH See also

   is_integer identifies integer types
   \fB[static]\fP   \fI(public static member constant)\fP 
   is_signed  identifies signed types
   \fB[static]\fP   \fI(public static member constant)\fP 
   is_bounded identifies types that represent a finite set of values
   \fB[static]\fP   \fI(public static member constant)\fP 
