.TH std::signbit 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::signbit \- std::signbit

.SH Synopsis
   Defined in header <cmath>
   bool signbit( float num );
                                                                \fI(since C++11)\fP
   bool signbit( double num );                                  (until C++23)

   bool signbit( long double num );
   constexpr bool signbit( /* floating-point-type */    \fB(1)\fP     (since C++23)
   num );
   Additional overloads
   Defined in header <cmath>
   template< class Integer >                                (A) \fI(since C++11)\fP
   bool signbit( Integer num );                                 (constexpr since C++23)

   1) Determines if the given floating point number num is negative.
   The library provides overloads for all cv-unqualified floating-point types as the
   type of the parameter num.
   (since C++23)
   A) Additional overloads are provided for all integer types, which are treated as
   double.

.SH Parameters

   num - floating-point or integer value

.SH Return value

   true if num is negative, false otherwise.

.SH Notes

   This function detects the sign bit of zeroes, infinities, and NaNs. Along with
   std::copysign, std::signbit is one of the only two portable ways to examine the sign
   of a NaN.

   The additional overloads are not required to be provided exactly as (A). They only
   need to be sufficient to ensure that for their argument num of integer type,
   std::signbit(num) has the same effect as std::signbit(static_cast<double>(num)).

.SH Example

   
// Run this code

 #include <cmath>
 #include <iostream>
  
 int main()
 {
     std::cout << std::boolalpha
               << "signbit(+0.0) = " << std::signbit(+0.0) << '\\n'
               << "signbit(-0.0) = " << std::signbit(-0.0) << '\\n'
               << "signbit(+nan) = " << std::signbit(+NAN) << '\\n'
               << "signbit(-nan) = " << std::signbit(-NAN) << '\\n'
               << "signbit(+inf) = " << std::signbit(+INFINITY) << '\\n'
               << "signbit(-inf) = " << std::signbit(-INFINITY) << '\\n';
 }

.SH Output:

 signbit(+0.0) = false
 signbit(-0.0) = true
 signbit(+nan) = false
 signbit(-nan) = true
 signbit(+inf) = false
 signbit(-inf) = true

.SH See also

   abs(float)
   fabs
   fabsf      absolute value of a floating point value (\\(\\small{|x|}\\)|x|)
   fabsl      \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   copysign
   copysignf
   copysignl  copies the sign of a floating point value
   \fI(C++11)\fP    \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   C documentation for
   signbit
