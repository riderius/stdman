.TH std::reverse_iterator::operator[] 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::reverse_iterator::operator[] \- std::reverse_iterator::operator[]

.SH Synopsis
   /* unspecified */ operator[]( difference_type n ) const;            \fI(until C++17)\fP
   constexpr /* unspecified */ operator[]( difference_type n ) const;  \fI(since C++17)\fP

   Returns a reference to the element at specified relative location.

.SH Parameters

   n - position relative to current location

.SH Return value

   A reference to the element at relative location, that is, base()[-n - 1].

.SH Notes

   The return type was changed by LWG386 to be unspecified because the return type of
   the underlying iterator's operator[] was also unspecified at the time. However, as
   of N3066, the return type of a LegacyRandomAccessIterator's operator[] is required
   to be convertible to reference. In all common implementations, the return type of
   reverse_iterator::operator[] is declared to be reference. See also LWG2595.

.SH Example

   
// Run this code

 #include <array>
 #include <cstddef>
 #include <iostream>
 #include <iterator>
 #include <list>
 #include <vector>
  
 int main()
 {
     int a[]{0, 1, 2, 3};
     std::reverse_iterator<int*> iter1{std::rbegin(a)};
     for (std::size_t i{}; i != std::size(a); ++i)
         std::cout << iter1[i] << ' '; // decltype(iter1[i]) is `int&`
     std::cout << '\\n';
  
     std::vector v{0, 1, 2, 3};
     std::reverse_iterator<std::vector<int>::iterator> iter2{std::rbegin(v)};
     for (std::size_t i{}; i != std::size(v); ++i)
         std::cout << iter2[i] << ' '; // decltype(iter2[i]) is `int&`
     std::cout << '\\n';
  
     // constexpr context
     constexpr static std::array<int, 4> z{0, 1, 2, 3};
     constexpr std::reverse_iterator<decltype(z)::const_iterator> iter3{std::crbegin(z)};
     static_assert(iter3[1] == 2);
  
     std::list li{0, 1, 2, 3};
     std::reverse_iterator<std::list<int>::iterator> iter4{std::rbegin(li)};
     *iter4 = 42;   // OK
 //  iter4[0] = 13; // compilation error: the underlying iterator
                    // does not model the random access iterator
 }

.SH Output:

 3 2 1 0
 3 2 1 0

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

     DR    Applied to     Behavior as published     Correct behavior
   LWG 386 C++98      the return type was reference made unspecified

.SH See also

   operator*  accesses the pointed-to element
   operator-> \fI(public member function)\fP 
