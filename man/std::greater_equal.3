.TH std::greater_equal 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::greater_equal \- std::greater_equal

.SH Synopsis
   Defined in header <functional>
   template< class T >             \fI(until C++14)\fP
   struct greater_equal;
   template< class T = void >      \fI(since C++14)\fP
   struct greater_equal;

   Function object for performing comparisons. The main template invokes operator>= on
   type T.

.SH Specializations

   greater_equal<void> function object implementing x >= y deducing parameter and
   \fI(C++14)\fP             return types
                       \fI(class template specialization)\fP 

.SH Member types

   Type                                                         Definition
   result_type (deprecated in C++17)(removed in C++20)          bool
   first_argument_type (deprecated in C++17)(removed in C++20)  T
   second_argument_type (deprecated in C++17)(removed in C++20) T

   These member types are obtained via publicly inheriting                \fI(until C++11)\fP
   std::binary_function<T, T, bool>.

.SH Member functions

   operator() checks if the first argument is greater than or equal to the second
              \fI(public member function)\fP

std::greater_equal::operator()

   bool operator()( const T& lhs, const T& rhs ) const;            \fI(until C++14)\fP
   constexpr bool operator()( const T& lhs, const T& rhs ) const;  \fI(since C++14)\fP

   Checks whether lhs is greater than or equal to rhs.

.SH Parameters

   lhs, rhs - values to compare

.SH Return value

   lhs >= rhs.

   If T is a pointer type, the result is consistent with the implementation-defined
   strict total order over pointers.

.SH Exceptions

   May throw implementation-defined exceptions.

.SH Possible implementation

   constexpr bool operator()(const T& lhs, const T& rhs) const
   {
       return lhs >= rhs; // assumes that the implementation handles pointer total order
   }

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to        Behavior as published              Correct behavior
   LWG 2562 C++98      the pointer total order might be     guaranteed to be consistent
                       inconsistent

.SH See also

   less                  function object implementing x < y
                         \fI(class template)\fP 
   ranges::greater_equal constrained function object implementing x >= y
   (C++20)               \fI(class)\fP 
