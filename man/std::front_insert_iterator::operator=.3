.TH std::front_insert_iterator::operator= 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::front_insert_iterator::operator= \- std::front_insert_iterator::operator=

.SH Synopsis
   front_insert_iterator<Container>&
       operator=( typename                                  \fI(until C++11)\fP
   Container::const_reference value );
   front_insert_iterator<Container>&                        \fI(since C++11)\fP
       operator=( const typename                            \fI(until C++20)\fP
   Container::value_type& value );
   constexpr front_insert_iterator<Container>&
       operator=( const typename                    \fB(1)\fP     \fI(since C++20)\fP
   Container::value_type& value );
   front_insert_iterator<Container>&                                      \fI(since C++11)\fP
       operator=( typename Container::value_type&&                        \fI(until C++20)\fP
   value );                                             \fB(2)\fP
   constexpr front_insert_iterator<Container>&
       operator=( typename Container::value_type&&                        \fI(since C++20)\fP
   value );

   Inserts the given value value to the container.

   1) Results in container->push_front(value).
   2) Results in container->push_front(std::move(value)).

.SH Parameters

   value - the value to insert

.SH Return value

   *this

.SH Example

   
// Run this code

 #include <deque>
 #include <iostream>
 #include <iterator>
  
 int main()
 {
     std::deque<int> q;
     std::front_insert_iterator<std::deque<int>> it(q);
  
     for (int i = 0; i < 10; ++i)
         it = i; // calls q.push_front(i)
  
     for (auto& elem : q)
         std::cout << elem << ' ';
     std::cout << '\\n';
 }

.SH Output:

 9 8 7 6 5 4 3 2 1 0
