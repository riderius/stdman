.TH std::bad_variant_access 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::bad_variant_access \- std::bad_variant_access

.SH Synopsis
   Defined in header <variant>
   class bad_variant_access : public std::exception  \fI(since C++17)\fP

   std::bad_variant_access is the type of the exception thrown in the following
   situations:

     * std::get(std::variant) called with an index or type that does not match the
       currently active alternative.
     * std::visit called to visit a variant that is valueless_by_exception.

.SH Member functions

   constructor   constructs a new bad_variant_access object
                 \fI(public member function)\fP
   operator=     replaces the bad_variant_access object
                 \fI(public member function)\fP
   what          returns the explanatory string
                 \fI(public member function)\fP

std::bad_variant_access::bad_variant_access

   bad_variant_access() noexcept;                                  \fB(1)\fP \fI(since C++17)\fP
   bad_variant_access( const bad_variant_access& other ) noexcept; \fB(2)\fP \fI(since C++17)\fP

   Constructs a new bad_variant_access object with an implementation-defined
   null-terminated byte string which is accessible through what().

   1) Default constructor.
   2) Copy constructor. If *this and other both have dynamic type
   std::bad_variant_access then std::strcmp(what(), other.what()) == 0.

.SH Parameters

   other - another exception object to copy

std::bad_variant_access::operator=

   bad_variant_access& operator=( const bad_variant_access& other )       \fI(since C++17)\fP
   noexcept;

   Assigns the contents with those of other. If *this and other both have dynamic type
   std::bad_variant_access then std::strcmp(what(), other.what()) == 0 after
   assignment.

.SH Parameters

   other - another exception object to assign with

.SH Return value

   *this

std::bad_variant_access::what

   virtual const char* what() const noexcept;  \fI(since C++17)\fP

   Returns the explanatory string.

.SH Parameters

   \fI(none)\fP

.SH Return value

   Pointer to a null-terminated string with explanatory information. The string is
   suitable for conversion and display as a std::wstring. The pointer is guaranteed to
   be valid at least until the exception object from which it is obtained is destroyed,
   or until a non-const member function (e.g. copy assignment operator) on the
   exception object is called.

.SH Notes

   Implementations are allowed but not required to override what().

Inherited from std::exception

.SH Member functions

   destructor   destroys the exception object
   \fB[virtual]\fP    \fI(virtual public member function of std::exception)\fP 
   what         returns an explanatory string
   \fB[virtual]\fP    \fI(virtual public member function of std::exception)\fP 

.SH Example

   
// Run this code

 #include <iostream>
 #include <variant>
  
 int main()
 {
     std::variant<int, float> v;
     v = 12;
     try
     {
         std::get<float>(v);
     }
     catch (const std::bad_variant_access& e)
     {
         std::cout << e.what() << '\\n';
     }
 }

.SH Possible output:

 bad_variant_access

.SH See also

   get(std::variant) reads the value of the variant given the index or the type (if the
   \fI(C++17)\fP           type is unique), throws on error
                     \fI(function template)\fP 
   visit             calls the provided functor with the arguments held by one or more
   \fI(C++17)\fP           variants
                     \fI(function template)\fP 
