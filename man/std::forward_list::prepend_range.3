.TH std::forward_list::prepend_range 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::forward_list::prepend_range \- std::forward_list::prepend_range

.SH Synopsis
   template< container-compatible-range<T> R >  (since C++23)
   void prepend_range( R&& rg );

   Inserts, in non-reversing order, copies of elements in rg before begin(). Each
   iterator in the range rg is dereferenced exactly once.

   No iterators or references are invalidated.

.SH Parameters

   rg        -        a container compatible range, that is, an input_range whose
                      elements are convertible to T
.SH Type requirements
   -
   T must be EmplaceConstructible into forward_list from *ranges::begin(rg). Otherwise,
   the behavior is undefined.

.SH Return value

   \fI(none)\fP

.SH Complexity

   Linear in size of rg.

.SH Notes

       Feature-test macro       Value    Std                   Feature
   __cpp_lib_containers_ranges 202202L (C++23) Ranges-aware construction and insertion

.SH Example

   
// Run this code

 #include <algorithm>
 #include <cassert>
 #include <forward_list>
 #include <vector>
  
 int main()
 {
     auto container = std::forward_list{0, 1, 2, 3};
     const auto rg = std::vector{-3, -2, -1};
  
 #if __cpp_lib_containers_ranges
     container.prepend_range(rg);
 #else
     container.insert_after(container.before_begin(), rg.cbegin(), rg.cend());
 #endif
     assert(std::ranges::equal(container, std::forward_list{-3, -2, -1, 0, 1, 2, 3}));
 }

.SH See also

   insert_range       inserts a range of elements
   (C++23)            \fI(public member function)\fP
   insert_range_after inserts a range of elements after an element
   (C++23)            \fI(public member function)\fP
   push_front         inserts an element to the beginning
                      \fI(public member function)\fP
   emplace_front      constructs an element in-place at the beginning
                      \fI(public member function)\fP
