.TH std::tan,std::tanf,std::tanl 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::tan,std::tanf,std::tanl \- std::tan,std::tanf,std::tanl

.SH Synopsis
   Defined in header <cmath>
   float       tan ( float num );

   double      tan ( double num );                            (until C++23)

   long double tan ( long double num );
   /* floating-point-type */                                  (since C++23)
               tan ( /* floating-point-type */ num );         (constexpr since C++26)
   float       tanf( float num );                     \fB(1)\fP \fB(2)\fP \fI(since C++11)\fP
                                                              (constexpr since C++26)
   long double tanl( long double num );                   \fB(3)\fP \fI(since C++11)\fP
                                                              (constexpr since C++26)
   Additional overloads \fI(since C++11)\fP
   Defined in header <cmath>
   template< class Integer >                              (A) (constexpr since C++26)
   double      tan ( Integer num );

   1-3) Computes the tangent of num (measured in radians).
   The library provides overloads of std::tan for all cv-unqualified floating-point
   types as the type of the parameter.
   (since C++23)

   A) Additional overloads are provided for all integer types, which are  \fI(since C++11)\fP
   treated as double.

.SH Parameters

   num - floating-point or integer value representing angle in radians

.SH Return value

   If no errors occur, the tangent of num (tan(num)) is returned.

   The result may have little or no significance if the magnitude of num  \fI(until C++11)\fP
   is large.

   If a domain error occurs, an implementation-defined value is returned (NaN where
   supported).

   If a range error occurs due to underflow, the correct result (after rounding) is
   returned.

.SH Error handling

   Errors are reported as specified in math_errhandling.

   If the implementation supports IEEE floating-point arithmetic (IEC 60559),

     * if the argument is ±0, it is returned unmodified.
     * if the argument is ±∞, NaN is returned and FE_INVALID is raised.
     * if the argument is NaN, NaN is returned.

.SH Notes

   The case where the argument is infinite is not specified to be a domain error in C
   (to which C++ defers), but it is defined as a domain error in POSIX.

   The function has mathematical poles at π(1/2 + n); however no common floating-point
   representation is able to represent π/2 exactly, thus there is no value of the
   argument for which a pole error occurs.

   The additional overloads are not required to be provided exactly as (A). They only
   need to be sufficient to ensure that for their argument num of integer type,
   std::tan(num) has the same effect as std::tan(static_cast<double>(num)).

.SH Example

   
// Run this code

 #include <cerrno>
 #include <cfenv>
 #include <cmath>
 #include <iostream>
  
 // #pragma STDC FENV_ACCESS ON
 const double pi = std::acos(-1); // or C++20's std::numbers::pi
  
 int main()
 {
     // typical usage
     std::cout << "tan(1*pi/4) = " << std::tan(1*pi/4) << '\\n' // 45°
               << "tan(3*pi/4) = " << std::tan(3*pi/4) << '\\n' // 135°
               << "tan(5*pi/4) = " << std::tan(5*pi/4) << '\\n' // -135°
               << "tan(7*pi/4) = " << std::tan(7*pi/4) << '\\n'; // -45°
  
     // special values
     std::cout << "tan(+0) = " << std::tan(0.0) << '\\n'
               << "tan(-0) = " << std::tan(-0.0) << '\\n';
  
     // error handling
     std::feclearexcept(FE_ALL_EXCEPT);
  
     std::cout << "tan(INFINITY) = " << std::tan(INFINITY) << '\\n';
     if (std::fetestexcept(FE_INVALID))
         std::cout << "    FE_INVALID raised\\n";
 }

.SH Possible output:

 tan(1*pi/4) = 1
 tan(3*pi/4) = -1
 tan(5*pi/4) = 1
 tan(7*pi/4) = -1
 tan(+0) = 0
 tan(-0) = -0
 tan(INFINITY) = -nan
     FE_INVALID raised

.SH See also

   sin
   sinf               computes sine (\\({\\small\\sin{x}}\\)sin(x))
   sinl               \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   cos
   cosf               computes cosine (\\({\\small\\cos{x}}\\)cos(x))
   cosl               \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   atan
   atanf              computes arc tangent (\\({\\small\\arctan{x}}\\)arctan(x))
   atanl              \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   tan(std::complex)  computes tangent of a complex number (\\({\\small\\tan{z}}\\)tan(z))
                      \fI(function template)\fP 
   tan(std::valarray) applies the function std::tan to each element of valarray
                      \fI(function template)\fP 
   C documentation for
   tan
