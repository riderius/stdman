.TH std::is_copy_constructible,std::is_trivially_copy_constructible, 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_copy_constructible,std::is_trivially_copy_constructible, \- std::is_copy_constructible,std::is_trivially_copy_constructible,

.SH Synopsis

   Defined in header <type_traits>
   template< class T >                     \fB(1)\fP \fI(since C++11)\fP
   struct is_copy_constructible;
   template< class T >                     \fB(2)\fP \fI(since C++11)\fP
   struct is_trivially_copy_constructible;
   template< class T >                     \fB(3)\fP \fI(since C++11)\fP
   struct is_nothrow_copy_constructible;

                                The value of the member constant value
    Type trait              T is a referenceable type                   T is not a
                                                                   referenceable type 
   \fB(1)\fP          std::is_constructible<T, const T&>::value
   \fB(2)\fP          std::is_trivially_constructible<T, const           false
                T&>::value
   \fB(3)\fP          std::is_nothrow_constructible<T, const T&>::value

   If T is not a complete type, (possibly cv-qualified) void, or an array of unknown
   bound, the behavior is undefined.

   If an instantiation of a template above depends, directly or indirectly, on an
   incomplete type, and that instantiation could yield a different result if that type
   were hypothetically completed, the behavior is undefined.

   If the program adds specializations for any of the templates described on this page,
   the behavior is undefined.

.SH Member constants

   value    true if T is copy-constructible, false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Possible implementation

   template<class T>
   struct is_copy_constructible :
       std::is_constructible<T, typename std::add_lvalue_reference<
           typename std::add_const<T>::type>::type> {};
    
   template<class T>
   struct is_trivially_copy_constructible :
       std::is_trivially_constructible<T, typename std::add_lvalue_reference<
           typename std::add_const<T>::type>::type> {};
    
   template<class T>
   struct is_nothrow_copy_constructible :
       std::is_nothrow_constructible<T, typename std::add_lvalue_reference<
           typename std::add_const<T>::type>::type> {};

.SH Notes

   In many implementations, is_nothrow_copy_constructible also checks if the destructor
   throws because it is effectively noexcept(T(arg)). Same applies to
   is_trivially_copy_constructible, which, in these implementations, also requires that
   the destructor is trivial: GCC bug 51452, LWG issue 2116.

.SH Example

   
// Run this code

 #include <string>
 #include <type_traits>
  
 struct S1
 {
     std::string str; // member has a non-trivial copy constructor
 };
 static_assert(std::is_copy_constructible_v<S1>);
 static_assert(!std::is_trivially_copy_constructible_v<S1>);
  
 struct S2
 {
     int n;
     S2(const S2&) = default; // trivial and non-throwing
 };
 static_assert(std::is_trivially_copy_constructible_v<S2>);
 static_assert(std::is_nothrow_copy_constructible_v<S2>);
  
 struct S3
 {
     S3(const S3&) = delete; // explicitly deleted
 };
 static_assert(!std::is_copy_constructible_v<S3>);
  
 struct S4
 {
     S4(S4&) {}; // can't bind const, hence not a copy-constructible
 };
 static_assert(!std::is_copy_constructible_v<S4>);
  
 int main() {}

.SH See also

   is_constructible
   is_trivially_constructible         checks if a type has a constructor for specific
   is_nothrow_constructible           arguments
   \fI(C++11)\fP                            \fI(class template)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   is_default_constructible
   is_trivially_default_constructible
   is_nothrow_default_constructible   checks if a type has a default constructor
   \fI(C++11)\fP                            \fI(class template)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   is_move_constructible
   is_trivially_move_constructible    checks if a type can be constructed from an
   is_nothrow_move_constructible      rvalue reference
   \fI(C++11)\fP                            \fI(class template)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   copy_constructible                 specifies that an object of a type can be copy
   (C++20)                            constructed and move constructed
                                      (concept) 
