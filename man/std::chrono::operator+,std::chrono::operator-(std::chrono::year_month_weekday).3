.TH std::chrono::operator+,std::chrono::operator-(std::chrono::year_month_weekday) 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::chrono::operator+,std::chrono::operator-(std::chrono::year_month_weekday) \- std::chrono::operator+,std::chrono::operator-(std::chrono::year_month_weekday)

.SH Synopsis
   constexpr std::chrono::year_month_weekday

       operator+( const std::chrono::year_month_weekday& ymwd,        \fB(1)\fP \fI(since C++20)\fP

                  const std::chrono::months& dm ) noexcept;
   constexpr std::chrono::year_month_weekday

       operator+( const std::chrono::months& dm,                      \fB(2)\fP \fI(since C++20)\fP

                  const std::chrono::year_month_weekday& ymwd )
   noexcept;
   constexpr std::chrono::year_month_weekday

       operator+( const std::chrono::year_month_weekday& ymwd,        \fB(3)\fP \fI(since C++20)\fP

                  const std::chrono::years& dy ) noexcept;
   constexpr std::chrono::year_month_weekday

       operator+( const std::chrono::years& dy,                       \fB(4)\fP \fI(since C++20)\fP

                  const std::chrono::year_month_weekday& ymwd )
   noexcept;
   constexpr std::chrono::year_month_weekday

       operator-( const std::chrono::year_month_weekday& ymwd,        \fB(5)\fP \fI(since C++20)\fP

                  const std::chrono::months& dm ) noexcept;
   constexpr std::chrono::year_month_weekday

       operator-( const std::chrono::year_month_weekday& ymwd,        \fB(6)\fP \fI(since C++20)\fP

                  const std::chrono::years& dy ) noexcept;

   1,2) Adds dm.count() months to the date represented by ymwd. The result has the same
   year() and month() as std::chrono::year_month(ymwd.year(), ymwd.month()) + dm and
   the same weekday() and index() as ymwd.
   3,4) Adds dy.count() years to the date represented by ymwd. The result is equivalent
   to std::chrono::year_month_weekday(ymwd.year() + dy, ymwd.month(),
   ymwd.weekday_indexed()).
   5) Subtracts dm.count() months from the date represented by ymwd. Equivalent to ymwd
   + -dm.
   6) Subtracts dy.count() years from the date represented by ymwd. Equivalent to ymwd
   + -dy.

   For durations that are convertible to both std::chrono::years and
   std::chrono::months, the years overloads (3,4,6) are preferred if the call would
   otherwise be ambiguous.

.SH Notes

   Even if ymwd.ok() is true, the resulting year_month_weekday may not represent a
   valid date if ymwd.index() is 5.

.SH Example

   
// Run this code

 #include <cassert>
 #include <chrono>
 #include <iostream>
  
 int main()
 {
     auto ymwdi{1/std::chrono::Wednesday[1]/2021};
     std::cout << ymwdi << '\\n';
  
     ymwdi = std::chrono::years(5) + ymwdi;
     // First Wednesday in January, 2026
     std::cout << ymwdi << '\\n';
     assert(static_cast<std::chrono::year_month_day>(ymwdi) ==
            std::chrono::January/7/2026);
  
     ymwdi = ymwdi - std::chrono::months(6);
     // First Wednesday in July, 2025
     std::cout << ymwdi << '\\n';
     assert(static_cast<std::chrono::year_month_day>(ymwdi) ==
            std::chrono::July/2/2025);
 }

.SH Output:

 2021/Jan/Wed[1]
 2026/Jan/Wed[1]
 2025/Jul/Wed[1]
