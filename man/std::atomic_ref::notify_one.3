.TH std::atomic_ref::notify_one 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::atomic_ref::notify_one \- std::atomic_ref::notify_one

.SH Synopsis
   void notify_one() const noexcept;          \fB(1)\fP \fI(since C++20)\fP
   void notify_one() const volatile noexcept; \fB(2)\fP \fI(since C++20)\fP

   Performs atomic notifying operations.

   If there is a thread blocked in atomic waiting operation (i.e. wait()) on *this,
   then unblocks at least one such thread; otherwise does nothing.

.SH Return value

   \fI(none)\fP

.SH Notes

   This form of change-detection is often more efficient than simple polling or pure
   spinlocks.

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   wait                 blocks the thread until notified and the atomic value changes
                        \fI(public member function)\fP 
   atomic_wait
   atomic_wait_explicit blocks the thread until notified and the atomic value changes
   (C++20)              \fI(function template)\fP 
   (C++20)
   atomic_notify_one    notifies a thread blocked in atomic_wait
   (C++20)              \fI(function template)\fP 

.SH Category:
     * Todo no example
