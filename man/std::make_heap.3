.TH std::make_heap 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::make_heap \- std::make_heap

.SH Synopsis
   Defined in header <algorithm>
   template< class RandomIt >                               \fB(1)\fP (constexpr since C++20)
   void make_heap( RandomIt first, RandomIt last );
   template< class RandomIt, class Compare >
   void make_heap( RandomIt first, RandomIt last, Compare   \fB(2)\fP (constexpr since C++20)
   comp );

   Constructs a heap in the range [first, last).

   1) The constructed heap is with respect to
   operator<
   \fI(until C++20)\fP
   std::less{}
   \fI(since C++20)\fP.
   2) The constructed heap is with respect to comp.

   If any of the following conditions is satisfied, the behavior is undefined:

     * The type of *first is not Swappable.           \fI(until C++11)\fP
     * RandomIt is not ValueSwappable.
     * The type of *first is not MoveConstructible.   \fI(since C++11)\fP
     * The type of *first is not MoveAssignable.

.SH Parameters

   first, last -  the range to make the heap from
                  comparison function object (i.e. an object that satisfies the
                  requirements of Compare) which returns true if the first argument is
                  less than the second.

                  The signature of the comparison function should be equivalent to the
                  following:

                  bool cmp(const Type1& a, const Type2& b);
   comp        -
                  While the signature does not need to have const&, the function must
                  not modify the objects passed to it and must be able to accept all
                  values of type (possibly const) Type1 and Type2 regardless of value
                  category (thus, Type1& is not allowed
                  , nor is Type1 unless for Type1 a move is equivalent to a copy
                  \fI(since C++11)\fP).
                  The types Type1 and Type2 must be such that an object of type
                  RandomIt can be dereferenced and then implicitly converted to both of
                  them.
.SH Type requirements
   -
   RandomIt must meet the requirements of LegacyRandomAccessIterator.
   -
   Compare must meet the requirements of Compare.

.SH Complexity

   Given \\(\\scriptsize N\\)N as std::distance(first, last):

   1) At most \\(\\scriptsize 3N\\)3N comparisons using
   operator<
   \fI(until C++20)\fP
   std::less{}
   \fI(since C++20)\fP.
   2) At most \\(\\scriptsize 3N\\)3N applications of the comparison function comp.

.SH Example

   
// Run this code

 #include <algorithm>
 #include <functional>
 #include <iostream>
 #include <string_view>
 #include <vector>
  
 void print(std::string_view text, const std::vector<int>& v = {})
 {
     std::cout << text << ": ";
     for (const auto& e : v)
         std::cout << e << ' ';
     std::cout << '\\n';
 }
  
 int main()
 {
     print("Max heap");
  
     std::vector<int> v{3, 2, 4, 1, 5, 9};
     print("initially, v", v);
  
     std::make_heap(v.begin(), v.end());
     print("after make_heap, v", v);
  
     std::pop_heap(v.begin(), v.end());
     print("after pop_heap, v", v);
  
     auto top = v.back();
     v.pop_back();
     print("former top element", {top});
     print("after removing the former top element, v", v);
  
     print("\\nMin heap");
  
     std::vector<int> v1{3, 2, 4, 1, 5, 9};
     print("initially, v1", v1);
  
     std::make_heap(v1.begin(), v1.end(), std::greater<>{});
     print("after make_heap, v1", v1);
  
     std::pop_heap(v1.begin(), v1.end(), std::greater<>{});
     print("after pop_heap, v1", v1);
  
     auto top1 = v1.back();
     v1.pop_back();
     print("former top element", {top1});
     print("after removing the former top element, v1", v1);
 }

.SH Output:

 Max heap:
 initially, v: 3 2 4 1 5 9
 after make_heap, v: 9 5 4 1 2 3
 after pop_heap, v: 5 3 4 1 2 9
 former top element: 9
 after removing the former top element, v: 5 3 4 1 2
  
 Min heap:
 initially, v1: 3 2 4 1 5 9
 after make_heap, v1: 1 2 4 3 5 9
 after pop_heap, v1: 2 3 4 9 5 1
 former top element: 1
 after removing the former top element, v1: 2 3 4 9 5

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to              Behavior as published              Correct behavior
   LWG 3032 C++98      the elements of [first, last) was not required  required
                       to be swappable

.SH See also

   is_heap           checks if the given range is a max heap
   \fI(C++11)\fP           \fI(function template)\fP 
   is_heap_until     finds the largest subrange that is a max heap
   \fI(C++11)\fP           \fI(function template)\fP 
   push_heap         adds an element to a max heap
                     \fI(function template)\fP 
   pop_heap          removes the largest element from a max heap
                     \fI(function template)\fP 
                     turns a max heap into a range of elements sorted in ascending
   sort_heap         order
                     \fI(function template)\fP 
   priority_queue    adapts a container to provide priority queue
                     \fI(class template)\fP 
   ranges::make_heap creates a max heap out of a range of elements
   (C++20)           (niebloid)
