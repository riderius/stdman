.TH std::unordered_map::bucket 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::unordered_map::bucket \- std::unordered_map::bucket

.SH Synopsis
   size_type bucket( const Key& key ) const; \fB(1)\fP \fI(since C++11)\fP
   template< typename K >                    \fB(2)\fP (since C++26)
   size_type bucket( const K& x ) const;

   1) Returns the index of the bucket for key key. Elements (if any) with keys
   equivalent to key are always found in this bucket.
   2) Returns the index of the bucket for key that compares equivalent to the value x.
   Elements (if any) with keys that compare equivalent to x are always found in this
   bucket. This overload participates in overload resolution only if
   Hash::is_transparent and KeyEqual::is_transparent are valid and each denotes a type.
   This assumes that such Hash is callable with both K and Key type, and that the
   KeyEqual is transparent, which, together, allows calling this function without
   constructing an instance of Key.

   The returned value is valid only for instances of the container for which
   bucket_count() returns the same value (e.g., rehash() invalidates previously
   obtained value).

   The behavior is undefined if bucket_count() is zero.

.SH Parameters

   key - the value of the key to examine
   x   - a value of any type that can be transparently compared with a key

.SH Return value

   Bucket index for the requested key.

.SH Complexity

   Constant.

.SH Notes

                Feature-test macro                Value    Std          Feature
                                                                 Heterogeneous
                                                                 overloads for the
                                                                 remaining member
   __cpp_lib_associative_heterogeneous_insertion 202311L (C++26) functions in ordered
                                                                 and unordered
                                                                 associative
                                                                 containers. \fB(2)\fP

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   bucket_size returns the number of elements in specific bucket
               \fI(public member function)\fP 

.SH Category:
     * Todo no example
