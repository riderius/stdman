.TH std::basic_stacktrace::end,std::basic_stacktrace::cend 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_stacktrace::end,std::basic_stacktrace::cend \- std::basic_stacktrace::end,std::basic_stacktrace::cend

.SH Synopsis
   const_iterator end()  const noexcept; \fB(1)\fP (since C++23)
   const_iterator cend() const noexcept; \fB(2)\fP (since C++23)

   Returns the iterator pointing past the last entry of the basic_stacktrace.

   This iterator acts as a placeholder; attempting to dereference it results in
   undefined behavior.

   range-begin-end.svg

.SH Parameters

   \fI(none)\fP

.SH Return value

   The end iterator.

.SH Complexity

   Constant.

.SH Example

   
// Run this code

 #include <algorithm>
 #include <iostream>
 #include <stacktrace>
  
 int main()
 {
     auto trace       = std::stacktrace::current();
     auto empty_trace = std::stacktrace{};
  
     // Print stacktrace.
     std::for_each(trace.begin(), trace.end(),
                   [](const auto& f) { std::cout << f << '\\n'; });
  
     if (empty_trace.begin() == empty_trace.end())
         std::cout << "stacktrace 'empty_trace' is indeed empty.\\n";
 }

.SH Possible output:

 0x0000000000402BA8 in ./prog.exe
 __libc_start_main in /lib/x86_64-linux-gnu/libc.so.6
 0x0000000000402A29 in ./prog.exe
 stacktrace 'empty_trace' is indeed empty.

.SH See also

   begin  returns an iterator to the beginning
   cbegin \fI(public member function)\fP 
