.TH std::is_arithmetic 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_arithmetic \- std::is_arithmetic

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_arithmetic;

   std::is_arithmetic is a UnaryTypeTrait.

   If T is an arithmetic type (that is, an integral type or a floating-point type) or a
   cv-qualified version thereof, provides the member constant value equal to true. For
   any other type, value is false.

   If the program adds specializations for std::is_arithmetic
   or std::is_arithmetic_v
   \fI(since C++17)\fP, the behavior is undefined.

.SH Template parameters

   T - a type to check

   Helper variable template

   template< class T >                                               \fI(since C++17)\fP
   inline constexpr bool is_arithmetic_v = is_arithmetic<T>::value;

   

Inherited from std::integral_constant

.SH Member constants

   value    true if T is an arithmetic type, false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Notes

   Arithmetic types are the built-in types for which the arithmetic operators (+, -, *,
   /) are defined (possibly in combination with the usual arithmetic conversions).

   Specializations of std::numeric_limits are provided for all arithmetic types.

.SH Possible implementation

   template<class T>
   struct is_arithmetic : std::integral_constant<bool,
                                                 std::is_integral<T>::value ||
                                                 std::is_floating_point<T>::value> {};

.SH Example

   
// Run this code

 #include <atomic>
 #include <cstddef>
 #include <type_traits>
  
 class A {};
  
 enum class B : int { e };
  
 static_assert(
     std::is_arithmetic_v<bool>            == true  and
     std::is_arithmetic_v<char>            == true  and
     std::is_arithmetic_v<char const>      == true  and
     std::is_arithmetic_v<int>             == true  and
     std::is_arithmetic_v<int const>       == true  and
     std::is_arithmetic_v<float>           == true  and
     std::is_arithmetic_v<float const>     == true  and
     std::is_arithmetic_v<std::size_t>     == true  and
  
     std::is_arithmetic_v<char&>           == false and
     std::is_arithmetic_v<char*>           == false and
     std::is_arithmetic_v<int&>            == false and
     std::is_arithmetic_v<int*>            == false and
     std::is_arithmetic_v<float&>          == false and
     std::is_arithmetic_v<float*>          == false and
     std::is_arithmetic_v<A>               == false and
     std::is_arithmetic_v<B>               == false and
     std::is_arithmetic_v<decltype(B::e)>  == false and
     std::is_arithmetic_v<std::byte>       == false and
     std::is_arithmetic_v<std::atomic_int> == false
 );
  
 int main() {}

.SH See also

   is_integral       checks if a type is an integral type
   \fI(C++11)\fP           \fI(class template)\fP 
   is_floating_point checks if a type is a floating-point type
   \fI(C++11)\fP           \fI(class template)\fP 
