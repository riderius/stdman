.TH std::basic_stacktrace::operator= 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_stacktrace::operator= \- std::basic_stacktrace::operator=

.SH Synopsis
   basic_stacktrace& operator=( const basic_stacktrace& other ); \fB(1)\fP (since C++23)
   basic_stacktrace& operator=( basic_stacktrace&& other )       \fB(2)\fP (since C++23)
       noexcept(/* see below */);

   Replaces the contents of the basic_stacktrace.

   1) Copy assignment operator. Replaces the contents with a copy of the contents of
   other.
   If
   std::allocator_traits<allocator_type>::propagate_on_container_copy_assignment::value
   is true, the allocator of *this is replaced by a copy of that of other. If the
   allocator of *this after assignment would compare unequal to its old value, the old
   allocator is used to deallocate the memory, then the new allocator is used to
   allocate it before copying the entries. Otherwise, the memory owned by *this may be
   reused when possible.
   2) Move assignment operator. Replaces the contents with those of other using move
   semantics (i.e. the data in other is moved from other into *this). other is in a
   valid but unspecified state afterwards.
   If
   std::allocator_traits<allocator_type>::propagate_on_container_move_assignment::value
   is true, the allocator of *this is replaced by a copy of that of other. If it is
   false and the allocators of *this and other do not compare equal, *this cannot take
   ownership of the memory owned by other and must assign each entries individually,
   allocating additional memory using its own allocator as needed.

   In any case, the stacktrace entries originally belong to *this may be either
   destroyed or replaced by element-wise assignment.

   *this may be set to empty on allocation failure if the implementation strengthens
   the exception specification.

.SH Parameters

   other - another basic_stacktrace to use as source

.SH Return value

   *this

.SH Complexity

   1) Linear in the size of *this and other.
   2) Linear in the size of *this unless the allocators do not compare equal and do not
   propagate, in which case linear in the size of *this and other.

.SH Exceptions

   1) May throw implementation-defined exceptions.
   2)
   noexcept specification:  
   noexcept(std::allocator_traits<Allocator>::propagate_on_container_move_assignment::value
   || std::allocator_traits<Allocator>::is_always_equal::value)

.SH Notes

   After container move assignment (overload \fB(2)\fP), unless element-wise move assignment
   is forced by incompatible allocators, references, pointers, and iterators (other
   than the end iterator) to other remain valid, but refer to elements that are now in
   *this. The current standard makes this guarantee via the blanket statement in
   [container.reqmts]/67, and a more direct guarantee is under consideration via LWG
   issue 2321.

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   constructor   creates a new basic_stacktrace
                 \fI(public member function)\fP 

.SH Categories:
     * conditionally noexcept
     * Todo no example
