.TH std::is_heap_until 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_heap_until \- std::is_heap_until

.SH Synopsis
   Defined in header <algorithm>
   template< class RandomIt >                               \fB(1)\fP \fI(since C++11)\fP
   RandomIt is_heap_until( RandomIt first, RandomIt last );     (constexpr since C++20)
   template< class ExecutionPolicy, class RandomIt >

   RandomIt is_heap_until( ExecutionPolicy&& policy,        \fB(2)\fP \fI(since C++17)\fP

                           RandomIt first, RandomIt last );
   template< class RandomIt, class Compare >                    \fI(since C++11)\fP
   RandomIt is_heap_until( RandomIt first, RandomIt last,   \fB(3)\fP (constexpr since C++20)
   Compare comp );
   template< class ExecutionPolicy, class RandomIt, class
   Compare >

   RandomIt is_heap_until( ExecutionPolicy&& policy,        \fB(4)\fP \fI(since C++17)\fP

                           RandomIt first, RandomIt last,
   Compare comp );

   Examines the range [first, last) and finds the largest range beginning at first
   which is a heap.

   1) The heap property to be checked is with respect to
   operator<
   \fI(until C++20)\fP
   std::less{}
   \fI(since C++20)\fP.
   3) The heap property to be checked is with respect to comp.
   2,4) Same as (1,3), but executed according to policy.
   These overloads participate in overload resolution only if

   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true.        (until
                                                                             C++20)
   std::is_execution_policy_v<std::remove_cvref_t<ExecutionPolicy>> is true. (since
                                                                             C++20)

.SH Parameters

   first, last -  the range of elements to examine
   policy      -  the execution policy to use. See execution policy for details.
                  comparison function object (i.e. an object that satisfies the
                  requirements of Compare) which returns true if the first argument is
                  less than the second.

                  The signature of the comparison function should be equivalent to the
                  following:

                  bool cmp(const Type1& a, const Type2& b);
   comp        -
                  While the signature does not need to have const&, the function must
                  not modify the objects passed to it and must be able to accept all
                  values of type (possibly const) Type1 and Type2 regardless of value
                  category (thus, Type1& is not allowed
                  , nor is Type1 unless for Type1 a move is equivalent to a copy
                  \fI(since C++11)\fP).
                  The types Type1 and Type2 must be such that an object of type
                  RandomIt can be dereferenced and then implicitly converted to both of
                  them.
.SH Type requirements
   -
   RandomIt must meet the requirements of LegacyRandomAccessIterator.
   -
   Compare must meet the requirements of Compare.

.SH Return value

   The last iterator it for which range [first, it) is a heap.

.SH Complexity

   Given \\(\\scriptsize N\\)N as std::distance(first, last):

   1,2) \\(\\scriptsize O(N)\\)O(N) comparisons using
   operator<
   \fI(until C++20)\fP
   std::less{}
   \fI(since C++20)\fP.
   3,4) \\(\\scriptsize O(N)\\)O(N) applications of the comparison function comp.

.SH Exceptions

   The overloads with a template parameter named ExecutionPolicy report errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the standard policies, std::terminate is called.
       For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Example

   
// Run this code

 #include <algorithm>
 #include <iostream>
 #include <vector>
  
 int main()
 {
     std::vector<int> v{3, 1, 4, 1, 5, 9};
  
     std::make_heap(v.begin(), v.end());
  
     // probably mess up the heap
     v.push_back(2);
     v.push_back(6);
  
     auto heap_end = std::is_heap_until(v.begin(), v.end());
  
     std::cout << "all of v:  ";
     for (const auto& i : v)
         std::cout << i << ' ';
     std::cout << '\\n';
  
     std::cout << "only heap: ";
     for (auto i = v.begin(); i != heap_end; ++i)
         std::cout << *i << ' ';
     std::cout << '\\n';
 }

.SH Output:

 all of v:  9 5 4 1 1 3 2 6
 only heap: 9 5 4 1 1 3 2

.SH See also

   is_heap               checks if the given range is a max heap
   \fI(C++11)\fP               \fI(function template)\fP 
   make_heap             creates a max heap out of a range of elements
                         \fI(function template)\fP 
   push_heap             adds an element to a max heap
                         \fI(function template)\fP 
   pop_heap              removes the largest element from a max heap
                         \fI(function template)\fP 
                         turns a max heap into a range of elements sorted in ascending
   sort_heap             order
                         \fI(function template)\fP 
   ranges::is_heap_until finds the largest subrange that is a max heap
   (C++20)               (niebloid)
