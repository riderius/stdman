.TH std::ranges::join_view::iterator::operator++,-- 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::join_view::iterator::operator++,-- \- std::ranges::join_view::iterator::operator++,--

.SH Synopsis
   constexpr /*iterator*/& operator++();                                    \fB(1)\fP (since
                                                                                C++20)
   constexpr void operator++( int );                                        \fB(2)\fP (since
                                                                                C++20)
   constexpr /*iterator*/ operator++( int )
                                                                                (since
     requires /*ref-is-glvalue*/ && ranges::forward_range<Base> &&          \fB(3)\fP C++20)

              ranges::forward_range<ranges::range_reference_t<Base>>;
   constexpr iterator& operator--()

     requires /*ref-is-glvalue*/ && ranges::bidirectional_range<Base> &&        (since
              ranges::bidirectional_range<ranges::range_reference_t<Base>>  \fB(4)\fP C++20)
   &&

              ranges::common_range<ranges::range_reference_t<Base>>;
   constexpr /*iterator*/ operator--( int )

     requires /*ref-is-glvalue*/ && ranges::bidirectional_range<Base> &&        (since
              ranges::bidirectional_range<ranges::range_reference_t<Base>>  \fB(5)\fP C++20)
   &&

              ranges::common_range<ranges::range_reference_t<Base>>;

   Increments or decrements the underlying iterator.

   Let inner_ and outer_ be the underlying iterators, and parent_ be the pointer to
   parent ranges::join_view, the constant /*ref-is-glvalue*/ be
   std::is_reference_v<ranges::range_reference_t<Base>>.

   1) Let /*inner-range*/ be:
     * *outer_, if /*ref-is-glvalue*/ == true;
     * *parent_->inner_ otherwise.

   Equivalent to:

 auto&& inner_rng = /*inner-range*/;
 if (++inner_ == ranges::end(inner_rng)) {
     ++outer_;
     satisfy();
 }
 return *this;

   2) Equivalent to: ++*this.
   3) Equivalent to:

 auto tmp = *this;
 ++*this;
 return tmp;

   4) Equivalent to:

 if (outer_ == ranges::end(parent_->base_))
     inner_ = ranges::end(*--outer_);
 while (inner_ == ranges::begin(*outer_))
     inner_ = ranges::end(*--outer_);
 --inner_;
 return *this;

   5) Equivalent to:

 auto tmp = *this;
 --*this;
 return tmp;

.SH Parameters

   \fI(none)\fP

.SH Return value

   1,4) *this
   2) \fI(none)\fP
   3,5) a copy of *this that was made before the change
