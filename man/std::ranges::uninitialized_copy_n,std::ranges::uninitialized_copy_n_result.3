.TH std::ranges::uninitialized_copy_n,std::ranges::uninitialized_copy_n_result 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::uninitialized_copy_n,std::ranges::uninitialized_copy_n_result \- std::ranges::uninitialized_copy_n,std::ranges::uninitialized_copy_n_result

.SH Synopsis
   Defined in header <memory>
   Call signature
   template< std::input_iterator I, no-throw-input-iterator O,
   no-throw-sentinel-for<O> S >

   requires std::constructible_from<std::iter_value_t<O>,
   std::iter_reference_t<I>>                                          \fB(1)\fP \fI(since C++20)\fP
            uninitialized_copy_n_result<I, O>
            uninitialized_copy_n( I ifirst, std::iter_difference_t<I>
   count,

                                  O ofirst, S olast );
.SH Helper types
   template< class I, class O >                                       \fB(2)\fP \fI(since C++20)\fP
   using uninitialized_copy_n_result = ranges::in_out_result<I, O>;

   Let \\(\\scriptsize N\\)N be ranges::min(count, ranges::distance(ofirst, olast)),
   constructs \\(\\scriptsize N\\)N elements in the output range [ofirst, olast), which is
   an uninitialized memory area, from the elements in the input range beginning at
   ifirst.

   The input range [ifirst, ifirst + count) must not overlap with the output range
   [ofirst, olast).

   If an exception is thrown during the initialization, the objects already constructed
   are destroyed in an unspecified order.

   The function has the effect equivalent to:

 auto ret = ranges::uninitialized_copy(std::counted_iterator(ifirst, count),
                                       std::default_sentinel, ofirst, olast);
 return {std::move(ret.in).base(), ret.out};

   The function-like entities described on this page are niebloids, that is:

     * Explicit template argument lists cannot be specified when calling any of them.
     * None of them are visible to argument-dependent lookup.
     * When any of them are found by normal unqualified lookup as the name to the left
       of the function-call operator, argument-dependent lookup is inhibited.

   In practice, they may be implemented as function objects, or with special compiler
   extensions.

.SH Parameters

   ifirst        - the beginning of the range of elements to copy from
   count         - the number of elements to copy
   ofirst, olast - iterator-sentinel pair denoting the destination range

.SH Return value

   {ifirst + N, ofirst + N}

.SH Complexity

   \\(\\scriptsize\\mathcal{O}(N)\\)ùìû(N).

.SH Exceptions

   The exception thrown on construction of the elements in the destination range, if
   any.

.SH Notes

   An implementation may improve the efficiency of the ranges::uninitialized_copy_n, by
   using e.g. ranges::copy_n, if the value type of the output range is TrivialType.

.SH Possible implementation

struct uninitialized_copy_n_fn
{
    template<std::input_iterator I, no-throw-input-iterator O, no-throw-sentinel-for<O> S>
    requires std::constructible_from<std::iter_value_t<O>, std::iter_reference_t<I>>
    ranges::uninitialized_copy_n_result<I, O>
    operator()(I ifirst, std::iter_difference_t<I> count, O ofirst, S olast) const
    {
        O current{ofirst};
        try
        {
            for (; count > 0 && current != olast; ++ifirst, ++current, --count)
                ranges::construct_at(std::addressof(*current), *ifirst);
            return {std::move(ifirst), std::move(current)};
        }
        catch (...) // rollback: destroy constructed elements
        {
            for (; ofirst != current; ++ofirst)
                ranges::destroy_at(std::addressof(*ofirst));
            throw;
        }
    }
};
 
inline constexpr uninitialized_copy_n_fn uninitialized_copy_n{};

.SH Example

   
// Run this code

 #include <iomanip>
 #include <iostream>
 #include <memory>
 #include <string>
  
 int main()
 {
     const char* stars[]{"Procyon", "Spica", "Pollux", "Deneb", "Polaris"};
  
     constexpr int n{4};
     alignas(alignof(std::string)) char out[n * sizeof(std::string)];
  
     try
     {
         auto first{reinterpret_cast<std::string*>(out)};
         auto last{first + n};
         auto ret{std::ranges::uninitialized_copy_n(std::begin(stars), n, first, last)};
  
         std::cout << '{';
         for (auto it{first}; it != ret.out; ++it)
             std::cout << (it == first ? "" : ", ") << std::quoted(*it);
         std::cout << "};\\n";
  
         std::ranges::destroy(first, last);
     }
     catch (...)
     {
         std::cout << "uninitialized_copy_n exception\\n";
     }
 }

.SH Output:

 {"Procyon", "Spica", "Pollux", "Deneb"};

.SH See also

   ranges::uninitialized_copy copies a range of objects to an uninitialized area of
   (C++20)                    memory
                              (niebloid)
   uninitialized_copy_n       copies a number of objects to an uninitialized area of
   \fI(C++11)\fP                    memory
                              \fI(function template)\fP 
