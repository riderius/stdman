.TH std::erase_if(std::unordered_set) 3 "2024.06.10" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::erase_if(std::unordered_set) \- std::erase_if(std::unordered_set)

.SH Synopsis
   Defined in header <unordered_set>
   template< class Key, class Hash, class KeyEqual, class Alloc,

             class Pred >
   std::unordered_set<Key, Hash, KeyEqual, Alloc>::size_type         \fI(since C++20)\fP
       erase_if( std::unordered_set<Key, Hash, KeyEqual, Alloc>& c,

                 Pred pred );

   Erases all elements that satisfy the predicate pred from c.

   Equivalent to

 auto old_size = c.size();
 for (auto first = c.begin(), last = c.end(); first != last;)
 {
     if (pred(*first))
         first = c.erase(first);
     else
         ++first;
 }
 return old_size - c.size();

.SH Parameters

   c    - container from which to erase
   pred - predicate that returns true if the element should be erased

.SH Return value

   The number of erased elements.

.SH Complexity

   Linear.

.SH Example

   
// Run this code

 #include <iostream>
 #include <unordered_set>
  
 void println(auto rem, auto const& container)
 {
     std::cout << rem << '{';
     for (char sep[]{0, ' ', 0}; const auto& item : container)
         std::cout << sep << item, *sep = ',';
     std::cout << "}\\n";
 }
  
 int main()
 {
     std::unordered_set data{3, 3, 4, 5, 5, 6, 6, 7, 2, 1, 0};
     println("Original:\\n", data);
  
     auto divisible_by_3 = [](auto const& x) { return (x % 3) == 0; };
  
     const auto count = std::erase_if(data, divisible_by_3);
  
     println("Erase all items divisible by 3:\\n", data);
     std::cout << count << " items erased.\\n";
 }

.SH Possible output:

 Original:
 {0, 1, 2, 7, 6, 5, 4, 3}
 Erase all items divisible by 3:
 {1, 2, 7, 5, 4}
 3 items erased.

.SH See also

   remove    removes elements satisfying specific criteria
   remove_if \fI(function template)\fP 
